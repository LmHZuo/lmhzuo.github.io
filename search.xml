<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title></title>
      <link href="/2018/06/19/Nexus%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2018/06/19/Nexus%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>[TOC]</p><h1 id="Nexus-3-x搭建Maven私服及使用教程"><a href="#Nexus-3-x搭建Maven私服及使用教程" class="headerlink" title="Nexus 3.x搭建Maven私服及使用教程"></a>Nexus 3.x搭建Maven私服及使用教程</h1><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">备注</th><th style="text-align:center">编制人</th><th style="text-align:center">日期</th></tr></thead><tbody><tr><td style="text-align:center">V1.0</td><td style="text-align:center">Nexus 3.x搭建Maven私服及使用</td><td style="text-align:center">陈权栋</td><td style="text-align:center">2017-07-07</td></tr></tbody></table><p>广州图灵科技有限公司</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>一般maven项目开发，我们所需的所有构件都需要通过maven的中央仓库和第三方的Maven仓库下载到本地。而一个团队中的所有人都重复地从maven仓库下载构件无疑加大了仓库的负载和浪费了外网带宽，如果网速慢的话，还会影响项目的进程。很多情况下，项目的开发都是在内网进行的，连接不到maven仓库怎么办呢？开发的公共构件怎么让其它项目使用？这个时候我们都会选择为自己的团队搭建属于自己的maven私服，这样既节省了网络带宽也会加速项目搭建的进程，当然前提条件就是你的私服中拥有项目所需的所有构件。</p><p>这里的私服是指私有服务器，是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构件。有了私服之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载（见下图）。</p><p>搭建Maven私服，我们选择的是Nexus Repository OSS。它是一个强大的Maven仓库管理器，它极大地简化了本地内部仓库的维护和外部仓库的访问，最重要的是，它是免费开源的！</p><p><img src="img/私服示例图.png" alt="无效" title="私服示例图"></p><blockquote><p>注：</p></blockquote><blockquote><p>图中的远程仓库处于外网，而私服和本地仓库处于内网</p></blockquote><h2 id="搭建Maven私服前的说明或准备"><a href="#搭建Maven私服前的说明或准备" class="headerlink" title="搭建Maven私服前的说明或准备"></a>搭建Maven私服前的说明或准备</h2><ul><li><p>搭建操作系统为Ubuntu 16.04，Windows也有安装包，但没有尝试过</p></li><li><p>Apache Maven版本为3.3.9，需要提前安装好，安装过程这里不做讲解，有需要自行谷歌或百度</p></li><li><p>Intellij IDEA版本为2017.1.3，用于项目发布构建到私服上的测试</p></li></ul><h2 id="搭建Maven私服步骤"><a href="#搭建Maven私服步骤" class="headerlink" title="搭建Maven私服步骤"></a>搭建Maven私服步骤</h2><h3 id="1、到官网下载Nexus安装包"><a href="#1、到官网下载Nexus安装包" class="headerlink" title="1、到官网下载Nexus安装包"></a>1、到官网下载Nexus安装包</h3><ul><li><p>Nexus Repository OSS是免费开源的，我们这里下载与操作系统相对应的最新版<code>Nexus Repository Manager OSS 3.x - Unix</code></p></li><li><p>其下载链接为：<a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="noopener">https://www.sonatype.com/download-oss-sonatype</a> ，该链接可能需要翻墙，打开得比较慢</p></li></ul><h3 id="2、解压安装Nexus"><a href="#2、解压安装Nexus" class="headerlink" title="2、解压安装Nexus"></a>2、解压安装Nexus</h3><ul><li><p>将下载好的安装包拷贝到要解压的目录下</p></li><li><p>然后在终端进入安装包所在的目录，使用命令<code>tar -zxvf ./nexus-3.3.2-02-unix.tar.gz</code>进行解压</p></li><li><p>解压完后，通过<code>cd nexus</code>命令进入目录，执行<code>ls</code>命令可看到如下图的文件：</p></li></ul><p><img src="img/解压文件.png" alt="无效" title="解压文件"></p><blockquote><p>注：</p></blockquote><blockquote><p>其中，nexus-3.3.2-02目录中存放启动和关闭文件，以及配置文件，而sonatype-work一般存放数据文件，比如构件的数据</p></blockquote><h3 id="3、启动Nexus"><a href="#3、启动Nexus" class="headerlink" title="3、启动Nexus"></a>3、启动Nexus</h3><ul><li><p>在上一步的终端，通过<code>cd nexus-3.3.2-02/bin</code>进入启动文件目录</p></li><li><p>然后，通过命令<code>./nexus start</code>或<code>./nexus run</code>启动Nexus，其中<code>start</code>是后台启动，而<code>run</code>不是，会在终端控制台打印出启动信息</p></li><li><p>启动完成后，打开浏览器，访问<a href="http://localhost:8081/" target="_blank" rel="noopener">http://localhost:8081/</a> 即可看到运行的Nexus，如下图：</p></li></ul><p><img src="img/运行成功.png" alt="无效" title="运行成功"></p><h2 id="Nexus使用"><a href="#Nexus使用" class="headerlink" title="Nexus使用"></a>Nexus使用</h2><h3 id="1、说明"><a href="#1、说明" class="headerlink" title="1、说明"></a>1、说明</h3><ul><li><p>仓库类型说明</p><ul><li><p>group(仓库组类型)：又叫组仓库，用于方便开发人员自己设定仓库</p></li><li><p>hosted(宿主类型)：内部项目的发布仓库（内部开发人员，发布上去存放的仓库），包括为<code>release(发行版)</code>仓库和<code>snapshot(调试版)</code>仓库，创建时最好选择允许重新部署</p></li><li><p>proxy(代理类型)：从远程中央仓库中寻找数据的仓库</p></li><li><p>virtual(虚拟类型)：虚拟仓库（这个基本用不到，重点关注上面三个仓库的使用）</p></li></ul></li><li><p>自带仓库(组)说明</p><ul><li><p>maven-central：proxy类型仓库，是Maven中央库，默认从<a href="https://repo1.maven.org/maven2/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/</a> 拉取jar 包</p></li><li><p>maven-releases：hosted类型仓库，存放私库发行版jar 包</p></li><li><p>maven-snapshots：hosted类型仓库，存放私库快照（调试版本）jar 包</p></li><li><p>maven-public：仓库组类型，把上面三个仓库组合在一起对外提供服务，默认包括<code>maven-central</code>、<code>maven-releases</code>和<code>maven-snapshots</code>三个仓库</p></li></ul></li><li><p>理解图示：</p></li></ul><p><img src="img/理解图示.png" alt="无效" title="理解图示"></p><h3 id="2、登录"><a href="#2、登录" class="headerlink" title="2、登录"></a>2、登录</h3><ul><li>点击右上交的<code>Sign in</code>，输入账号密码（初始化账号为<code>admin</code>，密码为<code>admin123</code>）进行登录，如下图所示：</li></ul><p><img src="img/登录.png" alt="无效" title="登录"></p><blockquote><p>注：</p></blockquote><blockquote><p>登录后建议立即修改密码，点击右上角的<code>admin</code>即可进行修改，这里不做详述</p></blockquote><h3 id="3、添加用户账号"><a href="#3、添加用户账号" class="headerlink" title="3、添加用户账号"></a>3、添加用户账号</h3><ul><li>Nexus允许添加用户账号，然后，对不同的用户进行不同权限的授权，如下图所示：</li></ul><p><img src="img/添加用户.png" alt="无效" title="添加用户"></p><blockquote><p>注：</p></blockquote><blockquote><p>所有字段都是必填的，ID将作为用户名</p></blockquote><blockquote><p>Granted为新建账号进行权限授权，<code>nx-admin</code>为管理员角色，里面配置了最大的权限，不可修改，而<code>nx-anonymous</code>为匿名用户角色，不需要登录，只能查看和下载构件，权限可由管理员进行修改</p></blockquote><blockquote><p>关于权限和角色配置模块，这里就不作介绍了，有兴趣可以查看页面左边的<code>Privileges</code>和<code>Roles</code>菜单</p></blockquote><h3 id="4、将Maven项目CommonUtils发布到Maven私服"><a href="#4、将Maven项目CommonUtils发布到Maven私服" class="headerlink" title="4、将Maven项目CommonUtils发布到Maven私服"></a>4、将Maven项目CommonUtils发布到Maven私服</h3><ul><li>在Maven的配置文件setting.xml的<code>&lt;servers&gt;&lt;/servers&gt;</code>标签中间添加以下配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>******<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p></blockquote><blockquote><p>其中的id可以任意取，password为Nexus的<code>admin</code>用户的密码，默认为admin123</p></blockquote><ul><li>用Intellij IDEA打开CommonUtils项目，并在pom.xml文件中添加下面配置:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.20:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.20:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p></blockquote><blockquote><p><code>&lt;repository&gt;&lt;/repository&gt;</code>中配置release仓库，<code>&lt;snapshotRepository&gt;&lt;/snapshotRepository&gt;</code>中配置snapshot仓库</p></blockquote><blockquote><p>其中的id就是Maven的setting.xml文件的server的id，用于发布构件到Maven私服时的认证</p></blockquote><blockquote><p>name可以任意取，url则分别对应release仓库和snapshot仓库的地址，url中的IP就是Maven私服的IP地址</p></blockquote><blockquote><p>发布构件到Maven私服时，会根据pom.xml中的<code>&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</code>是否有<code>SNAPSHOT</code>选择发布到哪个仓库中，有则发布到snapshot仓库，否则发布到release仓库</p></blockquote><ul><li>打开Intellij IDEA的Maven Projects，双击<code>deploy</code>进行发布构件到Maven私服，如下图所示:</li></ul><p><img src="img/发布构件.png" alt="无效" title="发布构件"></p><blockquote><p>注：</p></blockquote><blockquote><p>发布时，如果pom.xml中的<code>&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</code>有<code>SNAPSHOT</code>则发布到snapshot仓库，否则发布到release仓库</p></blockquote><h3 id="5、发布第三方jar包-以发布支付宝依赖为例子"><a href="#5、发布第三方jar包-以发布支付宝依赖为例子" class="headerlink" title="5、发布第三方jar包(以发布支付宝依赖为例子)"></a>5、发布第三方jar包(以发布支付宝依赖为例子)</h3><ul><li>调出终端，执行下面命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy:deploy-file </span><br><span class="line">  -DgroupId=com.alipay</span><br><span class="line">  -DartifactId=api</span><br><span class="line">  -Dversion=1.0</span><br><span class="line">  -Dpackaging=jar </span><br><span class="line">  -Dfile=/home/quandong/alipay.jar</span><br><span class="line">  -Durl=http://localhost:8081/repository/maven-releases/</span><br><span class="line">  -DrepositoryId=nexus</span><br></pre></td></tr></table></figure><blockquote><p>注:</p></blockquote><blockquote><p>执行命令前确定安装了Maven</p></blockquote><blockquote><p><code>DgroupId</code>构件的组名</p></blockquote><blockquote><p><code>DartifactId</code>构件名称</p></blockquote><blockquote><p><code>Dversion</code>构件版本号</p></blockquote><blockquote><p><code>Dpackaging</code>构件类型，一般为jar</p></blockquote><blockquote><p><code>Dfile</code>构件所在本地路径</p></blockquote><blockquote><p><code>Durl</code>存放构件的仓库url</p></blockquote><blockquote><p><code>DrepositoryId</code>发布构件时的认证身份，之前在Maven的setting.xml文件中配置的server的id</p></blockquote><h3 id="6、发布结果"><a href="#6、发布结果" class="headerlink" title="6、发布结果"></a>6、发布结果</h3><ul><li>到Maven私服查看发布的构件，如下图所示:</li></ul><p><img src="img/发布结果.png" alt="无效" title="发布结果"></p><h3 id="7、其他项目引用发布的CommonUtils构件-引用api构件也一样"><a href="#7、其他项目引用发布的CommonUtils构件-引用api构件也一样" class="headerlink" title="7、其他项目引用发布的CommonUtils构件(引用api构件也一样)"></a>7、其他项目引用发布的CommonUtils构件(引用api构件也一样)</h3><ul><li>在其他项目的pom.xml文件中引入下面的配置，使得项目可以从Maven私服中下载CommonUtils构件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.20:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.turingdi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commonutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p></blockquote><blockquote><p>其中的url是仓库组的url，仓库组中包括了代理仓库、宿主发行版仓库和宿主调试版仓库</p></blockquote><blockquote><p>保存后，项目会自动从Maven私服中下载CommonUtils构件</p></blockquote><blockquote><p><code>dependency</code>的<code>groupId</code>、<code>artifactId</code>和<code>version</code>要和CommonUtils项目的pom.xml文件配置一样，忘记了可以在Nexus上面的对应构件中查看</p></blockquote><p><strong>至此，Nexus搭建Maven私服就完成了</strong></p><p><strong>欢迎阅读，并希望能指出其中的失误之处，感谢!</strong></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/06/15/docker/"/>
      <url>/2018/06/15/docker/</url>
      <content type="html"><![CDATA[<h1 id="《Docker环境下的前后端分离部署与运维》课程脚本"><a href="#《Docker环境下的前后端分离部署与运维》课程脚本" class="headerlink" title="《Docker环境下的前后端分离部署与运维》课程脚本"></a>《Docker环境下的前后端分离部署与运维》课程脚本</h1><h2 id="Docker虚拟机常用命令"><a href="#Docker虚拟机常用命令" class="headerlink" title="Docker虚拟机常用命令"></a>Docker虚拟机常用命令</h2><ol><li><p>先更新软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure></li><li><p>安装Docker虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker</span><br></pre></td></tr></table></figure></li><li><p>运行、重启、关闭Docker虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br><span class="line">service docker start</span><br><span class="line">service docker stop</span><br></pre></td></tr></table></figure></li><li><p>搜索镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure></li><li><p>下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure></li><li><p>查看镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名称</span><br></pre></td></tr></table></figure></li><li><p>运行容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 启动参数  镜像名称</span><br></pre></td></tr></table></figure></li><li><p>查看容器列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li><li><p>停止、挂起、恢复容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器ID</span><br><span class="line">docker pause 容器ID</span><br><span class="line">docker unpase 容器ID</span><br></pre></td></tr></table></figure></li><li><p>查看容器信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器ID</span><br></pre></td></tr></table></figure></li><li><p>删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器ID</span><br></pre></td></tr></table></figure></li><li><p>数据卷管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume create 数据卷名称  #创建数据卷</span><br><span class="line">docker volume rm 数据卷名称  #删除数据卷</span><br><span class="line">docker volume inspect 数据卷名称  #查看数据卷</span><br></pre></td></tr></table></figure></li><li><p>网络管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network ls 查看网络信息</span><br><span class="line">docker network create --subnet=网段 网络名称</span><br><span class="line">docker network rm 网络名称</span><br></pre></td></tr></table></figure></li><li><p>避免VM虚拟机挂起恢复之后，Docker虚拟机断网</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>文件中添加<code>net.ipv4.ip_forward=1</code>这个配置</p><p>​<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>重启网络服务</span><br><span class="line">systemctl  restart network</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p></li></ol><h2 id="安装PXC集群，负载均衡，双机热备"><a href="#安装PXC集群，负载均衡，双机热备" class="headerlink" title="安装PXC集群，负载均衡，双机热备"></a>安装PXC集群，负载均衡，双机热备</h2><ol><li><p>安装PXC镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull percona/percona-xtradb-cluster</span><br></pre></td></tr></table></figure></li><li><p>为PXC镜像改名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag percona/percona-xtradb-cluster pxc</span><br></pre></td></tr></table></figure></li><li><p>创建net1网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --subnet=172.18.0.0/16 net1</span><br></pre></td></tr></table></figure></li><li><p>创建5个数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --name v1</span><br><span class="line">docker volume create --name v2</span><br><span class="line">docker volume create --name v3</span><br><span class="line">docker volume create --name v4</span><br><span class="line">docker volume create --name v5</span><br></pre></td></tr></table></figure></li><li><p>创建备份数据卷（用于热备份数据）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --name backup</span><br></pre></td></tr></table></figure></li><li><p>创建5节点的PXC集群</p><p>注意，每个MySQL容器创建之后，因为要执行PXC的初始化和加入集群等工作，耐心等待1分钟左右再用客户端连接MySQL。另外，必须第1个MySQL节点启动成功，用MySQL客户端能连接上之后，再去创建其他MySQL节点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>创建第1个MySQL节点</span><br><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -v v1:/var/lib/mysql -v backup:/data --privileged --name=node1 --net=net1 --ip 172.18.0.2 pxc</span><br><span class="line"><span class="meta">#</span>创建第2个MySQL节点</span><br><span class="line">docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v2:/var/lib/mysql -v backup:/data --privileged --name=node2 --net=net1 --ip 172.18.0.3 pxc</span><br><span class="line"><span class="meta">#</span>创建第3个MySQL节点</span><br><span class="line">docker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v3:/var/lib/mysql --privileged --name=node3 --net=net1 --ip 172.18.0.4 pxc</span><br><span class="line"><span class="meta">#</span>创建第4个MySQL节点</span><br><span class="line">docker run -d -p 3309:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v4:/var/lib/mysql --privileged --name=node4 --net=net1 --ip 172.18.0.5 pxc</span><br><span class="line"><span class="meta">#</span>创建第5个MySQL节点</span><br><span class="line">docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v5:/var/lib/mysql -v backup:/data --privileged --name=node5 --net=net1 --ip 172.18.0.6 pxc</span><br></pre></td></tr></table></figure></li><li><p>安装Haproxy镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull haproxy</span><br></pre></td></tr></table></figure></li><li><p>宿主机上编写Haproxy配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/soft/haproxy.cfg</span><br></pre></td></tr></table></figure><p>配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">#工作目录</span><br><span class="line">chroot /usr/local/etc/haproxy</span><br><span class="line">#日志文件，使用rsyslog服务中local5日志设备（/var/log/local5），等级info</span><br><span class="line">log 127.0.0.1 local5 info</span><br><span class="line">#守护进程运行</span><br><span class="line">daemon</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">logglobal</span><br><span class="line">modehttp</span><br><span class="line">#日志格式</span><br><span class="line">optionhttplog</span><br><span class="line">#日志中不记录负载均衡的心跳检测记录</span><br><span class="line">optiondontlognull</span><br><span class="line">    #连接超时（毫秒）</span><br><span class="line">timeout connect 5000</span><br><span class="line">    #客户端超时（毫秒）</span><br><span class="line">timeout client  50000</span><br><span class="line">#服务器超时（毫秒）</span><br><span class="line">    timeout server  50000</span><br><span class="line"></span><br><span class="line">#监控界面</span><br><span class="line">listen  admin_stats</span><br><span class="line">#监控界面的访问的IP和端口</span><br><span class="line">bind  0.0.0.0:8888</span><br><span class="line">#访问协议</span><br><span class="line">    mode        http</span><br><span class="line">#URI相对地址</span><br><span class="line">    stats uri   /dbs</span><br><span class="line">#统计报告格式</span><br><span class="line">    stats realm     Global\ statistics</span><br><span class="line">#登陆帐户信息</span><br><span class="line">    stats auth  admin:abc123456</span><br><span class="line">#数据库负载均衡</span><br><span class="line">listen  proxy-mysql</span><br><span class="line">#访问的IP和端口</span><br><span class="line">bind  0.0.0.0:3306  </span><br><span class="line">    #网络协议</span><br><span class="line">mode  tcp</span><br><span class="line">#负载均衡算法（轮询算法）</span><br><span class="line">#轮询算法：roundrobin</span><br><span class="line">#权重算法：static-rr</span><br><span class="line">#最少连接算法：leastconn</span><br><span class="line">#请求源IP算法：source </span><br><span class="line">    balance  roundrobin</span><br><span class="line">#日志格式</span><br><span class="line">    option  tcplog</span><br><span class="line">#在MySQL中创建一个没有权限的haproxy用户，密码为空。Haproxy使用这个账户对MySQL数据库心跳检测</span><br><span class="line">    option  mysql-check user haproxy</span><br><span class="line">    server  MySQL_1 172.18.0.2:3306 check weight 1 maxconn 2000  </span><br><span class="line">    server  MySQL_2 172.18.0.3:3306 check weight 1 maxconn 2000  </span><br><span class="line">server  MySQL_3 172.18.0.4:3306 check weight 1 maxconn 2000 </span><br><span class="line">server  MySQL_4 172.18.0.5:3306 check weight 1 maxconn 2000</span><br><span class="line">server  MySQL_5 172.18.0.6:3306 check weight 1 maxconn 2000</span><br><span class="line">#使用keepalive检测死链</span><br><span class="line">    option  tcpka</span><br></pre></td></tr></table></figure></li><li><p>创建两个Haproxy容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>创建第1个Haproxy负载均衡服务器</span><br><span class="line">docker run -it -d -p 4001:8888 -p 4002:3306 -v /home/soft/haproxy:/usr/local/etc/haproxy --name h1 --privileged --net=net1 --ip 172.18.0.7 haproxy</span><br><span class="line"><span class="meta">#</span>进入h1容器，启动Haproxy</span><br><span class="line">docker exec -it h1 bash</span><br><span class="line">haproxy -f /usr/local/etc/haproxy/haproxy.cfg</span><br><span class="line"><span class="meta">#</span>创建第2个Haproxy负载均衡服务器</span><br><span class="line">docker run -it -d -p 4003:8888 -p 4004:3306 -v /home/soft/haproxy:/usr/local/etc/haproxy --name h2 --privileged --net=net1 --ip 172.18.0.8 haproxy</span><br><span class="line"><span class="meta">#</span>进入h2容器，启动Haproxy</span><br><span class="line">docker exec -it h2 bash</span><br><span class="line">haproxy -f /usr/local/etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure></li><li><p>Haproxy容器内安装Keepalived，设置虚拟IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入h1容器</span><br><span class="line">docker exec -it h1 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装VIM</span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta">#</span>安装Keepalived</span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="meta">#</span>编辑Keepalived配置文件（参考下方配置文件）</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br><span class="line"><span class="meta">#</span>宿主机执行ping命令</span><br><span class="line">ping 172.18.0.201</span><br></pre></td></tr></table></figure><p>配置文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance  VI_1 &#123;</span><br><span class="line">    state  MASTER</span><br><span class="line">    interface  eth0</span><br><span class="line">    virtual_router_id  51</span><br><span class="line">    priority  100</span><br><span class="line">    advert_int  1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type  PASS</span><br><span class="line">        auth_pass  123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.18.0.201</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入h2容器</span><br><span class="line">docker exec -it h2 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装VIM</span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta">#</span>安装Keepalived</span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="meta">#</span>编辑Keepalived配置文件</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br><span class="line"><span class="meta">#</span>宿主机执行ping命令</span><br><span class="line">ping 172.18.0.201</span><br></pre></td></tr></table></figure><p>配置文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance  VI_1 &#123;</span><br><span class="line">    state  MASTER</span><br><span class="line">    interface  eth0</span><br><span class="line">    virtual_router_id  51</span><br><span class="line">    priority  100</span><br><span class="line">    advert_int  1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type  PASS</span><br><span class="line">        auth_pass  123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.18.0.201</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>宿主机安装Keepalived，实现双击热备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>宿主机执行安装Keepalived</span><br><span class="line">yum -y install keepalived</span><br><span class="line"><span class="meta">#</span>修改Keepalived配置文件</span><br><span class="line">vi /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br></pre></td></tr></table></figure><p>Keepalived配置文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">       192.168.99.150</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.99.150 8888 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr </span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 172.18.0.201 8888 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.99.150 3306 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr </span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 172.18.0.201 3306 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>热备份数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入node1容器</span><br><span class="line">docker exec -it node1 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装热备工具</span><br><span class="line">apt-get install percona-xtrabackup-24</span><br><span class="line"><span class="meta">#</span>全量热备</span><br><span class="line">innobackupex --user=root --password=abc123456 /data/backup/full</span><br></pre></td></tr></table></figure></li><li><p>冷还原数据<br>停止其余4个节点，并删除节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker stop node2</span><br><span class="line">docker stop node3</span><br><span class="line">docker stop node4</span><br><span class="line">docker stop node5</span><br><span class="line">docker rm node2</span><br><span class="line">docker rm node3</span><br><span class="line">docker rm node4</span><br><span class="line">docker rm node5</span><br></pre></td></tr></table></figure><p>node1容器中删除MySQL的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>删除数据</span><br><span class="line">rm -rf /var/lib/mysql/*</span><br><span class="line"><span class="meta">#</span>清空事务</span><br><span class="line">innobackupex --user=root --password=abc123456 --apply-back /data/backup/full/2018-04-15_05-09-07/</span><br><span class="line"><span class="meta">#</span>还原数据</span><br><span class="line">innobackupex --user=root --password=abc123456 --copy-back  /data/backup/full/2018-04-15_05-09-07/</span><br></pre></td></tr></table></figure><p>重新创建其余4个节点，组件PXC集群</p></li></ol><h2 id="安装Redis，配置RedisCluster集群"><a href="#安装Redis，配置RedisCluster集群" class="headerlink" title="安装Redis，配置RedisCluster集群"></a>安装Redis，配置RedisCluster集群</h2><ol><li><p>安装Redis镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull yyyyttttwwww/redis</span><br></pre></td></tr></table></figure></li><li><p>创建net2网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --subnet=172.19.0.0/16 net2</span><br></pre></td></tr></table></figure></li><li><p>创建6节点Redis容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name r1 -p 5001:6379 --net=net2 --ip 172.19.0.2 redis bash</span><br><span class="line">docker run -it -d --name r2 -p 5002:6379 --net=net2 --ip 172.19.0.3 redis bash</span><br><span class="line">docker run -it -d --name r3 -p 5003:6379 --net=net2 --ip 172.19.0.4 redis bash</span><br><span class="line">docker run -it -d --name r4 -p 5004:6379 --net=net2 --ip 172.19.0.5 redis bash</span><br><span class="line">docker run -it -d --name r5 -p 5005:6379 --net=net2 --ip 172.19.0.6 redis bash</span><br></pre></td></tr></table></figure></li><li><p>启动6节点Redis服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入r1节点</span><br><span class="line">docker exec -it r1 bash</span><br><span class="line">cp /home/redis/redis.conf /usr/redis/redis.conf</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="meta">#</span>进入r2节点</span><br><span class="line">docker exec -it r2 bash</span><br><span class="line">cp /home/redis/redis.conf /usr/redis/redis.conf</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="meta">#</span>进入r3节点</span><br><span class="line">docker exec -it r3 bash</span><br><span class="line">cp /home/redis/redis.conf /usr/redis/redis.conf</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="meta">#</span>进入r4节点</span><br><span class="line">docker exec -it r4 bash</span><br><span class="line">cp /home/redis/redis.conf /usr/redis/redis.conf</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="meta">#</span>进入r5节点</span><br><span class="line">docker exec -it r5 bash</span><br><span class="line">cp /home/redis/redis.conf /usr/redis/redis.conf</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="meta">#</span>进入r6节点</span><br><span class="line">docker exec -it r6 bash</span><br><span class="line">cp /home/redis/redis.conf /usr/redis/redis.conf</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br></pre></td></tr></table></figure></li><li><p>创建Cluster集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>在r1节点上执行下面的指令</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">mkdir -p ../cluster</span><br><span class="line">cp redis-trib.rb ../cluster/</span><br><span class="line">cd ../cluster</span><br><span class="line"><span class="meta">#</span>创建Cluster集群</span><br><span class="line">./redis-trib.rb create --replicas 1 172.19.0.2:6379 172.19.0.3:6379 172.19.0.4:6379 172.19.0.5:6379 172.19.0.6:6379 172.19.0.7:6379</span><br></pre></td></tr></table></figure></li></ol><h2 id="打包部署后端项目"><a href="#打包部署后端项目" class="headerlink" title="打包部署后端项目"></a>打包部署后端项目</h2><ol><li><p>进入人人开源后端项目，执行打包（修改配置文件，更改端口，打包三次生成三个JAR文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure></li><li><p>安装Java镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull java</span><br></pre></td></tr></table></figure></li><li><p>创建3节点Java容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>创建数据卷，上传JAR文件</span><br><span class="line">docker volume create j1</span><br><span class="line"><span class="meta">#</span>启动容器</span><br><span class="line">docker run -it -d --name j1 -v j1:/home/soft --net=host java</span><br><span class="line"><span class="meta">#</span>进入j1容器</span><br><span class="line">docker exec -it j1 bash</span><br><span class="line"><span class="meta">#</span>启动Java项目</span><br><span class="line">nohup java -jar /home/soft/renren-fast.jar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>创建数据卷，上传JAR文件</span><br><span class="line">docker volume create j2</span><br><span class="line"><span class="meta">#</span>启动容器</span><br><span class="line">docker run -it -d --name j2 -v j2:/home/soft --net=host java</span><br><span class="line"><span class="meta">#</span>进入j1容器</span><br><span class="line">docker exec -it j2 bash</span><br><span class="line"><span class="meta">#</span>启动Java项目</span><br><span class="line">nohup java -jar /home/soft/renren-fast.jar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>创建数据卷，上传JAR文件</span><br><span class="line">docker volume create j3</span><br><span class="line"><span class="meta">#</span>启动容器</span><br><span class="line">docker run -it -d --name j3 -v j3:/home/soft --net=host java</span><br><span class="line"><span class="meta">#</span>进入j1容器</span><br><span class="line">docker exec -it j3 bash</span><br><span class="line"><span class="meta">#</span>启动Java项目</span><br><span class="line">nohup java -jar /home/soft/renren-fast.jar</span><br></pre></td></tr></table></figure></li><li><p>安装Nginx镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure></li><li><p>创建Nginx容器，配置负载均衡</p><p>宿主机上/home/n1/nginx.conf配置文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">upstream tomcat &#123;</span><br><span class="line">server 192.168.99.104:6001;</span><br><span class="line">server 192.168.99.104:6002;</span><br><span class="line">server 192.168.99.104:6003;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       6101;</span><br><span class="line">        server_name  192.168.99.104; </span><br><span class="line">        location / &#123;  </span><br><span class="line">            proxy_pass   http://tomcat;</span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建第1个Nginx节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name n1 -v /home/n1/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</span><br></pre></td></tr></table></figure><p>宿主机上/home/n2/nginx.conf配置文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">upstream tomcat &#123;</span><br><span class="line">server 192.168.99.104:6001;</span><br><span class="line">server 192.168.99.104:6002;</span><br><span class="line">server 192.168.99.104:6003;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       6102;</span><br><span class="line">        server_name  192.168.99.104; </span><br><span class="line">        location / &#123;  </span><br><span class="line">            proxy_pass   http://tomcat;</span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建第2个Nginx节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name n2 -v /home/n2/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</span><br></pre></td></tr></table></figure></li><li><p>在Nginx容器安装Keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入n1节点</span><br><span class="line">docker exec -it n1 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装VIM</span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta">#</span>安装Keepalived</span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="meta">#</span>编辑Keepalived配置文件(如下)</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.151</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.99.151 6201 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.99.104 6101 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入n1节点</span><br><span class="line">docker exec -it n2 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装VIM</span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta">#</span>安装Keepalived</span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="meta">#</span>编辑Keepalived配置文件(如下)</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.151</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.99.151 6201 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.99.104 6102 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="打包部署后端项目-1"><a href="#打包部署后端项目-1" class="headerlink" title="打包部署后端项目"></a>打包部署后端项目</h2><ol><li><p>在前端项目路径下执行打包指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li><li><p>build目录的文件拷贝到宿主机的/home/fn1/renren-vue、/home/fn2/renren-vue、/home/fn3/renren-vue的目录下面</p></li><li><p>创建3节点的Nginx，部署前端项目</p><p>宿主机/home/fn1/nginx.conf的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 6501;</span><br><span class="line">server_name  192.168.99.104;</span><br><span class="line">location  /  &#123;</span><br><span class="line">root  /home/fn1/renren-vue;</span><br><span class="line">index  index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动第fn1节点</span><br><span class="line">docker run -it -d --name fn1 -v /home/fn1/nginx.conf:/etc/nginx/nginx.conf -v /home/fn1/renren-vue:/home/fn1/renren-vue --privileged --net=host nginx</span><br></pre></td></tr></table></figure><p>宿主机/home/fn2/nginx.conf的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 6502;</span><br><span class="line">server_name  192.168.99.104;</span><br><span class="line">location  /  &#123;</span><br><span class="line">root  /home/fn2/renren-vue;</span><br><span class="line">index  index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动第fn2节点</span><br><span class="line">docker run -it -d --name fn2 -v /home/fn2/nginx.conf:/etc/nginx/nginx.conf -v /home/fn2/renren-vue:/home/fn2/renren-vue --privileged --net=host nginx</span><br></pre></td></tr></table></figure><p>宿主机/home/fn3/nginx.conf的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 6503;</span><br><span class="line">server_name  192.168.99.104;</span><br><span class="line">location  /  &#123;</span><br><span class="line">root  /home/fn3/renren-vue;</span><br><span class="line">index  index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动fn3节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动第fn3节点</span><br><span class="line">docker run -it -d --name fn3 -v /home/fn3/nginx.conf:/etc/nginx/nginx.conf -v /home/fn3/renren-vue:/home/fn3/renren-vue --privileged --net=host nginx</span><br></pre></td></tr></table></figure></li><li><p>配置负载均衡</p><p>宿主机/home/ff1/nginx.conf配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">upstream fn &#123;</span><br><span class="line">server 192.168.99.104:6501;</span><br><span class="line">server 192.168.99.104:6502;</span><br><span class="line">server 192.168.99.104:6503;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       6601;</span><br><span class="line">        server_name  192.168.99.104; </span><br><span class="line">        location / &#123;  </span><br><span class="line">            proxy_pass   http://fn;</span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动ff1节点</span><br><span class="line">docker run -it -d --name ff1 -v /home/ff1/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</span><br></pre></td></tr></table></figure><p>宿主机/home/ff2/nginx.conf配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">upstream fn &#123;</span><br><span class="line">server 192.168.99.104:6501;</span><br><span class="line">server 192.168.99.104:6502;</span><br><span class="line">server 192.168.99.104:6503;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       6602;</span><br><span class="line">        server_name  192.168.99.104; </span><br><span class="line">        location / &#123;  </span><br><span class="line">            proxy_pass   http://fn;</span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动ff2节点</span><br><span class="line">docker run -it -d --name ff2 -v /home/ff2/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</span><br></pre></td></tr></table></figure></li><li><p>配置双机热备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入ff1节点</span><br><span class="line">docker exec -it ff1 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装VIM</span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta">#</span>安装Keepalived</span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="meta">#</span>编辑Keepalived配置文件(如下)</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.152</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.99.151 6701 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.99.104 6601 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入ff1节点</span><br><span class="line">docker exec -it ff2 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装VIM</span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta">#</span>安装Keepalived</span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="meta">#</span>编辑Keepalived配置文件(如下)</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.152</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.99.151 6701 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.99.104 6602 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>新建社区版gitlab</title>
      <link href="/2018/06/13/new-gitlab/"/>
      <url>/2018/06/13/new-gitlab/</url>
      <content type="html"><![CDATA[<p>搭建社区版gitlab </p><p>gitlab 安装下载地址:<a href="https://hub.docker.com/r/gitlab/gitlab-ce/" target="_blank" rel="noopener">https://hub.docker.com/r/gitlab/gitlab-ce/</a></p><h1 id="前提：安装docker，"><a href="#前提：安装docker，" class="headerlink" title="前提：安装docker，"></a>前提：安装docker，</h1><p>参考  <a href="https://blog.csdn.net/chengyuqiang/article/details/78886986" target="_blank" rel="noopener">https://blog.csdn.net/chengyuqiang/article/details/78886986</a></p><h2 id="修改yum镜像源"><a href="#修改yum镜像源" class="headerlink" title="修改yum镜像源"></a>修改yum镜像源</h2><p>下载安装速度可能会慢:修改CentOS默认yum源为国内yum镜像源 参考 <a href="https://blog.csdn.net/inslow/article/details/54177191" target="_blank" rel="noopener">https://blog.csdn.net/inslow/article/details/54177191</a></p><p>修改CentOS默认yum源为mirrors.aliyun.com</p><p>1、首先备份系统自带yum源配置文件/etc/yum.repos.d/CentOS-Base.repo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span></span><br></pre></td></tr></table></figure></p><p>2、进入yum源配置文件所在的文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /etc/yum.repos.d/</span></span><br></pre></td></tr></table></figure></p><p>3、下载ailiyun的yum源配置文件到/etc/yum.repos.d/<br>CentOS7<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br></pre></td></tr></table></figure></p><p>4、新增docker镜像源<br>在/etc/yum.repos.d/CentOS-Base.repo 文件新增下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[dockerrepo]  </span><br><span class="line">name=Docker Repository  </span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/<span class="variable">$releasever</span>/  </span><br><span class="line">enabled=1  </span><br><span class="line">gpgcheck=1  </span><br><span class="line">gpgkey=https://yum.dockerproject.org/gpg</span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>1、搜索docker<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search docker</span><br></pre></td></tr></table></figure></p><p>2、安装docker<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker</span><br></pre></td></tr></table></figure></p><p>3、启动Docker<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></p><p>4、查看状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure></p><h1 id="安装gitlab"><a href="#安装gitlab" class="headerlink" title="安装gitlab"></a>安装gitlab</h1><p>访问地址:<a href="https://hub.docker.com/r/gitlab/gitlab-ce/" target="_blank" rel="noopener">https://hub.docker.com/r/gitlab/gitlab-ce/</a></p><p><img src="img/new-gitlab/gitlab_adr.jpg" alt="Alt text"></p><blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure></blockquote><blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2></blockquote><p>   点击<a href="https://docs.gitlab.com/omnibus/docker/" target="_blank" rel="noopener">Using GitLab Docker images</a> 跳转到 安装页面,执行下面命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">    --hostname gitlab.example.com \</span><br><span class="line">    --publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    --volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">    --volume /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">    --volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></p><p>   注意:hostname ,可修改为本地ip地址，端口号也可以修改，比如下</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">    --hostname 192.168.157.130 \</span><br><span class="line">    --publish 8929:80 --publish 2289:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    --volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">    --volume /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">    --volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><blockquote><h2 id="基本命令操作"><a href="#基本命令操作" class="headerlink" title="基本命令操作"></a>基本命令操作</h2></blockquote><blockquote><h3 id="停止gitlab"><a href="#停止gitlab" class="headerlink" title="停止gitlab"></a>停止gitlab</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stop gitlab</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="删除gitlab"><a href="#删除gitlab" class="headerlink" title="删除gitlab"></a>删除gitlab</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rm gitlab</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="更新最新的gitlab"><a href="#更新最新的gitlab" class="headerlink" title="更新最新的gitlab"></a>更新最新的gitlab</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="创建gitlab"><a href="#创建gitlab" class="headerlink" title="创建gitlab"></a>创建gitlab</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">--hostname gitlab.example.com \</span><br><span class="line">--publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">--volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">--volume /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">--volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></blockquote><blockquote><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://192.168.157.130/" target="_blank" rel="noopener">http://192.168.157.130/</a></p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>在widow上搭建hexo,并部署到Github</title>
      <link href="/2018/06/11/hexo-deploy/"/>
      <url>/2018/06/11/hexo-deploy/</url>
      <content type="html"><![CDATA[<p>在widow上搭建hexo,并部署到Github</p><blockquote><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官网</a>可参考官网中文网站文档和api</p></blockquote><blockquote><p>相关参考博客:<a href="https://www.cnblogs.com/cherishzy/p/5694658.html" target="_blank" rel="noopener">cherishzy</a></p></blockquote><h1 id="widow上搭建hexo"><a href="#widow上搭建hexo" class="headerlink" title="widow上搭建hexo"></a>widow上搭建hexo</h1><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p> 前往Git官网下载Windows版本压缩包，下载完成后解压安装。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p> 前往Node.js官方下载网站，下载Node.js官方安装包，下载完成后同样解压安装。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>到目前为止，安装Hexo所需要的环境已将安装完成，下一步只需要安装Hexo便可以了。<br>点击鼠标右键，看是否有Git bash Here选项。如果没有可以前往Git安装根目录，启动git-base.exe也可以。</p><p>在命令行中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>Hexo 便安装完成了</p><h3 id="创建Hexo文件夹"><a href="#创建Hexo文件夹" class="headerlink" title="创建Hexo文件夹"></a>创建Hexo文件夹</h3><p> 找到想要放置博客的文件夹，比如（F:\Hexo），在该目录下鼠标右击打开Gitbash工具，（右键菜单中没有该选项的可以用cmd命令cd等进入该文件夹）。执行下面的语句，会在F:\Hexo文件夹下创建node_modules文件夹：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p>这里init后面可以跟文件目录，比如我想在F:\Hexo下创建博客文件夹，那么可以用下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init F:\Hexo</span><br></pre></td></tr></table></figure></p><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>在Hexo目录下，执行以下命令，你会发现F:\Hexo\node_modules目录下多了好多文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><p>目前为止，已经搭建好自己的Hexo博客了，但是只能在本机上查看。执行以下两个命令（在F:\Hexo目录下），然后在浏览器中输入 localhost:4000 就可以看到自己的博客了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate    //打包加载生成html页面</span><br><span class="line"></span><br><span class="line">$ hexo server      //启动服务器</span><br></pre></td></tr></table></figure><h3 id="Hexo目录结构"><a href="#Hexo目录结构" class="headerlink" title="Hexo目录结构"></a>Hexo目录结构</h3><p><img src="img/hexo-deploy/mulu.jpg" alt="Alt text"></p><h4 id="注意-想访问到图片，需要根据路径把图片放在public目录下面"><a href="#注意-想访问到图片，需要根据路径把图片放在public目录下面" class="headerlink" title="注意:想访问到图片，需要根据路径把图片放在public目录下面"></a>注意:想访问到图片，需要根据路径把图片放在public目录下面</h4><h3 id="博客实例"><a href="#博客实例" class="headerlink" title="博客实例"></a>博客实例</h3><p><img src="img/hexo-deploy/blog.jpg" alt="Alt text"></p><h3 id="新增加文章"><a href="#新增加文章" class="headerlink" title="新增加文章"></a>新增加文章</h3><p>  如果想增加新文章怎么做的？有俩种方法</p><blockquote><p> 命令<br>  你可以执行下列命令来创建一篇新文章。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。<br><img src="img/hexo-deploy/newatick.jpg" alt="Alt text"></p><blockquote><p>直接在Hexo\source复制一份md文件</p></blockquote><h3 id="主题装换"><a href="#主题装换" class="headerlink" title="主题装换"></a>主题装换</h3><p> 博客的风格和布局可以随意变动,<br> 访问hexo官网<a href="https://hexo.io/themes/" target="_blank" rel="noopener">themes</a>可看到不同的主题，可随意选择自己喜欢的主题作为自己博客的主题,点击themes图片跳转到使用该主题的例子页面，点击图片下面的标题文字，跳转到github上，不同的themes安装方法不一样，一定要根据README.md文件，下载、安装主题，</p><p> 例子:</p><h4 id="安装ARIA主题"><a href="#安装ARIA主题" class="headerlink" title="安装ARIA主题"></a>安装ARIA主题</h4><p>   首先在themes页面找到ARIA主，点击图片下面ARIA文字，跳转到github页面，阅读README.md文件，根据Usage部分执行命令</p><p>   打开widow下git cmd ，cd 进入E:\Hexo</p><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-renderer-njucks hexo-renderer-stylus hexo-generator-search hexo-generator-feed</span><br></pre></td></tr></table></figure><h5 id="克隆ARIA-themes到themes-aria目录"><a href="#克隆ARIA-themes到themes-aria目录" class="headerlink" title="克隆ARIA themes到themes/aria目录"></a>克隆ARIA themes到themes/aria目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/AlynxZhou/hexo-theme-aria themes/aria</span><br></pre></td></tr></table></figure><p>可以查看到Hexo/themes多了aria 文件夹<br><img src="img/hexo-deploy/drict.jpg" alt="Alt text"></p><h5 id="修改Hexo文件夹下-config-yml"><a href="#修改Hexo文件夹下-config-yml" class="headerlink" title="修改Hexo文件夹下_config.yml"></a>修改Hexo文件夹下_config.yml</h5><p>修改theme: aria，并增加需要的配置<br>     <img src="img/hexo-deploy/aria-themes.jpg" alt="Alt text"></p><h5 id="Hexo-themes-aria文件夹下复制-config-yml-example-为-config-yml"><a href="#Hexo-themes-aria文件夹下复制-config-yml-example-为-config-yml" class="headerlink" title="Hexo/themes/aria文件夹下复制_config.yml.example 为_config.yml"></a>Hexo/themes/aria文件夹下复制_config.yml.example 为_config.yml</h5><h5 id="重新启动"><a href="#重新启动" class="headerlink" title="重新启动"></a>重新启动</h5><p>  重新加载生成页面并启动hexo，然后在浏览器中输入 localhost:4000 就可以看aria主题博客</p><pre><code class="bash">$ hexo generate $ hexo server</code></pre><p> <img src="img/hexo-deploy/githexo.jpg" alt="Alt text"></p><h1 id="部署到Github-上"><a href="#部署到Github-上" class="headerlink" title="部署到Github 上"></a>部署到Github 上</h1><h2 id="注册Github账户"><a href="#注册Github账户" class="headerlink" title="注册Github账户"></a>注册Github账户</h2><p>前往Github网站，注册一个新用户。用邮箱注册的一定前往邮箱去验证邮件。要不然之后可能会有小问题。</p><h2 id="创建一个新的repository"><a href="#创建一个新的repository" class="headerlink" title="创建一个新的repository"></a>创建一个新的repository</h2><p>在自己的Github主页右下角,创建一个新的repository。比如我的Github用户名为Gitzhaoyang，那么我创建的repository的名字应该是 gitzhaoyang.github.io 。</p><h2 id="添加reponsitories"><a href="#添加reponsitories" class="headerlink" title="添加reponsitories"></a>添加reponsitories</h2><p>这里严重注意:</p><p>一定要以你的Github用户名.github.io创建。假如我没有用lmhzuo.github.io而是用了tuy.github.io，那么当我浏览器访问博客的时候会出现404错误。这里并不是没有部署成功，而是把它部署在了这里:<a href="http://tuy.github.io/tuy.github.io。所以，如果想直接lmhzuo.github.io访问，那么就需要和用户名保持一致" target="_blank" rel="noopener">http://tuy.github.io/tuy.github.io。所以，如果想直接lmhzuo.github.io访问，那么就需要和用户名保持一致</a></p><h2 id="将本地的文件部署（上传）到Github账户中"><a href="#将本地的文件部署（上传）到Github账户中" class="headerlink" title="将本地的文件部署（上传）到Github账户中"></a>将本地的文件部署（上传）到Github账户中</h2><p>编辑本地Hexo目录下文件_comfig.yml，在最后添加如下代码(我使用第二种)</p><ol><li>后续需要输入账号密码<pre><code class="bash">deploy: <span class="built_in">type</span>: git repository: http://github.com/LmHZuo/lmhzuo.github.io.git branch: master</code></pre></li><li><p>直接输入账号密码</p><pre><code class="bash">deploy: <span class="built_in">type</span>: git repository:  https://github账户名:密码@github.com/LmHZuo/lmhzuo.github.io.git branch: master</code></pre></li></ol><p>.yml文件对格式规范要求很严格，type: repository: branch: 前面有两个空格，冒号后面都有一个空格。</p><p>执行以下指令即可完成部署（如果提示错误，可以看下面注意）：</p><pre><code class="bash">$ hexo generate$ hexo deploy  //上传代码到github</code></pre><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><em>注意：</em></h2><ul><li><p>有些用户没有设置Github的SSH，会导致上面两句失败。SSH的介绍和设置方法可以查看官方教程,配置起来很简单。如果英文看不明白或者过程中出现小问题，可以查看我写的SSH设置教程，是对官方教程的解释和扩展，针对配置过程中的小问题都有解决办法。</p></li><li><p>每次修改本地文件，都需要命令$ hexo generate才能保存。而且每次使用命令都必须在Hexo根目录下使用。</p></li><li><p>如果你在执行$ hexo deloy,如果提示 ERROR Deployer not found: git，那说明你没有安装hexo-deployer-git依赖包，进入F:\Hexo\node_modules发现真的没有hexo-deployer-git，不用担心，只需要输入下面命令创建hexo-deployer-git依赖包，然后再执行hexo deploy就能上传成功了</p><pre><code class="bash">$ npm install hexo-deployer-git --save</code></pre></li><li>如果你是windows用户，那么当你执行$ hexo deploy命令的时候，可能会先后出现提示框让你输入你的Github用户名和Github密码，只要输入正确，上传就没有问题。</li></ul><p>好了，现在我们的博客已经在Github上面部署成功了，可以在浏览器访问lmhzuo.github.io试试了。</p><p>提示：</p><p>现在Hexo支持更加简单的命令格式了，比如：</p><pre><code class="bash">hexo s == hexo serverhexo g == hexo generatehexo d == hexo deployhexo n == hexo new</code></pre>]]></content>
      
      
    </entry>
    
    <entry>
      <title>myHexo</title>
      <link href="/2018/06/11/myHexo/"/>
      <url>/2018/06/11/myHexo/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/11/hello-world/"/>
      <url>/2018/06/11/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>hello_pro</title>
      <link href="/hello-pro/index.html"/>
      <url>/hello-pro/index.html</url>
      <content type="html"><![CDATA[<p>你好</p>]]></content>
    </entry>
    
  
</search>
