<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JVM、nginx、tomcat调试</title>
      <link href="/2018/09/17/jvm/jvm_debug/"/>
      <url>/2018/09/17/jvm/jvm_debug/</url>
      <content type="html"><![CDATA[<h1 id="JAVA并发编程与高并发解决方案-高并发解决方案"><a href="#JAVA并发编程与高并发解决方案-高并发解决方案" class="headerlink" title="JAVA并发编程与高并发解决方案 - 高并发解决方案"></a>JAVA并发编程与高并发解决方案 - 高并发解决方案</h1><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">作者</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">2018.09.17</td><td style="text-align:center">huangzuo</td><td style="text-align:center">首次发布</td></tr></tbody></table><h2 id="学习内容简介"><a href="#学习内容简介" class="headerlink" title="学习内容简介"></a>学习内容简介</h2><pre><code>1.JVM调试2.tomcat调优3.nginx调优</code></pre><hr><h3 id="JVM调试"><a href="#JVM调试" class="headerlink" title="JVM调试"></a>JVM调试</h3><h4 id="基于JDK命令命令行工具的监控"><a href="#基于JDK命令命令行工具的监控" class="headerlink" title="基于JDK命令命令行工具的监控"></a>基于JDK命令命令行工具的监控</h4><p>  jvm jdk相关命令查询</p><p>  <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/index.html" target="_blank" rel="noopener">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/index.html</a></p><h5 id="JVM的参数类型"><a href="#JVM的参数类型" class="headerlink" title="JVM的参数类型"></a>JVM的参数类型</h5><ul><li>标准参数</li></ul><pre><code>-help-server-client-version-showversion-cp -classpath</code></pre><ul><li><p>X参数 </p><pre><code>非标准化参数-Xint:解释执行-Xcomp：即时编译，第一次使用就编译成本地代码-Xmixed:混合模式,JVM自己来决定是否编译成本地代码</code></pre><p> JVM默认是mixed 模型<br><img src="img/jvm_1.jpg" alt=""></p></li><li><p>XX参数 </p><p> 1、Boolean类型</p><p>   <img src="img/jvm_2.jpg" alt=""></p></li></ul><pre><code>2、非Boolean类型，key value类型  ![](img/jvm_3.jpg)3、例子  + -Xmx -Xms ![](img/jvm_4.jpg) 查看当时运行时的值 jinfo命令 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flag MaxheapSize 1555(进程的id，比如tomcat)</span><br></pre></td></tr></table></figure>  + -xss 线程栈信息 <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flag TreadStackSize 1555(进程的id，比如tomcat)</span><br></pre></td></tr></table></figure></code></pre><h5 id="运行时JVM参数查看"><a href="#运行时JVM参数查看" class="headerlink" title="运行时JVM参数查看"></a>运行时JVM参数查看</h5><p> 只有知道当前的值，才能调优</p><ul><li><p>-XX:+PrintFlagsInitial 查看JVM初始值</p></li><li><p>-XX:+PrintFlagsFinal 查看JVM当前值<br><img src="img/jvm_5.jpg" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -XX:+PrintFlagsFinal -version &gt;flag.txt</span><br></pre></td></tr></table></figure></li><li><p>-XX:+UnlockExperimentalVMOptions 解锁实验参数，加上这个参数才可以赋值</p></li><li><p>-XX:+UnlockDiagnosticVMOptions 解锁诊断参数</p></li><li><p>-XX:+PrintCommandLineFlags 打印命令行参数</p><h6 id="jps-查看java进程"><a href="#jps-查看java进程" class="headerlink" title="jps 查看java进程"></a>jps 查看java进程</h6><p>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jps</span><br><span class="line">jps -l</span><br></pre></td></tr></table></figure><h6 id="jinfo-查看JVM当前运行值"><a href="#jinfo-查看JVM当前运行值" class="headerlink" title="jinfo 查看JVM当前运行值"></a>jinfo 查看JVM当前运行值</h6><p>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jinfo -flags 1555(进程id，比如tomcat)</span><br><span class="line">jinfo -flag MaxHeapSize 1555 查看最大堆内存</span><br></pre></td></tr></table></figure><p><img src="img/jvm_6.jpg" alt=""></p><h5 id="jstat查看虚拟机统计信息"><a href="#jstat查看虚拟机统计信息" class="headerlink" title="jstat查看虚拟机统计信息"></a>jstat查看虚拟机统计信息</h5><p>命令格式<br><img src="img/jvm_7.jpg" alt=""></p><ul><li><p>类加载信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -class 1555 1000 10  每隔1000毫秒输出一次，共输出10次，类加载的信息</span><br></pre></td></tr></table></figure></li><li><p>垃圾收集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jstat -gc 1555 1000 10  每隔1000毫秒输出一次，共输出10次，类加载的信息</span><br></pre></td></tr></table></figure></li></ul><p><img src="img/jvm_8.jpg" alt=""><br>gc 参数含义<br><img src="img/jvm_9.jpg" alt=""></p><p>jvm内存结构<br><img src="img/jvm_10.jpg" alt=""></p><ul><li>JIT编译-即时编译<br>命令<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jstat -compiler 1555</span><br><span class="line">jstat -printcompilation 1555</span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="jmap-MAT内存溢出"><a href="#jmap-MAT内存溢出" class="headerlink" title="jmap+MAT内存溢出"></a>jmap+MAT内存溢出</h5><ul><li><p>堆内存溢出<br>导出内存映射文件命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -dump:format=b,file=heap.hprof 1555</span><br></pre></td></tr></table></figure></li><li><p>查看JVM内存初始信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jmap -heap 1555</span><br></pre></td></tr></table></figure></li><li><p>MAT查看内存信息</p><p>1、下载安装</p><p>  下载地址:<a href="http://www.eclipse.org/mat/" target="_blank" rel="noopener">http://www.eclipse.org/mat/</a></p><p>2、使用文档，参考地址:<a href="https://segmentfault.com/a/1190000007227314" target="_blank" rel="noopener">https://segmentfault.com/a/1190000007227314</a></p><p>3、相关概念理解，参考地址<br><a href="https://blog.csdn.net/yincheng886337/article/details/50524890" target="_blank" rel="noopener">https://blog.csdn.net/yincheng886337/article/details/50524890</a></p><p>3、使用方法</p><ul><li>用mat工具打开上面导出内存映射文件<br><img src="img/jvm_11.png" alt=""><br>可以查看到内存占用情况</li><li><p>查看对象的数量，工具栏第二个符号<br><img src="img/jvm_12.png" alt=""><br>Objects对象数量， shallow Heap不包含对象里面的对象内存，retained heap 所有相关联对象占用内存</p><p> 查看强引用<br><img src="img/jvm_13.jpg" alt=""></p><p><img src="img/jvm_14.png" alt=""></p></li><li><p>查看对象占的内存，工具栏第三个符号<br><img src="img/jvm_15.png" alt=""></p></li></ul></li></ul><ul><li>Metaspace 非堆内存溢出</li></ul><h5 id="jstack-死循环与死锁"><a href="#jstack-死循环与死锁" class="headerlink" title="jstack 死循环与死锁"></a>jstack 死循环与死锁</h5><p>  jstack打印所有的线程情况，比如CPU的利用率飙高，很可能是java线程过多，发生死循环造成</p><ul><li><p>命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jstack 1555 &gt;stack.txt（查看线程情况）</span><br><span class="line"></span><br><span class="line">top (查看cpu利用情况)</span><br><span class="line"></span><br><span class="line">top -p pid -H   (查看cpu的进程id是pid进程信息</span><br></pre></td></tr></table></figure><ul><li>死循环造成CPU利用率飙高，如何查找问题</li></ul><p>相关命令<br><img src="img/jvm_17.jpg" alt=""><br>查看stack.txt文件<br><img src="img/jvm_16.jpg" alt=""><br>使用top和top -p pid -H 查找CPC使用高的线程<br><img src="img/jvm_18.jpg" alt=""><br>匹配pid(十进制) 和stack.txt文件中的nid值（16进制)<br>比如1760转换成十六进制为6e0<br> <img src="img/jvm_19.jpg" alt=""></p><ul><li>死锁</li></ul><p>使用jstack pid&gt;stack.txt 查看该文件，文件尾部可查看死锁情况 ，1 deadlock<br><img src="img/jvm_20.jpg" alt=""></p><h4 id="基于JVisualVM的可视化监控"><a href="#基于JVisualVM的可视化监控" class="headerlink" title="基于JVisualVM的可视化监控"></a>基于JVisualVM的可视化监控</h4><h5 id="监控本地tomcat"><a href="#监控本地tomcat" class="headerlink" title="监控本地tomcat"></a>监控本地tomcat</h5></li></ul><h5 id="监控远程tomcat"><a href="#监控远程tomcat" class="headerlink" title="监控远程tomcat"></a>监控远程tomcat</h5><h5 id="监控普通的JAVA进程"><a href="#监控普通的JAVA进程" class="headerlink" title="监控普通的JAVA进程"></a>监控普通的JAVA进程</h5><hr><h3 id="tomcat性能监控与调优"><a href="#tomcat性能监控与调优" class="headerlink" title="tomcat性能监控与调优"></a>tomcat性能监控与调优</h3><hr><h3 id="nginx性能监控与调优"><a href="#nginx性能监控与调优" class="headerlink" title="nginx性能监控与调优"></a>nginx性能监控与调优</h3><hr><h3 id="JVM层GC调优"><a href="#JVM层GC调优" class="headerlink" title="JVM层GC调优"></a>JVM层GC调优</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/09/17/hello-world/"/>
      <url>/2018/09/17/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/09/17/docker/"/>
      <url>/2018/09/17/docker/</url>
      <content type="html"><![CDATA[<h1 id="《Docker环境下的前后端分离部署与运维》课程脚本"><a href="#《Docker环境下的前后端分离部署与运维》课程脚本" class="headerlink" title="《Docker环境下的前后端分离部署与运维》课程脚本"></a>《Docker环境下的前后端分离部署与运维》课程脚本</h1><h2 id="Docker虚拟机常用命令"><a href="#Docker虚拟机常用命令" class="headerlink" title="Docker虚拟机常用命令"></a>Docker虚拟机常用命令</h2><ol><li><p>先更新软件包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y update</span><br></pre></td></tr></table></figure></li><li><p>安装Docker虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker</span><br></pre></td></tr></table></figure></li><li><p>运行、重启、关闭Docker虚拟机</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service docker start</span><br><span class="line">service docker start</span><br><span class="line">service docker stop</span><br></pre></td></tr></table></figure></li><li><p>搜索镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 镜像名称</span><br></pre></td></tr></table></figure></li><li><p>下载镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull 镜像名称</span><br></pre></td></tr></table></figure></li><li><p>查看镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></li><li><p>删除镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi 镜像名称</span><br></pre></td></tr></table></figure></li><li><p>运行容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run 启动参数  镜像名称</span><br></pre></td></tr></table></figure></li><li><p>查看容器列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li><li><p>停止、挂起、恢复容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker stop 容器ID</span><br><span class="line">docker pause 容器ID</span><br><span class="line">docker unpase 容器ID</span><br></pre></td></tr></table></figure></li><li><p>查看容器信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 容器ID</span><br></pre></td></tr></table></figure></li><li><p>删除容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器ID</span><br></pre></td></tr></table></figure></li><li><p>数据卷管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker volume create 数据卷名称  #创建数据卷</span><br><span class="line">docker volume rm 数据卷名称  #删除数据卷</span><br><span class="line">docker volume inspect 数据卷名称  #查看数据卷</span><br></pre></td></tr></table></figure></li><li><p>网络管理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker network ls 查看网络信息</span><br><span class="line">docker network create --subnet=网段 网络名称</span><br><span class="line">docker network rm 网络名称</span><br></pre></td></tr></table></figure></li><li><p>避免VM虚拟机挂起恢复之后，Docker虚拟机断网</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>文件中添加<code>net.ipv4.ip_forward=1</code>这个配置</p><p>​<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>重启网络服务</span><br><span class="line">systemctl  restart network</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p></li></ol><h2 id="安装PXC集群，负载均衡，双机热备"><a href="#安装PXC集群，负载均衡，双机热备" class="headerlink" title="安装PXC集群，负载均衡，双机热备"></a>安装PXC集群，负载均衡，双机热备</h2><ol><li><p>安装PXC镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull percona/percona-xtradb-cluster</span><br></pre></td></tr></table></figure></li><li><p>为PXC镜像改名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag percona/percona-xtradb-cluster pxc</span><br></pre></td></tr></table></figure></li><li><p>创建net1网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --subnet=172.18.0.0/16 net1</span><br></pre></td></tr></table></figure></li><li><p>创建5个数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --name v1</span><br><span class="line">docker volume create --name v2</span><br><span class="line">docker volume create --name v3</span><br><span class="line">docker volume create --name v4</span><br><span class="line">docker volume create --name v5</span><br></pre></td></tr></table></figure></li><li><p>创建备份数据卷（用于热备份数据）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create --name backup</span><br></pre></td></tr></table></figure></li><li><p>创建5节点的PXC集群</p><p>注意，每个MySQL容器创建之后，因为要执行PXC的初始化和加入集群等工作，耐心等待1分钟左右再用客户端连接MySQL。另外，必须第1个MySQL节点启动成功，用MySQL客户端能连接上之后，再去创建其他MySQL节点。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>创建第1个MySQL节点</span><br><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -v v1:/var/lib/mysql -v backup:/data --privileged --name=node1 --net=net1 --ip 172.18.0.2 pxc</span><br><span class="line"><span class="meta">#</span>创建第2个MySQL节点</span><br><span class="line">docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v2:/var/lib/mysql -v backup:/data --privileged --name=node2 --net=net1 --ip 172.18.0.3 pxc</span><br><span class="line"><span class="meta">#</span>创建第3个MySQL节点</span><br><span class="line">docker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v3:/var/lib/mysql --privileged --name=node3 --net=net1 --ip 172.18.0.4 pxc</span><br><span class="line"><span class="meta">#</span>创建第4个MySQL节点</span><br><span class="line">docker run -d -p 3309:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v4:/var/lib/mysql --privileged --name=node4 --net=net1 --ip 172.18.0.5 pxc</span><br><span class="line"><span class="meta">#</span>创建第5个MySQL节点</span><br><span class="line">docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=abc123456 -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=abc123456 -e CLUSTER_JOIN=node1 -v v5:/var/lib/mysql -v backup:/data --privileged --name=node5 --net=net1 --ip 172.18.0.6 pxc</span><br></pre></td></tr></table></figure></li><li><p>安装Haproxy镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull haproxy</span><br></pre></td></tr></table></figure></li><li><p>宿主机上编写Haproxy配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /home/soft/haproxy.cfg</span><br></pre></td></tr></table></figure><p>配置文件如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">#工作目录</span><br><span class="line">chroot /usr/local/etc/haproxy</span><br><span class="line">#日志文件，使用rsyslog服务中local5日志设备（/var/log/local5），等级info</span><br><span class="line">log 127.0.0.1 local5 info</span><br><span class="line">#守护进程运行</span><br><span class="line">daemon</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">logglobal</span><br><span class="line">modehttp</span><br><span class="line">#日志格式</span><br><span class="line">optionhttplog</span><br><span class="line">#日志中不记录负载均衡的心跳检测记录</span><br><span class="line">optiondontlognull</span><br><span class="line">    #连接超时（毫秒）</span><br><span class="line">timeout connect 5000</span><br><span class="line">    #客户端超时（毫秒）</span><br><span class="line">timeout client  50000</span><br><span class="line">#服务器超时（毫秒）</span><br><span class="line">    timeout server  50000</span><br><span class="line"></span><br><span class="line">#监控界面</span><br><span class="line">listen  admin_stats</span><br><span class="line">#监控界面的访问的IP和端口</span><br><span class="line">bind  0.0.0.0:8888</span><br><span class="line">#访问协议</span><br><span class="line">    mode        http</span><br><span class="line">#URI相对地址</span><br><span class="line">    stats uri   /dbs</span><br><span class="line">#统计报告格式</span><br><span class="line">    stats realm     Global\ statistics</span><br><span class="line">#登陆帐户信息</span><br><span class="line">    stats auth  admin:abc123456</span><br><span class="line">#数据库负载均衡</span><br><span class="line">listen  proxy-mysql</span><br><span class="line">#访问的IP和端口</span><br><span class="line">bind  0.0.0.0:3306  </span><br><span class="line">    #网络协议</span><br><span class="line">mode  tcp</span><br><span class="line">#负载均衡算法（轮询算法）</span><br><span class="line">#轮询算法：roundrobin</span><br><span class="line">#权重算法：static-rr</span><br><span class="line">#最少连接算法：leastconn</span><br><span class="line">#请求源IP算法：source </span><br><span class="line">    balance  roundrobin</span><br><span class="line">#日志格式</span><br><span class="line">    option  tcplog</span><br><span class="line">#在MySQL中创建一个没有权限的haproxy用户，密码为空。Haproxy使用这个账户对MySQL数据库心跳检测</span><br><span class="line">    option  mysql-check user haproxy</span><br><span class="line">    server  MySQL_1 172.18.0.2:3306 check weight 1 maxconn 2000  </span><br><span class="line">    server  MySQL_2 172.18.0.3:3306 check weight 1 maxconn 2000  </span><br><span class="line">server  MySQL_3 172.18.0.4:3306 check weight 1 maxconn 2000 </span><br><span class="line">server  MySQL_4 172.18.0.5:3306 check weight 1 maxconn 2000</span><br><span class="line">server  MySQL_5 172.18.0.6:3306 check weight 1 maxconn 2000</span><br><span class="line">#使用keepalive检测死链</span><br><span class="line">    option  tcpka</span><br></pre></td></tr></table></figure></li><li><p>创建两个Haproxy容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>创建第1个Haproxy负载均衡服务器</span><br><span class="line">docker run -it -d -p 4001:8888 -p 4002:3306 -v /home/soft/haproxy:/usr/local/etc/haproxy --name h1 --privileged --net=net1 --ip 172.18.0.7 haproxy</span><br><span class="line"><span class="meta">#</span>进入h1容器，启动Haproxy</span><br><span class="line">docker exec -it h1 bash</span><br><span class="line">haproxy -f /usr/local/etc/haproxy/haproxy.cfg</span><br><span class="line"><span class="meta">#</span>创建第2个Haproxy负载均衡服务器</span><br><span class="line">docker run -it -d -p 4003:8888 -p 4004:3306 -v /home/soft/haproxy:/usr/local/etc/haproxy --name h2 --privileged --net=net1 --ip 172.18.0.8 haproxy</span><br><span class="line"><span class="meta">#</span>进入h2容器，启动Haproxy</span><br><span class="line">docker exec -it h2 bash</span><br><span class="line">haproxy -f /usr/local/etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure></li><li><p>Haproxy容器内安装Keepalived，设置虚拟IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入h1容器</span><br><span class="line">docker exec -it h1 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装VIM</span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta">#</span>安装Keepalived</span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="meta">#</span>编辑Keepalived配置文件（参考下方配置文件）</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br><span class="line"><span class="meta">#</span>宿主机执行ping命令</span><br><span class="line">ping 172.18.0.201</span><br></pre></td></tr></table></figure><p>配置文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance  VI_1 &#123;</span><br><span class="line">    state  MASTER</span><br><span class="line">    interface  eth0</span><br><span class="line">    virtual_router_id  51</span><br><span class="line">    priority  100</span><br><span class="line">    advert_int  1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type  PASS</span><br><span class="line">        auth_pass  123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.18.0.201</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入h2容器</span><br><span class="line">docker exec -it h2 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装VIM</span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta">#</span>安装Keepalived</span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="meta">#</span>编辑Keepalived配置文件</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br><span class="line"><span class="meta">#</span>宿主机执行ping命令</span><br><span class="line">ping 172.18.0.201</span><br></pre></td></tr></table></figure><p>配置文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance  VI_1 &#123;</span><br><span class="line">    state  MASTER</span><br><span class="line">    interface  eth0</span><br><span class="line">    virtual_router_id  51</span><br><span class="line">    priority  100</span><br><span class="line">    advert_int  1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type  PASS</span><br><span class="line">        auth_pass  123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.18.0.201</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>宿主机安装Keepalived，实现双击热备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>宿主机执行安装Keepalived</span><br><span class="line">yum -y install keepalived</span><br><span class="line"><span class="meta">#</span>修改Keepalived配置文件</span><br><span class="line">vi /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br></pre></td></tr></table></figure><p>Keepalived配置文件如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">       192.168.99.150</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.99.150 8888 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr </span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 172.18.0.201 8888 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.99.150 3306 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr </span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 172.18.0.201 3306 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>热备份数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入node1容器</span><br><span class="line">docker exec -it node1 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装热备工具</span><br><span class="line">apt-get install percona-xtrabackup-24</span><br><span class="line"><span class="meta">#</span>全量热备</span><br><span class="line">innobackupex --user=root --password=abc123456 /data/backup/full</span><br></pre></td></tr></table></figure></li><li><p>冷还原数据<br>停止其余4个节点，并删除节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker stop node2</span><br><span class="line">docker stop node3</span><br><span class="line">docker stop node4</span><br><span class="line">docker stop node5</span><br><span class="line">docker rm node2</span><br><span class="line">docker rm node3</span><br><span class="line">docker rm node4</span><br><span class="line">docker rm node5</span><br></pre></td></tr></table></figure><p>node1容器中删除MySQL的数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>删除数据</span><br><span class="line">rm -rf /var/lib/mysql/*</span><br><span class="line"><span class="meta">#</span>清空事务</span><br><span class="line">innobackupex --user=root --password=abc123456 --apply-back /data/backup/full/2018-04-15_05-09-07/</span><br><span class="line"><span class="meta">#</span>还原数据</span><br><span class="line">innobackupex --user=root --password=abc123456 --copy-back  /data/backup/full/2018-04-15_05-09-07/</span><br></pre></td></tr></table></figure><p>重新创建其余4个节点，组件PXC集群</p></li></ol><h2 id="安装Redis，配置RedisCluster集群"><a href="#安装Redis，配置RedisCluster集群" class="headerlink" title="安装Redis，配置RedisCluster集群"></a>安装Redis，配置RedisCluster集群</h2><ol><li><p>安装Redis镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull yyyyttttwwww/redis</span><br></pre></td></tr></table></figure></li><li><p>创建net2网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --subnet=172.19.0.0/16 net2</span><br></pre></td></tr></table></figure></li><li><p>创建6节点Redis容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name r1 -p 5001:6379 --net=net2 --ip 172.19.0.2 redis bash</span><br><span class="line">docker run -it -d --name r2 -p 5002:6379 --net=net2 --ip 172.19.0.3 redis bash</span><br><span class="line">docker run -it -d --name r3 -p 5003:6379 --net=net2 --ip 172.19.0.4 redis bash</span><br><span class="line">docker run -it -d --name r4 -p 5004:6379 --net=net2 --ip 172.19.0.5 redis bash</span><br><span class="line">docker run -it -d --name r5 -p 5005:6379 --net=net2 --ip 172.19.0.6 redis bash</span><br></pre></td></tr></table></figure></li><li><p>启动6节点Redis服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入r1节点</span><br><span class="line">docker exec -it r1 bash</span><br><span class="line">cp /home/redis/redis.conf /usr/redis/redis.conf</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="meta">#</span>进入r2节点</span><br><span class="line">docker exec -it r2 bash</span><br><span class="line">cp /home/redis/redis.conf /usr/redis/redis.conf</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="meta">#</span>进入r3节点</span><br><span class="line">docker exec -it r3 bash</span><br><span class="line">cp /home/redis/redis.conf /usr/redis/redis.conf</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="meta">#</span>进入r4节点</span><br><span class="line">docker exec -it r4 bash</span><br><span class="line">cp /home/redis/redis.conf /usr/redis/redis.conf</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="meta">#</span>进入r5节点</span><br><span class="line">docker exec -it r5 bash</span><br><span class="line">cp /home/redis/redis.conf /usr/redis/redis.conf</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="meta">#</span>进入r6节点</span><br><span class="line">docker exec -it r6 bash</span><br><span class="line">cp /home/redis/redis.conf /usr/redis/redis.conf</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br></pre></td></tr></table></figure></li><li><p>创建Cluster集群</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>在r1节点上执行下面的指令</span><br><span class="line">cd /usr/redis/src</span><br><span class="line">mkdir -p ../cluster</span><br><span class="line">cp redis-trib.rb ../cluster/</span><br><span class="line">cd ../cluster</span><br><span class="line"><span class="meta">#</span>创建Cluster集群</span><br><span class="line">./redis-trib.rb create --replicas 1 172.19.0.2:6379 172.19.0.3:6379 172.19.0.4:6379 172.19.0.5:6379 172.19.0.6:6379 172.19.0.7:6379</span><br></pre></td></tr></table></figure></li></ol><h2 id="打包部署后端项目"><a href="#打包部署后端项目" class="headerlink" title="打包部署后端项目"></a>打包部署后端项目</h2><ol><li><p>进入人人开源后端项目，执行打包（修改配置文件，更改端口，打包三次生成三个JAR文件）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure></li><li><p>安装Java镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull java</span><br></pre></td></tr></table></figure></li><li><p>创建3节点Java容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>创建数据卷，上传JAR文件</span><br><span class="line">docker volume create j1</span><br><span class="line"><span class="meta">#</span>启动容器</span><br><span class="line">docker run -it -d --name j1 -v j1:/home/soft --net=host java</span><br><span class="line"><span class="meta">#</span>进入j1容器</span><br><span class="line">docker exec -it j1 bash</span><br><span class="line"><span class="meta">#</span>启动Java项目</span><br><span class="line">nohup java -jar /home/soft/renren-fast.jar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>创建数据卷，上传JAR文件</span><br><span class="line">docker volume create j2</span><br><span class="line"><span class="meta">#</span>启动容器</span><br><span class="line">docker run -it -d --name j2 -v j2:/home/soft --net=host java</span><br><span class="line"><span class="meta">#</span>进入j1容器</span><br><span class="line">docker exec -it j2 bash</span><br><span class="line"><span class="meta">#</span>启动Java项目</span><br><span class="line">nohup java -jar /home/soft/renren-fast.jar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>创建数据卷，上传JAR文件</span><br><span class="line">docker volume create j3</span><br><span class="line"><span class="meta">#</span>启动容器</span><br><span class="line">docker run -it -d --name j3 -v j3:/home/soft --net=host java</span><br><span class="line"><span class="meta">#</span>进入j1容器</span><br><span class="line">docker exec -it j3 bash</span><br><span class="line"><span class="meta">#</span>启动Java项目</span><br><span class="line">nohup java -jar /home/soft/renren-fast.jar</span><br></pre></td></tr></table></figure></li><li><p>安装Nginx镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure></li><li><p>创建Nginx容器，配置负载均衡</p><p>宿主机上/home/n1/nginx.conf配置文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">upstream tomcat &#123;</span><br><span class="line">server 192.168.99.104:6001;</span><br><span class="line">server 192.168.99.104:6002;</span><br><span class="line">server 192.168.99.104:6003;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       6101;</span><br><span class="line">        server_name  192.168.99.104; </span><br><span class="line">        location / &#123;  </span><br><span class="line">            proxy_pass   http://tomcat;</span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建第1个Nginx节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name n1 -v /home/n1/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</span><br></pre></td></tr></table></figure><p>宿主机上/home/n2/nginx.conf配置文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">upstream tomcat &#123;</span><br><span class="line">server 192.168.99.104:6001;</span><br><span class="line">server 192.168.99.104:6002;</span><br><span class="line">server 192.168.99.104:6003;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       6102;</span><br><span class="line">        server_name  192.168.99.104; </span><br><span class="line">        location / &#123;  </span><br><span class="line">            proxy_pass   http://tomcat;</span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建第2个Nginx节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name n2 -v /home/n2/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</span><br></pre></td></tr></table></figure></li><li><p>在Nginx容器安装Keepalived</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入n1节点</span><br><span class="line">docker exec -it n1 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装VIM</span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta">#</span>安装Keepalived</span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="meta">#</span>编辑Keepalived配置文件(如下)</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.151</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.99.151 6201 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.99.104 6101 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入n1节点</span><br><span class="line">docker exec -it n2 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装VIM</span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta">#</span>安装Keepalived</span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="meta">#</span>编辑Keepalived配置文件(如下)</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.151</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.99.151 6201 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.99.104 6102 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="打包部署后端项目-1"><a href="#打包部署后端项目-1" class="headerlink" title="打包部署后端项目"></a>打包部署后端项目</h2><ol><li><p>在前端项目路径下执行打包指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li><li><p>build目录的文件拷贝到宿主机的/home/fn1/renren-vue、/home/fn2/renren-vue、/home/fn3/renren-vue的目录下面</p></li><li><p>创建3节点的Nginx，部署前端项目</p><p>宿主机/home/fn1/nginx.conf的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 6501;</span><br><span class="line">server_name  192.168.99.104;</span><br><span class="line">location  /  &#123;</span><br><span class="line">root  /home/fn1/renren-vue;</span><br><span class="line">index  index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动第fn1节点</span><br><span class="line">docker run -it -d --name fn1 -v /home/fn1/nginx.conf:/etc/nginx/nginx.conf -v /home/fn1/renren-vue:/home/fn1/renren-vue --privileged --net=host nginx</span><br></pre></td></tr></table></figure><p>宿主机/home/fn2/nginx.conf的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 6502;</span><br><span class="line">server_name  192.168.99.104;</span><br><span class="line">location  /  &#123;</span><br><span class="line">root  /home/fn2/renren-vue;</span><br><span class="line">index  index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动第fn2节点</span><br><span class="line">docker run -it -d --name fn2 -v /home/fn2/nginx.conf:/etc/nginx/nginx.conf -v /home/fn2/renren-vue:/home/fn2/renren-vue --privileged --net=host nginx</span><br></pre></td></tr></table></figure><p>宿主机/home/fn3/nginx.conf的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 6503;</span><br><span class="line">server_name  192.168.99.104;</span><br><span class="line">location  /  &#123;</span><br><span class="line">root  /home/fn3/renren-vue;</span><br><span class="line">index  index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动fn3节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动第fn3节点</span><br><span class="line">docker run -it -d --name fn3 -v /home/fn3/nginx.conf:/etc/nginx/nginx.conf -v /home/fn3/renren-vue:/home/fn3/renren-vue --privileged --net=host nginx</span><br></pre></td></tr></table></figure></li><li><p>配置负载均衡</p><p>宿主机/home/ff1/nginx.conf配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">upstream fn &#123;</span><br><span class="line">server 192.168.99.104:6501;</span><br><span class="line">server 192.168.99.104:6502;</span><br><span class="line">server 192.168.99.104:6503;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       6601;</span><br><span class="line">        server_name  192.168.99.104; </span><br><span class="line">        location / &#123;  </span><br><span class="line">            proxy_pass   http://fn;</span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动ff1节点</span><br><span class="line">docker run -it -d --name ff1 -v /home/ff1/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</span><br></pre></td></tr></table></figure><p>宿主机/home/ff2/nginx.conf配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">                      '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host $host;</span><br><span class="line">proxy_set_header        X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">upstream fn &#123;</span><br><span class="line">server 192.168.99.104:6501;</span><br><span class="line">server 192.168.99.104:6502;</span><br><span class="line">server 192.168.99.104:6503;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       6602;</span><br><span class="line">        server_name  192.168.99.104; </span><br><span class="line">        location / &#123;  </span><br><span class="line">            proxy_pass   http://fn;</span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>启动ff2节点</span><br><span class="line">docker run -it -d --name ff2 -v /home/ff2/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</span><br></pre></td></tr></table></figure></li><li><p>配置双机热备</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入ff1节点</span><br><span class="line">docker exec -it ff1 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装VIM</span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta">#</span>安装Keepalived</span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="meta">#</span>编辑Keepalived配置文件(如下)</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.152</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.99.151 6701 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.99.104 6601 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>进入ff1节点</span><br><span class="line">docker exec -it ff2 bash</span><br><span class="line"><span class="meta">#</span>更新软件包</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span>安装VIM</span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="meta">#</span>安装Keepalived</span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="meta">#</span>编辑Keepalived配置文件(如下)</span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="meta">#</span>启动Keepalived</span><br><span class="line">service keepalived start</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.152</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.99.151 6701 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.99.104 6602 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p></li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>使用 Maven Module 搭建spring boot项目（整合Spring Security、Spring Social、spring OAuth）三</title>
      <link href="/2018/07/12/spring_security/3.SpringSecuritySocial/"/>
      <url>/2018/07/12/spring_security/3.SpringSecuritySocial/</url>
      <content type="html"><![CDATA[<h1 id="使用-Maven-Module-搭建spring-boot项目（整合Spring-Security、Spring-Social、spring-OAuth）三"><a href="#使用-Maven-Module-搭建spring-boot项目（整合Spring-Security、Spring-Social、spring-OAuth）三" class="headerlink" title="使用 Maven Module 搭建spring boot项目（整合Spring Security、Spring Social、spring OAuth）三"></a>使用 Maven Module 搭建spring boot项目（整合Spring Security、Spring Social、spring OAuth）三</h1><table><thead><tr><th>版本号</th><th>作者</th><th>日期</th><th>备注</th></tr></thead><tbody><tr><td>V0.1</td><td>huangz</td><td>2018-04-03</td><td>初稿</td></tr></tbody></table><hr><h2 id="Spring-Social-开发第三方登陆"><a href="#Spring-Social-开发第三方登陆" class="headerlink" title="Spring Social 开发第三方登陆"></a>Spring Social 开发第三方登陆</h2><h3 id="OAuth-2-0-协议简介"><a href="#OAuth-2-0-协议简介" class="headerlink" title="OAuth 2.0 协议简介"></a>OAuth 2.0 协议简介</h3><h4 id="协议要解决的问题"><a href="#协议要解决的问题" class="headerlink" title="协议要解决的问题"></a>协议要解决的问题</h4><p>某平台（如优酷）可以使用第三方（微博）登陆进入系统，关于第三方应用授权会产生以下问题</p><ol><li>优酷应用可以访问用户在微博上的所有数据</li><li>用户只有修改密码才能收回授权</li><li>密码泄露的可能性大大提高</li></ol><h4 id="协议中的各种角色与运行流程"><a href="#协议中的各种角色与运行流程" class="headerlink" title="协议中的各种角色与运行流程"></a>协议中的各种角色与运行流程</h4><p>角色包括：资源所有者、客户端、服务提供商（认证服务器、资源服务器）</p><p><img src="images/oauth-1.png" alt=""></p><h4 id="协议中的授权模式"><a href="#协议中的授权模式" class="headerlink" title="协议中的授权模式"></a>协议中的授权模式</h4><ol><li>授权码模式（Authorization Code）</li></ol><p>授权码模式是目前最常使用的模式，以下是它的流程</p><p><img src="images/authorizationcode.png" alt=""></p><ol><li>密码模式（Resource Owner Password Credentials）</li><li>客户端模式（Client Credentials）</li><li>简化模式（Implicit）</li></ol><hr><h3 id="Spring-Social"><a href="#Spring-Social" class="headerlink" title="Spring Social"></a>Spring Social</h3><h4 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h4><h5 id="Spring-Social-基本流程"><a href="#Spring-Social-基本流程" class="headerlink" title="Spring Social 基本流程"></a>Spring Social 基本流程</h5><p><img src="images/social-1.png" alt=""></p><p>从第一步到第五步都是标准的OAuth协议流程，第六、七步是个性化流程</p><h5 id="Spring-Social-过滤器链"><a href="#Spring-Social-过滤器链" class="headerlink" title="Spring Social 过滤器链"></a>Spring Social 过滤器链</h5><p><code>SocialAuthenticationFilter</code>：处理社交登陆认证过滤器</p><p><img src="images/social-2.png" alt=""></p><h5 id="Spring-Social运行流程"><a href="#Spring-Social运行流程" class="headerlink" title="Spring Social运行流程"></a>Spring Social运行流程</h5><p><img src="images/social-process.png" alt=""></p><h5 id="Spring-Social-各种角色"><a href="#Spring-Social-各种角色" class="headerlink" title="Spring Social 各种角色"></a>Spring Social 各种角色</h5><ol><li>DBUserConnection ： 数据库</li><li>UserConnectionRepository（JdbcUserConnectionRepository）：用户信息连接仓库</li><li>Connection（OAuth2Connection）：由连接工厂创建</li><li>ConnectionFactory（OAuth2ConnectionFactory）：连接工厂</li></ol><p>组成：1）ServiceProvider 定义服务提供商</p><p>​        2）ApiAdapter ：用与匹配Api中返回的用户信息</p><ol><li>ServiceProvider（AbstractOAuth2ServiceProvider）：服务提供商</li></ol><p>组成：1）OAuth2Operations（OAuth2Template）：用于与服务提供商交互</p><p>​        2）Api（AbstractOAuth2ApiBingding）：定义服务提供商获取用户信息</p><p><img src="images/social-3.png" alt=""></p><h4 id="UsersConnectionRepository"><a href="#UsersConnectionRepository" class="headerlink" title="UsersConnectionRepository"></a>UsersConnectionRepository</h4><h5 id="数据库表"><a href="#数据库表" class="headerlink" title="数据库表"></a>数据库表</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> vic_UserConnection (userId <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    providerId <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    providerUserId <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">rank</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    displayName <span class="built_in">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    profileUrl <span class="built_in">varchar</span>(<span class="number">512</span>),</span><br><span class="line">    imageUrl <span class="built_in">varchar</span>(<span class="number">512</span>),</span><br><span class="line">    accessToken <span class="built_in">varchar</span>(<span class="number">512</span>) <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">    secret <span class="built_in">varchar</span>(<span class="number">512</span>),</span><br><span class="line">    refreshToken <span class="built_in">varchar</span>(<span class="number">512</span>),</span><br><span class="line">    expireTime <span class="built_in">bigint</span>,</span><br><span class="line">    primary <span class="keyword">key</span> (userId, providerId, providerUserId));</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">unique</span> <span class="keyword">index</span> vic_UserConnectionRank <span class="keyword">on</span> vic_UserConnection(userId, providerId, <span class="keyword">rank</span>);</span><br></pre></td></tr></table></figure><h5 id="属性类创建"><a href="#属性类创建" class="headerlink" title="属性类创建"></a>属性类创建</h5><ol><li>Spring Social 提供的一个社交配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SocialProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line">    <span class="keyword">private</span> String appSecret;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocialProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.appId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppId</span><span class="params">(String appId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.appId = appId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAppSecret</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.appSecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAppSecret</span><span class="params">(String appSecret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.appSecret = appSecret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义QQ和微信的属性类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置QQ登陆属性</span></span><br><span class="line"><span class="comment"> * 父类中提供appId、appSecret;</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180302</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQProperties</span> <span class="keyword">extends</span> <span class="title">SocialProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String providerId = <span class="string">"qq"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProviderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> providerId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProviderId</span><span class="params">(String providerId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.providerId = providerId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20280308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinProperties</span> <span class="keyword">extends</span> <span class="title">SocialProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第三方id，用来决定发起第三方登录的url，默认是 weixin。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String providerId = <span class="string">"weixin"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the providerId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProviderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> providerId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> providerId the providerId to set</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProviderId</span><span class="params">(String providerId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.providerId = providerId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>建立社交配置类，并加入SecurityProperties核心属性配置中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 社交登陆配置</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180302</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocialProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> QQProperties qq = <span class="keyword">new</span> QQProperties();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> WeixinProperties weixin = <span class="keyword">new</span> WeixinProperties();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认的处理社交登陆的URL</span></span><br><span class="line"><span class="keyword">private</span> String filterProcessesUrl = <span class="string">"/auth"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> QQProperties <span class="title">getQq</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> qq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setQq</span><span class="params">(QQProperties qq)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.qq = qq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFilterProcessesUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> filterProcessesUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilterProcessesUrl</span><span class="params">(String filterProcessesUrl)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.filterProcessesUrl = filterProcessesUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> WeixinProperties <span class="title">getWeixin</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> weixin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeixin</span><span class="params">(WeixinProperties weixin)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.weixin = weixin;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SecurityProperties.java</strong>中加入属性配置如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 社交登陆的相关配置,配置名:turing.security.social</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> SocialProperties social = <span class="keyword">new</span> SocialProperties();</span><br></pre></td></tr></table></figure><ol start="4"><li>社交用户信息回显</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单的社交用户信息,用户页面回显</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocialUserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String providerId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String providerUserId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String nickname;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String headimg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProviderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> providerId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProviderId</span><span class="params">(String providerId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.providerId = providerId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getProviderUserId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> providerUserId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProviderUserId</span><span class="params">(String providerUserId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.providerUserId = providerUserId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getNickname</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> nickname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNickname</span><span class="params">(String nickname)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.nickname = nickname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHeadimg</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> headimg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeadimg</span><span class="params">(String headimg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.headimg = headimg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SocialUserDetailsService"><a href="#SocialUserDetailsService" class="headerlink" title="SocialUserDetailsService"></a>SocialUserDetailsService</h4><p>开启社交登陆，需要实现<code>SocialUserDetailsService</code>接口，开启社交用户匹配系统用户的查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义实现 spring security 验证逻辑</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 2018/2/27.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForecastUserDetailsServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span>,<span class="title">SocialUserDetailsService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * UserDetailsService接口实现方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//spring security框架提供的一个实现了UserDetails接口的实现类</span></span><br><span class="line">        <span class="comment">//dao查询username信息</span></span><br><span class="line">        SystemUser user = userMapper.findSystemUserByUsername(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//AbstractUserDetailsAuthenticationProvider把UsernameNotFoundException包装其他异常，因为AbstractUserDetailsAuthenticationProvider.hideUserNotFoundExceptions=true</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"无法找到用户名为:"</span> + username + <span class="string">"的用户"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        user.setPassword(passwordEncoder.encode(user.getPassword()));</span><br><span class="line">        <span class="comment">//三个参数:username,password,authorities：授权</span></span><br><span class="line">        <span class="comment">//分割String类型为授权集合</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(username,user.getPassword(), AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="keyword">super</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SocialUserDetailsService接口实现方法</span></span><br><span class="line"><span class="comment">     * userId对应UsersConnectionRepository表中的UserId</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SocialUserDetails <span class="title">loadUserByUserId</span><span class="params">(String userId)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        SystemUser user = userMapper.findSystemUserByUsername(userId);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//AbstractUserDetailsAuthenticationProvider把UsernameNotFoundException包装其他异常，因为AbstractUserDetailsAuthenticationProvider.hideUserNotFoundExceptions=true</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"无法找到用户名为:"</span> + userId + <span class="string">"的用户"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SocialUser(userId,user.getPassword(),AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="keyword">super</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="QQ登陆"><a href="#QQ登陆" class="headerlink" title="QQ登陆"></a>QQ登陆</h4><h5 id="构造ServiceProvider"><a href="#构造ServiceProvider" class="headerlink" title="构造ServiceProvider"></a>构造ServiceProvider</h5><h6 id="API"><a href="#API" class="headerlink" title="API"></a>API</h6><ol><li>定义获取用户信息接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义QQ用户信息接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180302</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QQ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">QQUserInfo <span class="title">getUserInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义用户信息接口实现类，并继承 Api 接口的子类 AbstractOAuth2ApiBinding</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户获取QQ 用户信息</span></span><br><span class="line"><span class="comment"> * QQ API 实现类</span></span><br><span class="line"><span class="comment"> * 所有的API需要继承 AbstractOAuth2ApiBinding 提供access_token属性  RestTemplate用户发送HTTP请求</span></span><br><span class="line"><span class="comment"> * 多例对象，每个用户都拥有一个QQImpl实例</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180302</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQImpl</span> <span class="keyword">extends</span> <span class="title">AbstractOAuth2ApiBinding</span> <span class="keyword">implements</span> <span class="title">QQ</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line"><span class="comment">//qq根据access_token(令牌)获取openId</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL_GET_OPENID = <span class="string">"https://graph.qq.com/oauth2.0/me?access_token=%s"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取用户信息</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL_GET_USERINFO = <span class="string">"https://graph.qq.com/user/get_user_info?oauth_consumer_key=%s&amp;openid=%s"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String openId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line"><span class="comment">//走完oAuth协议获取到的accessToken</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">QQImpl</span><span class="params">(String accessToken, String appId)</span> </span>&#123;</span><br><span class="line"><span class="comment">//设置策略，发送请求时，token以参数形式在请求地址中</span></span><br><span class="line"><span class="keyword">super</span>(accessToken, TokenStrategy.ACCESS_TOKEN_PARAMETER);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.appId = appId;</span><br><span class="line"></span><br><span class="line">String url = String.format(URL_GET_OPENID, accessToken);</span><br><span class="line">String result = getRestTemplate().getForObject(url, String.class);</span><br><span class="line"></span><br><span class="line">logger.info(result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.openId = StringUtils.substringBetween(result, <span class="string">"\"openid\":\""</span>, <span class="string">"\"&#125;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> QQUserInfo <span class="title">getUserInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">String url = String.format(URL_GET_USERINFO, appId, openId);</span><br><span class="line">String result = getRestTemplate().getForObject(url, String.class);</span><br><span class="line"></span><br><span class="line">logger.info(result);</span><br><span class="line"></span><br><span class="line">QQUserInfo userInfo = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">userInfo = objectMapper.readValue(result, QQUserInfo.class);</span><br><span class="line">userInfo.setOpenId(openId);</span><br><span class="line"><span class="keyword">return</span> userInfo;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"获取用户信息失败"</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义QQ用户信息，从官网文档中获取返回的用户信息并创建对应实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * QQ用户信息实体类</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180302</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQUserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String ret;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果ret&lt;0，会有相应的错误信息提示，返回数据全部用UTF-8编码。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String msg;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String openId;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 不知道什么东西，文档上没写，但是实际api返回里有。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String is_lost;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 省(直辖市)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String province;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 市(直辖市区)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String city;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 出生年月</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String year;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户在QQ空间的昵称。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String nickname;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大小为30×30像素的QQ空间头像URL。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String figureurl;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大小为50×50像素的QQ空间头像URL。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String figureurl_1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大小为100×100像素的QQ空间头像URL。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String figureurl_2;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大小为40×40像素的QQ头像URL。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String figureurl_qq_1;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大小为100×100像素的QQ头像URL。需要注意，不是所有的用户都拥有QQ的100×100的头像，但40×40像素则是一定会有。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String figureurl_qq_2;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 性别。 如果获取不到则默认返回”男”</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String gender;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标识用户是否为黄钻用户（0：不是；1：是）。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String is_yellow_vip;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标识用户是否为黄钻用户（0：不是；1：是）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String vip;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 黄钻等级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String yellow_vip_level;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 黄钻等级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String level;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标识是否为年费黄钻用户（0：不是； 1：是）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String is_yellow_year_vip;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="OAuth2Operations"><a href="#OAuth2Operations" class="headerlink" title="OAuth2Operations"></a>OAuth2Operations</h6><p><strong>OAuth2Template.java源码分析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuth2Template</span> <span class="keyword">implements</span> <span class="title">OAuth2Operations</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> AccessGrant <span class="title">exchangeForAccess</span><span class="params">(String authorizationCode, String redirectUri, MultiValueMap&lt;String, String&gt; additionalParameters)</span> </span>&#123;</span><br><span class="line">    MultiValueMap&lt;String, String&gt; params = <span class="keyword">new</span> LinkedMultiValueMap();</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.useParametersForClientAuthentication) &#123;</span><br><span class="line">        params.set(<span class="string">"client_id"</span>, <span class="keyword">this</span>.clientId);</span><br><span class="line">        params.set(<span class="string">"client_secret"</span>, <span class="keyword">this</span>.clientSecret);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    params.set(<span class="string">"code"</span>, authorizationCode);</span><br><span class="line">    params.set(<span class="string">"redirect_uri"</span>, redirectUri);</span><br><span class="line">    params.set(<span class="string">"grant_type"</span>, <span class="string">"authorization_code"</span>);</span><br><span class="line">    <span class="keyword">if</span>(additionalParameters != <span class="keyword">null</span>) &#123;</span><br><span class="line">        params.putAll(additionalParameters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.postForAccessGrant(<span class="keyword">this</span>.accessTokenUrl, params);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 标准返回的是Map也就是json数据，但是各个服务提供商返回的不一定是标准格式，需要实现的服务商特殊格式处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> AccessGrant <span class="title">postForAccessGrant</span><span class="params">(String accessTokenUrl, MultiValueMap&lt;String, String&gt; parameters)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line"><span class="comment">//希望返回的数据是json数据</span></span><br><span class="line"><span class="keyword">this</span>.extractAccessGrant((Map)<span class="keyword">this</span>.getRestTemplate().postForObject(accessTokenUrl, parameters, Map.class, <span class="keyword">new</span> Object[<span class="number">0</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> RestTemplate <span class="title">createRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ClientHttpRequestFactory requestFactory = ClientHttpRequestFactorySelector.getRequestFactory();</span><br><span class="line">    RestTemplate restTemplate = <span class="keyword">new</span> RestTemplate(requestFactory);</span><br><span class="line">    List&lt;HttpMessageConverter&lt;?&gt;&gt; converters = <span class="keyword">new</span> ArrayList(<span class="number">2</span>);</span><br><span class="line">    converters.add(<span class="keyword">new</span> FormHttpMessageConverter());</span><br><span class="line">    converters.add(<span class="keyword">new</span> FormMapHttpMessageConverter());</span><br><span class="line">    converters.add(<span class="keyword">new</span> MappingJackson2HttpMessageConverter());</span><br><span class="line">    restTemplate.setMessageConverters(converters);</span><br><span class="line">    restTemplate.setErrorHandler(<span class="keyword">new</span> LoggingErrorHandler());</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.useParametersForClientAuthentication) &#123;</span><br><span class="line">        List&lt;ClientHttpRequestInterceptor&gt; interceptors = restTemplate.getInterceptors();</span><br><span class="line">        <span class="keyword">if</span>(interceptors == <span class="keyword">null</span>) &#123;</span><br><span class="line">            interceptors = <span class="keyword">new</span> ArrayList();</span><br><span class="line">            restTemplate.setInterceptors((List)interceptors);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ((List)interceptors).add(<span class="keyword">new</span> PreemptiveBasicAuthClientHttpRequestInterceptor(<span class="keyword">this</span>.clientId, <span class="keyword">this</span>.clientSecret));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> restTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OAuth2AuthenticationService.java 源码分析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OAuth2AuthenticationService</span>&lt;<span class="title">S</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractSocialAuthenticationService</span>&lt;<span class="title">S</span>&gt; </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> SocialAuthenticationToken <span class="title">getAuthToken</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> SocialAuthenticationRedirectException </span>&#123;</span><br><span class="line">    String code = request.getParameter(<span class="string">"code"</span>);</span><br><span class="line">    <span class="comment">//如果没有code，则是需要跳转到授权</span></span><br><span class="line">    <span class="keyword">if</span>(!StringUtils.hasText(code)) &#123;</span><br><span class="line">        OAuth2Parameters params = <span class="keyword">new</span> OAuth2Parameters();</span><br><span class="line">        params.setRedirectUri(<span class="keyword">this</span>.buildReturnToUrl(request));</span><br><span class="line">        <span class="keyword">this</span>.setScope(request, params);</span><br><span class="line">        params.add(<span class="string">"state"</span>, <span class="keyword">this</span>.generateState(<span class="keyword">this</span>.connectionFactory, request));</span><br><span class="line">        <span class="keyword">this</span>.addCustomParameters(params);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SocialAuthenticationRedirectException(<span class="keyword">this</span>.getConnectionFactory().getOAuthOperations().buildAuthenticateUrl(params));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(StringUtils.hasText(code)) &#123;</span><br><span class="line">        <span class="comment">//获得了授权码</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String returnToUrl = <span class="keyword">this</span>.buildReturnToUrl(request);</span><br><span class="line">            <span class="comment">//获取accessToken，调用连接工厂创建操作，获得accesstoken</span></span><br><span class="line">            AccessGrant accessGrant = <span class="keyword">this</span>.getConnectionFactory().getOAuthOperations().exchangeForAccess(code, returnToUrl, (MultiValueMap)<span class="keyword">null</span>);</span><br><span class="line">            Connection&lt;S&gt; connection = <span class="keyword">this</span>.getConnectionFactory().createConnection(accessGrant);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SocialAuthenticationToken(connection, (Map)<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (RestClientException var7) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">"failed to exchange for access"</span>, var7);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果服务商没有按照指定的格式返回accesstoken数据，则可能会抛出如下异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">授权成功后，进到我们的服务器中错误</span><br><span class="line">org.springframework.web.client.RestClientException: Could not extract response: no suitable HttpMessageConverter found for response type [interface java.util.Map] and content type [text/html]</span><br></pre></td></tr></table></figure><p><strong>自定义继承OAuth2Template</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义配置Auth2Template实现</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180302</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQOAuth2Template</span> <span class="keyword">extends</span> <span class="title">OAuth2Template</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">QQOAuth2Template</span><span class="params">(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(clientId, clientSecret, authorizeUrl, accessTokenUrl);</span><br><span class="line">      <span class="comment">//设置为true的时候才会在请求的时候带上client_id和client_secret</span></span><br><span class="line">      setUseParametersForClientAuthentication(<span class="keyword">true</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 针对QQ特殊的返回方式，需要覆盖父类的处理逻辑</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> accessTokenUrl</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> parameters</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> AccessGrant <span class="title">postForAccessGrant</span><span class="params">(String accessTokenUrl, MultiValueMap&lt;String, String&gt; parameters)</span> </span>&#123;</span><br><span class="line">      String responseStr = getRestTemplate().postForObject(accessTokenUrl, parameters, String.class);</span><br><span class="line">      </span><br><span class="line">      logger.info(<span class="string">"获取accessToke的响应："</span>+responseStr);</span><br><span class="line">      </span><br><span class="line">      String[] items = StringUtils.splitByWholeSeparatorPreserveAllTokens(responseStr, <span class="string">"&amp;"</span>);</span><br><span class="line">      </span><br><span class="line">      String accessToken = StringUtils.substringAfterLast(items[<span class="number">0</span>], <span class="string">"="</span>);</span><br><span class="line">      Long expiresIn = <span class="keyword">new</span> Long(StringUtils.substringAfterLast(items[<span class="number">1</span>], <span class="string">"="</span>));</span><br><span class="line">      String refreshToken = StringUtils.substringAfterLast(items[<span class="number">2</span>], <span class="string">"="</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> AccessGrant(accessToken, <span class="keyword">null</span>, refreshToken, expiresIn);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> RestTemplate <span class="title">createRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      RestTemplate restTemplate = <span class="keyword">super</span>.createRestTemplate();</span><br><span class="line">      <span class="comment">//新增一个转换对象</span></span><br><span class="line">      restTemplate.getMessageConverters().add(<span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">      <span class="keyword">return</span> restTemplate;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ServiceProvider"><a href="#ServiceProvider" class="headerlink" title="ServiceProvider"></a>ServiceProvider</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * QQ Provider 需要实现 AbstractOAuth2ServiceProvider&lt;T&gt; T：传入QQ API类型</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180302</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQServiceProvider</span> <span class="keyword">extends</span> <span class="title">AbstractOAuth2ServiceProvider</span>&lt;<span class="title">QQ</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//导向认证地址，获取授权码</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL_AUTHORIZE = <span class="string">"https://graph.qq.com/oauth2.0/authorize"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//拿着授权码获取令牌申请地址</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL_ACCESS_TOKEN = <span class="string">"https://graph.qq.com/oauth2.0/token"</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">QQServiceProvider</span><span class="params">(String appId, String appSecret)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//单例</span></span><br><span class="line">      <span class="keyword">super</span>(<span class="keyword">new</span> QQOAuth2Template(appId, appSecret, URL_AUTHORIZE, URL_ACCESS_TOKEN));</span><br><span class="line">      <span class="keyword">this</span>.appId = appId;</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> QQ <span class="title">getApi</span><span class="params">(String accessToken)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> QQImpl(accessToken, appId);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构造ConnectionFactory"><a href="#构造ConnectionFactory" class="headerlink" title="构造ConnectionFactory"></a>构造ConnectionFactory</h5><h6 id="ApiAdapter"><a href="#ApiAdapter" class="headerlink" title="ApiAdapter"></a>ApiAdapter</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造Adapter</span></span><br><span class="line"><span class="comment"> * 需要实现ApiAdapter&lt;T&gt; T：指当前的适配器 是 适配哪个 API</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180302</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQAdapter</span> <span class="keyword">implements</span> <span class="title">ApiAdapter</span>&lt;<span class="title">QQ</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务是否为可用</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(QQ api)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Connection数据 与 Api 数据 的适配</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> api</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> values 创建Connection所需要的数据项</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConnectionValues</span><span class="params">(QQ api, ConnectionValues values)</span> </span>&#123;</span><br><span class="line">QQUserInfo userInfo = api.getUserInfo();</span><br><span class="line"></span><br><span class="line">values.setDisplayName(userInfo.getNickname());</span><br><span class="line">values.setImageUrl(userInfo.getFigureurl_qq_1());</span><br><span class="line">values.setProfileUrl(<span class="keyword">null</span>);<span class="comment">//个人主页，QQ没有。微博就会有</span></span><br><span class="line">values.setProviderUserId(userInfo.getOpenId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserProfile <span class="title">fetchUserProfile</span><span class="params">(QQ api)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStatus</span><span class="params">(QQ api, String message)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ConnectionFactory"><a href="#ConnectionFactory" class="headerlink" title="ConnectionFactory"></a>ConnectionFactory</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造ConnectionFactory</span></span><br><span class="line"><span class="comment"> * 继承&lt;T&gt; T：指当前的适配器 是 适配哪个 API</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180302</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQConnectionFactory</span> <span class="keyword">extends</span> <span class="title">OAuth2ConnectionFactory</span>&lt;<span class="title">QQ</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">QQConnectionFactory</span><span class="params">(String providerId, String appId, String appSecret)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(providerId, <span class="keyword">new</span> QQServiceProvider(appId, appSecret), <span class="keyword">new</span> QQAdapter());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生成QQ配置"><a href="#生成QQ配置" class="headerlink" title="生成QQ配置"></a>生成QQ配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * QQ配置</span></span><br><span class="line"><span class="comment"> * ConditionalOnProperty：当系统中存在指定的配置时，此配置才生效</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180302</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"victory.security.social.qq"</span>, name = <span class="string">"app-id"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQAutoConfig</span> <span class="keyword">extends</span> <span class="title">SocialAutoConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SecurityProperties securityProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建连接工厂，使用自定义的连接工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> ConnectionFactory&lt;?&gt; createConnectionFactory() &#123;</span><br><span class="line">QQProperties qqConfig = securityProperties.getSocial().getQq();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> QQConnectionFactory(qqConfig.getProviderId(), qqConfig.getAppId(), qqConfig.getAppSecret());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为了解决生产多个连接工厂，覆盖父类的连接工厂创建</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connectionFactoryLocator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UsersConnectionRepository <span class="title">getUsersConnectionRepository</span><span class="params">(ConnectionFactoryLocator connectionFactoryLocator)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理视图，后面会进行讲解</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Bean</span>(&#123;<span class="string">"connect/qqConnect"</span>, <span class="string">"connect/qqConnected"</span>&#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"qqConnectedView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">qqConnectedView</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AbstractConnectView();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="微信登陆"><a href="#微信登陆" class="headerlink" title="微信登陆"></a>微信登陆</h4><h5 id="构造ServiceProvider-1"><a href="#构造ServiceProvider-1" class="headerlink" title="构造ServiceProvider"></a>构造ServiceProvider</h5><h6 id="API-1"><a href="#API-1" class="headerlink" title="API"></a>API</h6><ol><li>定义微信API接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信API调用接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180302</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Weixin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">WeixinUserInfo <span class="title">getUserInfo</span><span class="params">(String openId)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义微信用户信息类，从微信官网文档中获取返回的用户信息，构造出用户实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信用户信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180303</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinUserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通用户的标识，对当前开发者帐号唯一</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String openid;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通用户昵称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String nickname;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 语言</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String language;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通用户性别，1为男性，2为女性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String sex;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通用户个人资料填写的省份</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String province;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通用户个人资料填写的城市</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String city;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 国家，如中国为CN</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String country;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String headimgurl;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户特权信息，json数组，如微信沃卡用户为（chinaunicom）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String[] privilege;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户统一标识。针对一个微信开放平台帐号下的应用，同一用户的unionid是唯一的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String unionid;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义微信用户信息接口实现类，并继承 Api 接口的子类 AbstractOAuth2ApiBinding</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Weixin API调用模板， scope为Request的Spring bean, 根据当前用户的accessToken创建。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180303</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinImpl</span> <span class="keyword">extends</span> <span class="title">AbstractOAuth2ApiBinding</span> <span class="keyword">implements</span> <span class="title">Weixin</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户信息的url</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL_GET_USER_INFO = <span class="string">"https://api.weixin.qq.com/sns/userinfo?openid="</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> accessToken</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeixinImpl</span><span class="params">(String accessToken)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(accessToken, TokenStrategy.ACCESS_TOKEN_PARAMETER);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认注册的StringHttpMessageConverter字符集为ISO-8859-1，而微信返回的是UTF-8的，所以覆盖了原来的方法。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">protected</span> List&lt;HttpMessageConverter&lt;?&gt;&gt; getMessageConverters() &#123;</span><br><span class="line">List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = <span class="keyword">super</span>.getMessageConverters();</span><br><span class="line">messageConverters.remove(<span class="number">0</span>);</span><br><span class="line">messageConverters.add(<span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line"><span class="keyword">return</span> messageConverters;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取微信用户信息。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> WeixinUserInfo <span class="title">getUserInfo</span><span class="params">(String openId)</span> </span>&#123;</span><br><span class="line">String url = URL_GET_USER_INFO + openId;</span><br><span class="line">String response = getRestTemplate().getForObject(url, String.class);</span><br><span class="line"><span class="keyword">if</span>(StringUtils.contains(response, <span class="string">"errcode"</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">WeixinUserInfo profile = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">profile = objectMapper.readValue(response,WeixinUserInfo.class);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> profile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="OAuth2Operations-1"><a href="#OAuth2Operations-1" class="headerlink" title="OAuth2Operations"></a>OAuth2Operations</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 完成微信的OAuth2认证流程的模板类。国内厂商实现的OAuth2每个都不同, spring默认提供的OAuth2Template适应不了，只能针对每个厂商自己微调。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180308</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinOAuth2Template</span> <span class="keyword">extends</span> <span class="title">OAuth2Template</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String clientId;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String clientSecret;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String accessTokenUrl;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REFRESH_TOKEN_URL = <span class="string">"https://api.weixin.qq.com/sns/oauth2/refresh_token"</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">WeixinOAuth2Template</span><span class="params">(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(clientId, clientSecret, authorizeUrl, accessTokenUrl);</span><br><span class="line">      setUseParametersForClientAuthentication(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">this</span>.clientId = clientId;</span><br><span class="line">      <span class="keyword">this</span>.clientSecret = clientSecret;</span><br><span class="line">      <span class="keyword">this</span>.accessTokenUrl = accessTokenUrl;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* (non-Javadoc)</span></span><br><span class="line"><span class="comment">    * @see org.springframework.social.oauth2.OAuth2Template#exchangeForAccess(java.lang.String, java.lang.String, org.springframework.util.MultiValueMap)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> AccessGrant <span class="title">exchangeForAccess</span><span class="params">(String authorizationCode, String redirectUri,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         MultiValueMap&lt;String, String&gt; parameters)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">      StringBuilder accessTokenRequestUrl = <span class="keyword">new</span> StringBuilder(accessTokenUrl);</span><br><span class="line">      </span><br><span class="line">      accessTokenRequestUrl.append(<span class="string">"?appid="</span>+clientId);</span><br><span class="line">      accessTokenRequestUrl.append(<span class="string">"&amp;secret="</span>+clientSecret);</span><br><span class="line">      accessTokenRequestUrl.append(<span class="string">"&amp;code="</span>+authorizationCode);</span><br><span class="line">      accessTokenRequestUrl.append(<span class="string">"&amp;grant_type=authorization_code"</span>);</span><br><span class="line">      accessTokenRequestUrl.append(<span class="string">"&amp;redirect_uri="</span>+redirectUri);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> getAccessToken(accessTokenRequestUrl);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> AccessGrant <span class="title">refreshAccess</span><span class="params">(String refreshToken, MultiValueMap&lt;String, String&gt; additionalParameters)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">      StringBuilder refreshTokenUrl = <span class="keyword">new</span> StringBuilder(REFRESH_TOKEN_URL);</span><br><span class="line">      </span><br><span class="line">      refreshTokenUrl.append(<span class="string">"?appid="</span>+clientId);</span><br><span class="line">      refreshTokenUrl.append(<span class="string">"&amp;grant_type=refresh_token"</span>);</span><br><span class="line">      refreshTokenUrl.append(<span class="string">"&amp;refresh_token="</span>+refreshToken);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> getAccessToken(refreshTokenUrl);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">private</span> AccessGrant <span class="title">getAccessToken</span><span class="params">(StringBuilder accessTokenRequestUrl)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">      logger.info(<span class="string">"获取access_token, 请求URL: "</span>+accessTokenRequestUrl.toString());</span><br><span class="line">      </span><br><span class="line">      String response = getRestTemplate().getForObject(accessTokenRequestUrl.toString(), String.class);</span><br><span class="line">      </span><br><span class="line">      logger.info(<span class="string">"获取access_token, 响应内容: "</span>+response);</span><br><span class="line">      </span><br><span class="line">      Map&lt;String, Object&gt; result = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         result = <span class="keyword">new</span> ObjectMapper().readValue(response, Map.class);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//返回错误码时直接返回空</span></span><br><span class="line">      <span class="keyword">if</span>(StringUtils.isNotBlank(MapUtils.getString(result, <span class="string">"errcode"</span>)))&#123;</span><br><span class="line">         String errcode = MapUtils.getString(result, <span class="string">"errcode"</span>);</span><br><span class="line">         String errmsg = MapUtils.getString(result, <span class="string">"errmsg"</span>);</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"获取access token失败, errcode:"</span>+errcode+<span class="string">", errmsg:"</span>+errmsg);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      WeixinAccessGrant accessToken = <span class="keyword">new</span> WeixinAccessGrant(</span><br><span class="line">            MapUtils.getString(result, <span class="string">"access_token"</span>),</span><br><span class="line">            MapUtils.getString(result, <span class="string">"scope"</span>),</span><br><span class="line">            MapUtils.getString(result, <span class="string">"refresh_token"</span>),</span><br><span class="line">            MapUtils.getLong(result, <span class="string">"expires_in"</span>));</span><br><span class="line">      </span><br><span class="line">      accessToken.setOpenId(MapUtils.getString(result, <span class="string">"openid"</span>));</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> accessToken;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构建获取授权码的请求。也就是引导用户跳转到微信的地址。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">buildAuthenticateUrl</span><span class="params">(OAuth2Parameters parameters)</span> </span>&#123;</span><br><span class="line">      String url = <span class="keyword">super</span>.buildAuthenticateUrl(parameters);</span><br><span class="line">      url = url + <span class="string">"&amp;appid="</span>+clientId+<span class="string">"&amp;scope=snsapi_login"</span>;</span><br><span class="line">      <span class="keyword">return</span> url;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">buildAuthorizeUrl</span><span class="params">(OAuth2Parameters parameters)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> buildAuthenticateUrl(parameters);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 微信返回的contentType是html/text，添加相应的HttpMessageConverter来处理。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> RestTemplate <span class="title">createRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      RestTemplate restTemplate = <span class="keyword">super</span>.createRestTemplate();</span><br><span class="line">      restTemplate.getMessageConverters().add(<span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">      <span class="keyword">return</span> restTemplate;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="AccessGrant"><a href="#AccessGrant" class="headerlink" title="AccessGrant"></a>AccessGrant</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 完成微信的OAuth2认证流程的模板类。国内厂商实现的OAuth2每个都不同, spring默认提供的OAuth2Template适应不了，只能针对每个厂商自己微调。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180308</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinOAuth2Template</span> <span class="keyword">extends</span> <span class="title">OAuth2Template</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String clientId;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String clientSecret;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String accessTokenUrl;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String REFRESH_TOKEN_URL = <span class="string">"https://api.weixin.qq.com/sns/oauth2/refresh_token"</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">WeixinOAuth2Template</span><span class="params">(String clientId, String clientSecret, String authorizeUrl, String accessTokenUrl)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(clientId, clientSecret, authorizeUrl, accessTokenUrl);</span><br><span class="line">      setUseParametersForClientAuthentication(<span class="keyword">true</span>);</span><br><span class="line">      <span class="keyword">this</span>.clientId = clientId;</span><br><span class="line">      <span class="keyword">this</span>.clientSecret = clientSecret;</span><br><span class="line">      <span class="keyword">this</span>.accessTokenUrl = accessTokenUrl;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/* (non-Javadoc)</span></span><br><span class="line"><span class="comment">    * @see org.springframework.social.oauth2.OAuth2Template#exchangeForAccess(java.lang.String, java.lang.String, org.springframework.util.MultiValueMap)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> AccessGrant <span class="title">exchangeForAccess</span><span class="params">(String authorizationCode, String redirectUri,</span></span></span><br><span class="line"><span class="function"><span class="params">                                         MultiValueMap&lt;String, String&gt; parameters)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">      StringBuilder accessTokenRequestUrl = <span class="keyword">new</span> StringBuilder(accessTokenUrl);</span><br><span class="line">      </span><br><span class="line">      accessTokenRequestUrl.append(<span class="string">"?appid="</span>+clientId);</span><br><span class="line">      accessTokenRequestUrl.append(<span class="string">"&amp;secret="</span>+clientSecret);</span><br><span class="line">      accessTokenRequestUrl.append(<span class="string">"&amp;code="</span>+authorizationCode);</span><br><span class="line">      accessTokenRequestUrl.append(<span class="string">"&amp;grant_type=authorization_code"</span>);</span><br><span class="line">      accessTokenRequestUrl.append(<span class="string">"&amp;redirect_uri="</span>+redirectUri);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> getAccessToken(accessTokenRequestUrl);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> AccessGrant <span class="title">refreshAccess</span><span class="params">(String refreshToken, MultiValueMap&lt;String, String&gt; additionalParameters)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">      StringBuilder refreshTokenUrl = <span class="keyword">new</span> StringBuilder(REFRESH_TOKEN_URL);</span><br><span class="line">      </span><br><span class="line">      refreshTokenUrl.append(<span class="string">"?appid="</span>+clientId);</span><br><span class="line">      refreshTokenUrl.append(<span class="string">"&amp;grant_type=refresh_token"</span>);</span><br><span class="line">      refreshTokenUrl.append(<span class="string">"&amp;refresh_token="</span>+refreshToken);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> getAccessToken(refreshTokenUrl);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">private</span> AccessGrant <span class="title">getAccessToken</span><span class="params">(StringBuilder accessTokenRequestUrl)</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">      logger.info(<span class="string">"获取access_token, 请求URL: "</span>+accessTokenRequestUrl.toString());</span><br><span class="line">      </span><br><span class="line">      String response = getRestTemplate().getForObject(accessTokenRequestUrl.toString(), String.class);</span><br><span class="line">      </span><br><span class="line">      logger.info(<span class="string">"获取access_token, 响应内容: "</span>+response);</span><br><span class="line">      </span><br><span class="line">      Map&lt;String, Object&gt; result = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         result = <span class="keyword">new</span> ObjectMapper().readValue(response, Map.class);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//返回错误码时直接返回空</span></span><br><span class="line">      <span class="keyword">if</span>(StringUtils.isNotBlank(MapUtils.getString(result, <span class="string">"errcode"</span>)))&#123;</span><br><span class="line">         String errcode = MapUtils.getString(result, <span class="string">"errcode"</span>);</span><br><span class="line">         String errmsg = MapUtils.getString(result, <span class="string">"errmsg"</span>);</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"获取access token失败, errcode:"</span>+errcode+<span class="string">", errmsg:"</span>+errmsg);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      WeixinAccessGrant accessToken = <span class="keyword">new</span> WeixinAccessGrant(</span><br><span class="line">            MapUtils.getString(result, <span class="string">"access_token"</span>),</span><br><span class="line">            MapUtils.getString(result, <span class="string">"scope"</span>),</span><br><span class="line">            MapUtils.getString(result, <span class="string">"refresh_token"</span>),</span><br><span class="line">            MapUtils.getLong(result, <span class="string">"expires_in"</span>));</span><br><span class="line">      </span><br><span class="line">      accessToken.setOpenId(MapUtils.getString(result, <span class="string">"openid"</span>));</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span> accessToken;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构建获取授权码的请求。也就是引导用户跳转到微信的地址。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">buildAuthenticateUrl</span><span class="params">(OAuth2Parameters parameters)</span> </span>&#123;</span><br><span class="line">      String url = <span class="keyword">super</span>.buildAuthenticateUrl(parameters);</span><br><span class="line">      url = url + <span class="string">"&amp;appid="</span>+clientId+<span class="string">"&amp;scope=snsapi_login"</span>;</span><br><span class="line">      <span class="keyword">return</span> url;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">buildAuthorizeUrl</span><span class="params">(OAuth2Parameters parameters)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> buildAuthenticateUrl(parameters);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 微信返回的contentType是html/text，添加相应的HttpMessageConverter来处理。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> RestTemplate <span class="title">createRestTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      RestTemplate restTemplate = <span class="keyword">super</span>.createRestTemplate();</span><br><span class="line">      restTemplate.getMessageConverters().add(<span class="keyword">new</span> StringHttpMessageConverter(Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">      <span class="keyword">return</span> restTemplate;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ServiceProvider-1"><a href="#ServiceProvider-1" class="headerlink" title="ServiceProvider"></a>ServiceProvider</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 微信的OAuth2流程处理器的提供器，供spring social的connect体系调用</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180303</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinServiceProvider</span> <span class="keyword">extends</span> <span class="title">AbstractOAuth2ServiceProvider</span>&lt;<span class="title">Weixin</span>&gt; </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 微信获取授权码的url</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL_AUTHORIZE = <span class="string">"https://open.weixin.qq.com/connect/qrconnect"</span>;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 微信获取accessToken的url</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL_ACCESS_TOKEN = <span class="string">"https://api.weixin.qq.com/sns/oauth2/access_token"</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> appId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> appSecret</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">WeixinServiceProvider</span><span class="params">(String appId, String appSecret)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(<span class="keyword">new</span> WeixinOAuth2Template(appId, appSecret,URL_AUTHORIZE,URL_ACCESS_TOKEN));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Weixin <span class="title">getApi</span><span class="params">(String accessToken)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> WeixinImpl(accessToken);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构造ConnectionFactory-1"><a href="#构造ConnectionFactory-1" class="headerlink" title="构造ConnectionFactory"></a>构造ConnectionFactory</h5><h6 id="ApiAdapter-1"><a href="#ApiAdapter-1" class="headerlink" title="ApiAdapter"></a>ApiAdapter</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信 api适配器，将微信 api的数据模型转为spring social的标准模型。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinAdapter</span> <span class="keyword">implements</span> <span class="title">ApiAdapter</span>&lt;<span class="title">Weixin</span>&gt; </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String openId;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">WeixinAdapter</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">WeixinAdapter</span><span class="params">(String openId)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.openId = openId;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> api</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Weixin api)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> api</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> values</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setConnectionValues</span><span class="params">(Weixin api, ConnectionValues values)</span> </span>&#123;</span><br><span class="line">      WeixinUserInfo profile = api.getUserInfo(openId);</span><br><span class="line">      values.setProviderUserId(profile.getOpenid());</span><br><span class="line">      values.setDisplayName(profile.getNickname());</span><br><span class="line">      values.setImageUrl(profile.getHeadimgurl());</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> api</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> UserProfile <span class="title">fetchUserProfile</span><span class="params">(Weixin api)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> api</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateStatus</span><span class="params">(Weixin api, String message)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//do nothing</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ConnectionFactory-1"><a href="#ConnectionFactory-1" class="headerlink" title="ConnectionFactory"></a>ConnectionFactory</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信连接工厂</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180308</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinConnectionFactory</span> <span class="keyword">extends</span> <span class="title">OAuth2ConnectionFactory</span>&lt;<span class="title">Weixin</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> appId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> appSecret</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeixinConnectionFactory</span><span class="params">(String providerId, String appId, String appSecret)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(providerId, <span class="keyword">new</span> WeixinServiceProvider(appId, appSecret), <span class="keyword">new</span> WeixinAdapter());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 由于微信的openId是和accessToken一起返回的，所以在这里直接根据accessToken设置providerUserId即可，不用像QQ那样通过QQAdapter来获取</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">extractProviderUserId</span><span class="params">(AccessGrant accessGrant)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(accessGrant <span class="keyword">instanceof</span> WeixinAccessGrant) &#123;</span><br><span class="line"><span class="keyword">return</span> ((WeixinAccessGrant)accessGrant).getOpenId();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * @see org.springframework.social.connect.support.OAuth2ConnectionFactory#createConnection(org.springframework.social.oauth2.AccessGrant)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection&lt;Weixin&gt; <span class="title">createConnection</span><span class="params">(AccessGrant accessGrant)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OAuth2Connection&lt;Weixin&gt;(getProviderId(), extractProviderUserId(accessGrant), accessGrant.getAccessToken(),</span><br><span class="line">accessGrant.getRefreshToken(), accessGrant.getExpireTime(), getOAuth2ServiceProvider(), getApiAdapter(extractProviderUserId(accessGrant)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* (non-Javadoc)</span></span><br><span class="line"><span class="comment"> * @see org.springframework.social.connect.support.OAuth2ConnectionFactory#createConnection(org.springframework.social.connect.ConnectionData)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection&lt;Weixin&gt; <span class="title">createConnection</span><span class="params">(ConnectionData data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> OAuth2Connection&lt;Weixin&gt;(data, getOAuth2ServiceProvider(), getApiAdapter(data.getProviderUserId()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ApiAdapter&lt;Weixin&gt; <span class="title">getApiAdapter</span><span class="params">(String providerUserId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> WeixinAdapter(providerUserId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> OAuth2ServiceProvider&lt;Weixin&gt; <span class="title">getOAuth2ServiceProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (OAuth2ServiceProvider&lt;Weixin&gt;) getServiceProvider();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="生成微信配置"><a href="#生成微信配置" class="headerlink" title="生成微信配置"></a>生成微信配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信登录配置</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180308</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"victorys.security.social.weixin"</span>, name = <span class="string">"app-id"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeixinAutoConfiguration</span> <span class="keyword">extends</span> <span class="title">SocialAutoConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SecurityProperties securityProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 获取微信配置，生成微信的连接工厂</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @see</span></span><br><span class="line"><span class="comment"> * org.springframework.boot.autoconfigure.social.SocialAutoConfigurerAdapter</span></span><br><span class="line"><span class="comment"> * #createConnectionFactory()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> ConnectionFactory&lt;?&gt; createConnectionFactory() &#123;</span><br><span class="line">WeixinProperties weixinConfig = securityProperties.getSocial().getWeixin();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> WeixinConnectionFactory(weixinConfig.getProviderId(), weixinConfig.getAppId(),</span><br><span class="line">weixinConfig.getAppSecret());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UsersConnectionRepository <span class="title">getUsersConnectionRepository</span><span class="params">(ConnectionFactoryLocator connectionFactoryLocator)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span>(&#123;<span class="string">"connect/weixinConnect"</span>, <span class="string">"connect/weixinConnected"</span>&#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"weixinConnectedView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">weixinConnectedView</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AbstractConnectView();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="社交总配置"><a href="#社交总配置" class="headerlink" title="社交总配置"></a>社交总配置</h4><ol><li>配置SpringSocialConfigurer，实现对SocialAuthenticationFilter的配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义配置SocialConfigurer,覆盖其默认拍配置</span></span><br><span class="line"><span class="comment"> * 作用：SocialAuthenticationFilter初始化完成后，重新设置它的某些属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180302</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSpringSocialConfigurer</span> <span class="keyword">extends</span> <span class="title">SpringSocialConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String filterProcessesUrl;<span class="comment">//实现可配置的社交登陆拦截url</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//实现可扩展化Filter类</span></span><br><span class="line"><span class="keyword">private</span> SocialAuthenticationFilterPostProcessor socialAuthenticationFilterPostProcessor;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractSpringSocialConfigurer</span><span class="params">(String filterProcessesUrl)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.filterProcessesUrl = filterProcessesUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> &lt;T&gt; <span class="function">T <span class="title">postProcess</span><span class="params">(T object)</span> </span>&#123;</span><br><span class="line">SocialAuthenticationFilter filter = (SocialAuthenticationFilter) <span class="keyword">super</span>.postProcess(object);</span><br><span class="line"><span class="comment">//设置社交登陆拦截的url</span></span><br><span class="line">filter.setFilterProcessesUrl(filterProcessesUrl);</span><br><span class="line"><span class="keyword">if</span> (socialAuthenticationFilterPostProcessor != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//为SocialAuthenticationFilter增加额外的属性</span></span><br><span class="line"><span class="comment">//在不同的项目下会有不同的实现</span></span><br><span class="line">socialAuthenticationFilterPostProcessor.process(filter);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> (T) filter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> SocialAuthenticationFilterPostProcessor <span class="title">getSocialAuthenticationFilterPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> socialAuthenticationFilterPostProcessor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSocialAuthenticationFilterPostProcessor</span><span class="params">(SocialAuthenticationFilterPostProcessor socialAuthenticationFilterPostProcessor)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.socialAuthenticationFilterPostProcessor = socialAuthenticationFilterPostProcessor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFilterProcessesUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> filterProcessesUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilterProcessesUrl</span><span class="params">(String filterProcessesUrl)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.filterProcessesUrl = filterProcessesUrl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>SocialAuthenticationFilterPostProcessor社交验证过滤器后置处理器接口定义</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义后处理器接口，处理不同模式下授权后返回的信息</span></span><br><span class="line"><span class="comment"> * 如果不进行配置，则不修改SocialAuthenticationFilter里的任何属性值</span></span><br><span class="line"><span class="comment"> * 默认不进行设置，即没有实现类</span></span><br><span class="line"><span class="comment"> * 根据不同的环境，可以自定义接口的实现，对SocialAuthenticationFilter进行属性扩展</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 在前后端分离的项目中，一般都需要返回不一样的社交登陆验证信息，比如说给Filter设置登陆成功处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180305</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SocialAuthenticationFilterPostProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">(SocialAuthenticationFilter socialAuthenticationFilter)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>总配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置社交登陆配置</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180302</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSocial</span><span class="comment">//开启社交项目的支持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocialConfig</span> <span class="keyword">extends</span> <span class="title">SocialConfigurerAdapter</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SecurityProperties securityProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启社交用户自动注册</span></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> ConnectionSignUp connectionSignUp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否有后置处理器去增强过滤器的配置</span></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> SocialAuthenticationFilterPostProcessor socialAuthenticationFilterPostProcessor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置UsersConnectionRepository</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UsersConnectionRepository <span class="title">getUsersConnectionRepository</span><span class="params">(ConnectionFactoryLocator connectionFactoryLocator)</span> </span>&#123;</span><br><span class="line">JdbcUsersConnectionRepository repository = <span class="keyword">new</span> JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, Encryptors.noOpText());</span><br><span class="line">repository.setTablePrefix(<span class="string">"vic_"</span>);<span class="comment">//加入表前缀</span></span><br><span class="line"><span class="keyword">if</span>(connectionSignUp != <span class="keyword">null</span>) &#123;</span><br><span class="line">repository.setConnectionSignUp(connectionSignUp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> repository;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局配置SocailConfig</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span>(name = SecurityConstants.DEFAULT_SPRING_SOCIAL_CONFIGURER_BEAN_NAME)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SpringSocialConfigurer <span class="title">socialSecurityConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String filterProcessesUrl = securityProperties.getSocial().getFilterProcessesUrl();</span><br><span class="line">AbstractSpringSocialConfigurer configurer = <span class="keyword">new</span> AbstractSpringSocialConfigurer(filterProcessesUrl);</span><br><span class="line"><span class="comment">//设置注册地址</span></span><br><span class="line">configurer.signupUrl(securityProperties.getBrowser().getSignUpUrl());</span><br><span class="line"><span class="comment">//设置后置处理器，对过滤器进行增强改造</span></span><br><span class="line">configurer.setSocialAuthenticationFilterPostProcessor(socialAuthenticationFilterPostProcessor);</span><br><span class="line"><span class="keyword">return</span> configurer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring social 提供的工具类，可以获取获取到的第三方用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connectionFactoryLocator spring boot 已经有此类的实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> ProviderSignInUtils</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ProviderSignInUtils <span class="title">providerSignInUtils</span><span class="params">(ConnectionFactoryLocator connectionFactoryLocator)</span> </span>&#123;</span><br><span class="line">UsersConnectionRepository usersConnectionRepository = getUsersConnectionRepository(connectionFactoryLocator);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ProviderSignInUtils(connectionFactoryLocator,usersConnectionRepository);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置默认的社交绑定状态信息输出器</span></span><br><span class="line"><span class="comment"> * 可扩展</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(AbstractConnectionViewProcessor.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractConnectionViewProcessor <span class="title">connectionViewProcessor</span><span class="params">(ObjectMapper objectMapper)</span></span>&#123;</span><br><span class="line">DefaultConnectionViewProcessor processor = <span class="keyword">new</span> DefaultConnectionViewProcessor(objectMapper);</span><br><span class="line"><span class="keyword">return</span> processor;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Spring-Social额外配置"><a href="#Spring-Social额外配置" class="headerlink" title="Spring Social额外配置"></a>Spring Social额外配置</h4><h5 id="社交注册"><a href="#社交注册" class="headerlink" title="社交注册"></a>社交注册</h5><p>​    当以上流程就是走完整个OAuth协议的流程，拿到了服务提供商的用户信息，但是成功后却引发了另外一个跳转：/signup。</p><h6 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h6><p><strong>SocialAuthenticationProvider 源码跟踪</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.social.security;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocialAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;? extends Object&gt; authentication)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SocialAuthenticationToken.class.isAssignableFrom(authentication);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        Assert.isInstanceOf(SocialAuthenticationToken.class, authentication, <span class="string">"unsupported authentication type"</span>);</span><br><span class="line">        Assert.isTrue(!authentication.isAuthenticated(), <span class="string">"already authenticated"</span>);</span><br><span class="line">        SocialAuthenticationToken authToken = (SocialAuthenticationToken)authentication;</span><br><span class="line">        String providerId = authToken.getProviderId();</span><br><span class="line">        <span class="comment">//获得Connection</span></span><br><span class="line">        Connection&lt;?&gt; connection = authToken.getConnection();</span><br><span class="line"><span class="comment">//在系统用户中不存在对应第三方用户的记录</span></span><br><span class="line">        String userId = <span class="keyword">this</span>.toUserId(connection);</span><br><span class="line">        <span class="keyword">if</span>(userId == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//扔出这个异常，会跳转到注册</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(<span class="string">"Unknown access token"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            UserDetails userDetails = <span class="keyword">this</span>.userDetailsService.loadUserByUserId(userId);</span><br><span class="line">            <span class="keyword">if</span>(userDetails == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(<span class="string">"Unknown connected account id"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> SocialAuthenticationToken(connection, userDetails, authToken.getProviderAccountData(), <span class="keyword">this</span>.getAuthorities(providerId, userDetails));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据Connection获取系统用户的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">toUserId</span><span class="params">(Connection&lt;?&gt; connection)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; userIds = <span class="keyword">this</span>.usersConnectionRepository.findUserIdsWithConnection(connection);</span><br><span class="line">        <span class="keyword">return</span> userIds.size() == <span class="number">1</span>?(String)userIds.iterator().next():<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>SocialAuthenticationFilter源码跟踪</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocialAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationProcessingFilter</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Authentication <span class="title">doAuthentication</span><span class="params">(SocialAuthenticationService&lt;?&gt; authService, HttpServletRequest request, SocialAuthenticationToken token)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(!authService.getConnectionCardinality().isAuthenticatePossible()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            token.setDetails(<span class="keyword">this</span>.authenticationDetailsSource.buildDetails(request));</span><br><span class="line">            Authentication success = <span class="keyword">this</span>.getAuthenticationManager().authenticate(token);</span><br><span class="line">            Assert.isInstanceOf(SocialUserDetails.class, success.getPrincipal(), <span class="string">"unexpected principle type"</span>);</span><br><span class="line">            <span class="keyword">this</span>.updateConnections(authService, token, success);</span><br><span class="line">            <span class="keyword">return</span> success;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (BadCredentialsException var5) &#123;</span><br><span class="line"><span class="comment">//捕获到该异常就会进行跳转到默认的注册页或者自定义的注册页</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.signupUrl != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.sessionStrategy.setAttribute(<span class="keyword">new</span> ServletWebRequest(request), ProviderSignInAttempt.SESSION_ATTRIBUTE, <span class="keyword">new</span> ProviderSignInAttempt(token.getConnection()));</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SocialAuthenticationRedirectException(<span class="keyword">this</span>.buildSignupUrl(request));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> var5;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h6><ol><li>开启指定的注册页面</li></ol><p>1）新增一个注册页面，并且将注册页面url实现可配置化，并且通知SocialConfiguer注册页，并放开注册页的访问权限。</p><p>在以上<code>SocialConfig.java</code>代码展示中已经配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置注册地址</span></span><br><span class="line">configurer.signupUrl(securityProperties.getBrowser().getSignUpUrl())</span><br></pre></td></tr></table></figure><p>2）社交用户信息的传递</p><p>当我们在授权获取用户信息后，跳到了注册页上，那么怎么将第三方用户信息传递到注册页面上，注册后，怎么告诉social，刚注册的用户怎么关联上授权用户的信息；Spring 提供了工具类，解决问题：①注册时拿到spring social 信息；②注册完成如何传递用户id给spring social</p><p><code>SocialConfig.java</code>中的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring social 提供的工具类，可以获取获取到的第三方用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connectionFactoryLocator spring boot 已经有此类的实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> ProviderSignInUtils</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ProviderSignInUtils <span class="title">providerSignInUtils</span><span class="params">(ConnectionFactoryLocator connectionFactoryLocator)</span> </span>&#123;</span><br><span class="line">UsersConnectionRepository usersConnectionRepository = getUsersConnectionRepository(connectionFactoryLocator);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ProviderSignInUtils(connectionFactoryLocator,usersConnectionRepository);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ProviderSignInUtils</code>工具类需要在有session的环境下才能使用，否则无效</p><p>3）构建获取社交用户信息的服务</p><p><code>BrowserSecurityController.java</code>中新增服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ProviderSignInUtils providerSignInUtils;</span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/social/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SocialUserInfo <span class="title">getSocialUserInfo</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">   SocialUserInfo userInfo = <span class="keyword">new</span> SocialUserInfo();</span><br><span class="line">   Connection&lt;?&gt; connection = providerSignInUtils.getConnectionFromSession(<span class="keyword">new</span> ServletWebRequest(request));</span><br><span class="line">   userInfo.setProviderId(connection.getKey().getProviderId());</span><br><span class="line">   userInfo.setProviderUserId(connection.getKey().getProviderUserId());<span class="comment">//openid</span></span><br><span class="line">   userInfo.setNickname(connection.getDisplayName());</span><br><span class="line">   userInfo.setHeadimg(connection.getImageUrl());</span><br><span class="line">   <span class="keyword">return</span> userInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4）Connection信息的存储</p><p>查看<code>SocialAuthenticationFilter</code>中源码，中当需要跳转注册页面时，执行下代码，将Connection放入session中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.sessionStrategy.setAttribute(<span class="keyword">new</span> ServletWebRequest(request), ProviderSignInAttempt.SESSION_ATTRIBUTE, <span class="keyword">new</span> ProviderSignInAttempt(token.getConnection()));</span><br></pre></td></tr></table></figure><p>5）创建注册服务</p><p><code>UserController.java</code>中注册服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ProviderSignInUtils providerSignInUtils;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/regist"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(User user, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//实现注册业务，注册成功后返回用户唯一标签</span></span><br><span class="line">    <span class="comment">//实现逻辑.........</span></span><br><span class="line">   <span class="comment">//不管是注册用户还是绑定用户，都会拿到一个用户唯一标识。</span></span><br><span class="line">   String userId = user.getUsername();</span><br><span class="line">    </span><br><span class="line">   <span class="comment">//工具类实现注册关联</span></span><br><span class="line">   providerSignInUtils.doPostSignUp(userId, <span class="keyword">new</span> ServletWebRequest(request));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>开启关联注册</li></ol><p>当用户使用第三方登陆时，授权获取信息成功后，不是跳转的注册页面，而是进入系统。开启默认注册</p><p>1）源码分析</p><p><code>SocialAuthenticationProvider.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocialAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String userId = <span class="keyword">this</span>.toUserId(connection);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">toUserId</span><span class="params">(Connection&lt;?&gt; connection)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//查看是否有系统关联的用户存在</span></span><br><span class="line">    List&lt;String&gt; userIds =  <span class="keyword">this</span>.usersConnectionRepository.findUserIdsWithConnection(connection);</span><br><span class="line">    <span class="keyword">return</span> userIds.size() == <span class="number">1</span>?(String)userIds.iterator().next():<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JdbcUsersConnectionRepository.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcUsersConnectionRepository</span> <span class="keyword">implements</span> <span class="title">UsersConnectionRepository</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ConnectionSignUp connectionSignUp;<span class="comment">//对象存在时，开启默认创建用户</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findUserIdsWithConnection</span><span class="params">(Connection&lt;?&gt; connection)</span> </span>&#123;</span><br><span class="line">    ConnectionKey key = connection.getKey();</span><br><span class="line">    List&lt;String&gt; localUserIds = <span class="keyword">this</span>.jdbcTemplate.queryForList(<span class="string">"select userId from "</span> + <span class="keyword">this</span>.tablePrefix + <span class="string">"UserConnection where providerId = ? and providerUserId = ?"</span>, String.class, <span class="keyword">new</span> Object[]&#123;key.getProviderId(), key.getProviderUserId()&#125;);</span><br><span class="line">    <span class="comment">//如果没有查到对象，并且connectionSignUp对象存在</span></span><br><span class="line"><span class="keyword">if</span>(localUserIds.size() == <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.connectionSignUp != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//执行方法，返回新用户的Id</span></span><br><span class="line">        String newUserId = <span class="keyword">this</span>.connectionSignUp.execute(connection);</span><br><span class="line">        <span class="keyword">if</span>(newUserId != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.createConnectionRepository(newUserId).addConnection(connection);</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(<span class="keyword">new</span> String[]&#123;newUserId&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> localUserIds;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2） 自定义ConnectionSignUp</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义社交登陆，开启默认注册</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180303</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoConnectionSignUp</span> <span class="keyword">implements</span> <span class="title">ConnectionSignUp</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">execute</span><span class="params">(Connection&lt;?&gt; connection)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//根据业务创建逻辑,实现注册</span></span><br><span class="line">      <span class="comment">//根据社交用户信息默认创建用户并返回用户唯一标识</span></span><br><span class="line">      <span class="keyword">return</span> connection.getDisplayName();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SocialConfig.java</code>中加入<code>UserUsersConnectionRepository</code>配置中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注入</span></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> ConnectionSignUp connectionSignUp;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UsersConnectionRepository <span class="title">getUsersConnectionRepository</span><span class="params">(ConnectionFactoryLocator connectionFactoryLocator)</span> </span>&#123;</span><br><span class="line">JdbcUsersConnectionRepository repository = <span class="keyword">new</span> JdbcUsersConnectionRepository(dataSource, connectionFactoryLocator, Encryptors.noOpText());</span><br><span class="line">repository.setTablePrefix(<span class="string">"vic_"</span>);<span class="comment">//加入表前缀</span></span><br><span class="line"><span class="keyword">if</span>(connectionSignUp != <span class="keyword">null</span>) &#123;</span><br><span class="line">repository.setConnectionSignUp(connectionSignUp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> repository;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h6><ol><li>问题：</li></ol><p>这里我遇到了一个问题：</p><p>SocialAuthenticationProvider中使用的是InMemoryUsersConnectionRepository导致无法通过验证，每次都要重新注册，但是我们明明已经配置好JdbcUsersConnectionRepository为默认的操作数据库Connection，很奇怪的是我们在注册时候调用ProviderSignInUtils的自动注册方法，确是使用JdbcUsersConnectionRepository</p><p><strong>SocialAuthenticationProvider中的UsersConnectionRepository为InMemoryUsersConnectionRepository</strong></p><p><strong>ProviderSignInUtils中的UsersConnectionRepository为JdbcUsersConnectionRepository</strong></p><ol start="2"><li>源码分析：</li></ol><p><code>SocialConfiguration.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocialConfiguration</span> </span>&#123;</span><br><span class="line">   <span class="comment">//会在set方法中注入所有的socialConfigurers ， QQAutoConfig等都实现了此接口</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SocialConfigurer&gt; socialConfigurers;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UsersConnectionRepository <span class="title">usersConnectionRepository</span><span class="params">(ConnectionFactoryLocator connectionFactoryLocator)</span> </span>&#123;</span><br><span class="line">        UsersConnectionRepository usersConnectionRepository = <span class="keyword">null</span>;</span><br><span class="line">        Iterator i$ = <span class="keyword">this</span>.socialConfigurers.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找到多个接口的实现进行遍历</span></span><br><span class="line">        <span class="keyword">while</span>(i$.hasNext()) &#123;</span><br><span class="line">            SocialConfigurer socialConfigurer = (SocialConfigurer)i$.next();</span><br><span class="line">            <span class="comment">//调用方法获取UsersConnectionRepository</span></span><br><span class="line">            UsersConnectionRepository ucrCandidate = socialConfigurer.getUsersConnectionRepository(connectionFactoryLocator);</span><br><span class="line">            <span class="keyword">if</span>(ucrCandidate != <span class="keyword">null</span>) &#123;</span><br><span class="line">                usersConnectionRepository = ucrCandidate;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Assert.notNull(usersConnectionRepository, <span class="string">"One configuration class must implement getUsersConnectionRepository from SocialConfigurer."</span>);</span><br><span class="line">        <span class="keyword">return</span> usersConnectionRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>socialConfigurer.getUsersConnectionRepository(connectionFactoryLocator);</code></p><p>如果子类没有覆盖方法，则会默认调用父类的获取UsersConnectionRepository方法，返回的就是InMemoryUsersConnectionRepository</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SocialConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">SocialConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UsersConnectionRepository <span class="title">getUsersConnectionRepository</span><span class="params">(ConnectionFactoryLocator connectionFactoryLocator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InMemoryUsersConnectionRepository(connectionFactoryLocator);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>分析：</li></ol><p>因为初始化顺序的问题，<code>SocialConfiguration</code>中有多个，例如<code>QQAutoConfig</code>，在遍历寻找UserConnectionRepository中</p><p><code>socialConfigurer.getUsersConnectionRepository(connectionFactoryLocator);</code>,则调用父类返回默认的<code>InMemoryUsersConnectionRepository</code></p><ol start="4"><li>解决：</li></ol><p>在自定义<code>SocialConfiguration</code>实现类中，覆盖其父类的<code>getUsersConnectionRepository</code>方法，返回<code>null</code>则可以解决这个问题，返回<code>null</code>时则会继续遍历下一个，直达在总配置<code>SocialConfig</code>返回我们覆盖的获得该类的方法</p><p>修改配置，微信配置也如此</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQAutoConfig</span> <span class="keyword">extends</span> <span class="title">SocialAutoConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为了解决生产多个连接工厂，覆盖父类的连接工厂创建</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connectionFactoryLocator</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> UsersConnectionRepository <span class="title">getUsersConnectionRepository</span><span class="params">(ConnectionFactoryLocator connectionFactoryLocator)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="社交账号的绑定与解绑"><a href="#社交账号的绑定与解绑" class="headerlink" title="社交账号的绑定与解绑"></a>社交账号的绑定与解绑</h5><p>系统当前用户需要绑定第三方账号或系统当前用户解绑第三方账号</p><p>绑定的流程跟社交登陆的流程是大同小异的；解绑实现逻辑比较简单，是从数据库中删除当前账户与第三方账户的记录</p><h6 id="绑定信息"><a href="#绑定信息" class="headerlink" title="绑定信息"></a>绑定信息</h6><p>Spring Security默认提供当前账户绑定信息的服务,服务的请求地址为<code>/conncet</code>,访问的方式的<code>POST</code></p><p><code>ConnectController.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"/connect"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectController</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(</span><br><span class="line">    method = &#123;RequestMethod.GET&#125;</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">connectionStatus</span><span class="params">(NativeWebRequest request, Model model)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setNoCache(request);</span><br><span class="line">    <span class="keyword">this</span>.processFlash(request, model);</span><br><span class="line"><span class="comment">//当前用户所有的绑定信息</span></span><br><span class="line">    Map&lt;String, List&lt;Connection&lt;?&gt;&gt;&gt; connections = <span class="keyword">this</span>.connectionRepository.findAllConnections();</span><br><span class="line"><span class="comment">//获得所有的第三方支持</span></span><br><span class="line">    model.addAttribute(<span class="string">"providerIds"</span>, <span class="keyword">this</span>.connectionFactoryLocator.registeredProviderIds());</span><br><span class="line"><span class="comment">//将用户信息放进model</span></span><br><span class="line">    model.addAttribute(<span class="string">"connectionMap"</span>, connections);</span><br><span class="line"><span class="comment">//返回视图名字:/connect/status</span></span><br><span class="line"><span class="comment">//spring默认没有提供这个视图，需要进行自定义</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.connectView();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法中获取了当前账户所有的,并且已经在系统中配置了的第三方应用的绑定信息,并且存入Model中.</p><p><strong>自定义回显视图<code>connect/status</code></strong></p><ol><li>定义可扩展输出借口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为扩展提供spring 社交绑定状态信息返回提供接口</span></span><br><span class="line"><span class="comment"> * 各个模块可实现该接口逻辑进行状态信息的输出</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractConnectionViewProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现社交绑定状态信息（内容自定义）的输出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model spring social 在ConnectController内存将此属性填充,含有属性:providerIds、connectionMap等，我们只需要用就可以了</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">outputModel</span><span class="params">(Map&lt;String, Object&gt; model, HttpServletRequest request,HttpServletResponse response)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现视图定义</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 社交账号绑定状态视图</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"connect/status"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractConnectionStatusView</span> <span class="keyword">extends</span> <span class="title">AbstractView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AbstractConnectionViewProcessor abstractConnectionViewProcessor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(Map&lt;String, Object&gt; model, HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">abstractConnectionViewProcessor.outputModel(model,request,response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义<code>AbstractConnectionViewProcessor</code>借口默认实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认提供的输出社交绑定信息的实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultConnectionViewProcessor</span> <span class="keyword">implements</span> <span class="title">AbstractConnectionViewProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultConnectionViewProcessor</span><span class="params">(ObjectMapper objectMapper)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.objectMapper = objectMapper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputModel</span><span class="params">(Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Map&lt;String, List&lt;Connection&lt;?&gt;&gt;&gt; connections = (Map&lt;String, List&lt;Connection&lt;?&gt;&gt;&gt;) model.get(<span class="string">"connectionMap"</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Boolean&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String key : connections.keySet()) &#123;</span><br><span class="line">            result.put(key, CollectionUtils.isNotEmpty(connections.get(key)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">        response.getWriter().write(objectMapper.writeValueAsString(result));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>配置输出接口</li></ol><p>在社交总配置<code>SocialConfig.java</code>代码中,已经贴出了相关配置:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置默认的社交绑定状态信息输出器</span></span><br><span class="line"><span class="comment"> * 可扩展</span></span><br><span class="line"><span class="comment"> * 子模块为定义,则使用默认提供的输出类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(AbstractConnectionViewProcessor.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> AbstractConnectionViewProcessor <span class="title">connectionViewProcessor</span><span class="params">(ObjectMapper objectMapper)</span></span>&#123;</span><br><span class="line">DefaultConnectionViewProcessor processor = <span class="keyword">new</span> DefaultConnectionViewProcessor(objectMapper);</span><br><span class="line"><span class="keyword">return</span> processor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="绑定与解绑"><a href="#绑定与解绑" class="headerlink" title="绑定与解绑"></a>绑定与解绑</h6><p><strong>绑定与解绑的实现</strong></p><p>Spring Social已经实现了绑定与解绑的逻辑,提供了<code>/connect/providerId</code>服务,根据请求方法的不同,执行不同的业务处理,POST方式进行绑定,DELETE方式进行解绑,与绑定信息的获取同属与同一个类中,<code>providerId</code>代表系统已经配置好的服务提供商的id</p><ol><li>源码分析</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"/connect"</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectController</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(</span><br><span class="line">        value = &#123;<span class="string">"/&#123;providerId&#125;"</span>&#125;,</span><br><span class="line">        method = &#123;RequestMethod.POST&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="comment">//跳转到授权</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedirectView <span class="title">connect</span><span class="params">(@PathVariable String providerId, NativeWebRequest request)</span> </span>&#123;</span><br><span class="line">        ConnectionFactory&lt;?&gt; connectionFactory = <span class="keyword">this</span>.connectionFactoryLocator.getConnectionFactory(providerId);</span><br><span class="line">        MultiValueMap&lt;String, String&gt; parameters = <span class="keyword">new</span> LinkedMultiValueMap();</span><br><span class="line">        <span class="keyword">this</span>.preConnect(connectionFactory, parameters, request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> RedirectView(<span class="keyword">this</span>.connectSupport.buildOAuthUrl(connectionFactory, request, parameters));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var6) &#123;</span><br><span class="line">            <span class="keyword">this</span>.sessionStrategy.setAttribute(request, <span class="string">"social_provider_error"</span>, var6);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.connectionStatusRedirect(providerId, request);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得授权码,根据授权码获取token,用户信息,最后返回一个Connection</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(</span><br><span class="line">        value = &#123;<span class="string">"/&#123;providerId&#125;"</span>&#125;,</span><br><span class="line">        method = &#123;RequestMethod.GET&#125;,</span><br><span class="line">        params = &#123;<span class="string">"code"</span>&#125;</span><br><span class="line">    )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedirectView <span class="title">oauth2Callback</span><span class="params">(@PathVariable String providerId, NativeWebRequest request)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            OAuth2ConnectionFactory&lt;?&gt; connectionFactory = (OAuth2ConnectionFactory)<span class="keyword">this</span>.connectionFactoryLocator.getConnectionFactory(providerId);</span><br><span class="line">            Connection&lt;?&gt; connection = <span class="keyword">this</span>.connectSupport.completeConnection(connectionFactory, request);</span><br><span class="line">            <span class="keyword">this</span>.addConnection(connection, connectionFactory, request);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">            <span class="keyword">this</span>.sessionStrategy.setAttribute(request, <span class="string">"social_provider_error"</span>, var5);</span><br><span class="line">            logger.warn(<span class="string">"Exception while handling OAuth2 callback ("</span> + var5.getMessage() + <span class="string">"). Redirecting to "</span> + providerId + <span class="string">" connection status page."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.connectionStatusRedirect(providerId, request);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping</span>(</span><br><span class="line">        value = &#123;<span class="string">"/&#123;providerId&#125;"</span>&#125;,</span><br><span class="line">        method = &#123;RequestMethod.DELETE&#125;</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//解绑业务,进行数据库记录的解绑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedirectView <span class="title">removeConnections</span><span class="params">(@PathVariable String providerId, NativeWebRequest request)</span> </span>&#123;</span><br><span class="line">        ConnectionFactory&lt;?&gt; connectionFactory = <span class="keyword">this</span>.connectionFactoryLocator.getConnectionFactory(providerId);</span><br><span class="line">        <span class="keyword">this</span>.preDisconnect(connectionFactory, request);</span><br><span class="line">        <span class="keyword">this</span>.connectionRepository.removeConnections(providerId);</span><br><span class="line">        <span class="keyword">this</span>.postDisconnect(connectionFactory, request);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.connectionStatusRedirect(providerId, request);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>绑定与解绑返回的视图</strong></p><p>从上面列中源码中绑定的两个方法,则是走OAuth协议,与之前的实现QQ,微信登录流程是一样的,绑定成功与解绑成功后会跳转指定的视图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">connectView</span><span class="params">(String providerId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getViewPath() + providerId + <span class="string">"Connect"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">connectedView</span><span class="params">(String providerId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getViewPath() + providerId + <span class="string">"Connected"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>而且,sping social并未提供该视图,因此需要自定义</p><ol><li>定义绑定与解绑视图处理器接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象的绑定成功与解绑成功信息回显处理器</span></span><br><span class="line"><span class="comment"> * 实现可扩展接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180322</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbstractBindingProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现社交绑定与解绑的信息输出</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model 包含解绑和绑定成功后的一些信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request 请求体</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response 响应体</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">outputModel</span><span class="params">(Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义默认的视图处理器实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认的绑定与解绑处理器实现类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180322</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultBindingProcessor</span> <span class="keyword">implements</span> <span class="title">AbstractBindingProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">outputModel</span><span class="params">(Map&lt;String, Object&gt; model, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        <span class="keyword">if</span> (model.get(<span class="string">"connections"</span>) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h3&gt;解绑成功&lt;/h3&gt;"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            response.getWriter().write(<span class="string">"&lt;h3&gt;绑定成功&lt;/h3&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义绑定与解绑视图</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring security 处理第三方登陆解绑与绑定返回结果视图</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractConnectBindingView</span> <span class="keyword">extends</span> <span class="title">AbstractView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AbstractBindingProcessor abstractBindingProcessor;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractConnectBindingView</span><span class="params">(AbstractBindingProcessor abstractBindingProcessor)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.abstractBindingProcessor = abstractBindingProcessor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">renderMergedOutputModel</span><span class="params">(Map&lt;String, Object&gt; model, HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">abstractBindingProcessor.outputModel(model,request,response);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>视图的配置</li></ol><p><code>QQAutoConfig.java</code>中增加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(&#123;<span class="string">"connect/qqConnect"</span>, <span class="string">"connect/qqConnected"</span>&#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"qqBindingView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">qqBindingView</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AbstractConnectBindingView(<span class="keyword">new</span> DefaultBindingProcessor());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WeixinAutoConfiguration.java</code>中增加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>(&#123;<span class="string">"connect/weixinConnect"</span>, <span class="string">"connect/weixinConnected"</span>&#125;)</span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"weixinBindingView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> View <span class="title">weixinBindingView</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AbstractConnectBindingView(<span class="keyword">new</span> DefaultBindingProcessor());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>使用 Maven Module 搭建spring boot项目（整合Spring Security、Spring Social、spring OAuth）二</title>
      <link href="/2018/07/12/spring_security/2.SpringSecurityFormAuthentication/"/>
      <url>/2018/07/12/spring_security/2.SpringSecurityFormAuthentication/</url>
      <content type="html"><![CDATA[<h1 id="使用-Maven-Module-搭建spring-boot项目（整合Spring-Security、Spring-Social、spring-OAuth）二"><a href="#使用-Maven-Module-搭建spring-boot项目（整合Spring-Security、Spring-Social、spring-OAuth）二" class="headerlink" title="使用 Maven Module 搭建spring boot项目（整合Spring Security、Spring Social、spring OAuth）二"></a>使用 Maven Module 搭建spring boot项目（整合Spring Security、Spring Social、spring OAuth）二</h1><table><thead><tr><th>版本号</th><th>作者</th><th>日期</th><th>备注</th></tr></thead><tbody><tr><td>V0.1</td><td>huangz</td><td>2018-04-03</td><td>初稿</td></tr></tbody></table><hr><h2 id="Spring-Security-开发基于表单的认证"><a href="#Spring-Security-开发基于表单的认证" class="headerlink" title="Spring Security 开发基于表单的认证"></a>Spring Security 开发基于表单的认证</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​    在以上开发的RESTful服务中，都是一种暴露而不安全的服务，任何人都可以随意访问。需要对访问进行合理的权限分配，对用户的身份进行认证和授权，保证服务的安全性和合法性，spring security 框架就是基于此而诞生的。</p><p><strong>Spring Security 核心功能：</strong></p><ol><li>认证（你是谁）</li><li>授权（你能做什么）</li><li>攻击防护（防止伪造身份）</li></ol><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h3><h4 id="开启Spring-Security"><a href="#开启Spring-Security" class="headerlink" title="开启Spring Security"></a>开启Spring Security</h4><p>​    在默认情况下，Spring Security 服务器中所有的服务都保护起来了，要访问某一个服务，都需要进行身份验证。</p><p>在<code>application.properties</code>中添加启动配置，默认开启<code>HttpBasic</code>方式进行验证</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># spring security 默认配置(默认为true)</span></span><br><span class="line"><span class="string">security.basic.enabled</span> <span class="string">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>若在未进行配置的情况下，用户名默认为<code>user</code>，并且登陆密码会在启动时临时生成，并在控制台输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Using default security password: 99066b9e-054f-496f-9f29-4014eee36109</span><br></pre></td></tr></table></figure><h4 id="自定义安全验证"><a href="#自定义安全验证" class="headerlink" title="自定义安全验证"></a>自定义安全验证</h4><ol><li>目的：写出重用的模块，跟认证授权相应的代码都写在相应的项目中，并可以被其他模块引用</li><li>更改默认的验证方式，在浏览器项目中创建配置类，开启自定义配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WebSecurityConfigurerAdapter: Spring Security 在web应用上配置适配器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Spring Security 默认配置的代码演示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">//最简单的配置</span></span><br><span class="line"><span class="comment">//http.httpBasic()//使用httpbasic验证，默认使用</span></span><br><span class="line">      http.formLogin()<span class="comment">//使用表单验证的意思</span></span><br><span class="line">            .and()<span class="comment">//</span></span><br><span class="line">            .authorizeRequests()<span class="comment">//对请求做授权</span></span><br><span class="line">            .anyRequest()<span class="comment">//任何请求</span></span><br><span class="line">            .authenticated();<span class="comment">//都需要身份验证</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>启动服务后，系统的认证方式从<code>HttpBasic</code>更改为<code>Form</code>方法</li></ol><h4 id="Security基本原理"><a href="#Security基本原理" class="headerlink" title="Security基本原理"></a>Security基本原理</h4><h5 id="核心类简单介绍"><a href="#核心类简单介绍" class="headerlink" title="核心类简单介绍"></a>核心类简单介绍</h5><p>​    Spring security 最核心的是一组过滤器链(一组Filter)，所有的功能都是建立在此基础上的，绿色中的过滤器是Spring security最核心的过滤器，作用是验证用户身份，每一种过滤器用来处理一种认证方式</p><p><img src="images/security-core-classes-introduction.png" alt=""></p><p><code>UsernamePasswordAuthenticationFilter</code> ：处理表单登陆验证</p><p><code>BasicAuthenticationFilter</code> ：处理<code>HttpBasic</code>登陆验证</p><p><code>FilterSecurityInterceptor</code> ：核心过滤链中最后一关，依据配置，判断当前请求能不能访问REST服务，如果不匹配，则抛出异常（根据不同原因）</p><p><code>ExceptionTranslationFilter</code> ：捕获<code>FilterSecurityInterceptor</code>抛出的异常并处理(例如引导用户到登陆页面)</p><p>​    <strong>通过配置可以选用绿色的过滤器，但非绿色的过滤器一定会在过滤器链上执行(<code>FilterSecurityInterceptor</code>不能关闭，<code>ExceptionTranslationFilter</code>一定在<code>FilterSecurityInterceptor</code>前)</strong></p><h5 id="内部流程解析"><a href="#内部流程解析" class="headerlink" title="内部流程解析"></a>内部流程解析</h5><ol><li>访问访问已经配置好受保护的REST服务: <code>&lt;http://localhost:8080/user&gt;</code></li><li>进入<code>FilterSecurityInterceptor</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterSecurityInterceptor</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(FilterInvocation fi)</span></span>&#123;</span><br><span class="line">InterceptorStatusToken token = <span class="keyword">super</span>.beforeInvocation(fi);<span class="comment">//验证，不符合抛出异常</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>抛出异常，被捕获</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTranslationFilter</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行下一个过滤器，也就是FilterSecurityInterceptor</span></span><br><span class="line">    chain.doFilter(request, response);</span><br><span class="line">    <span class="keyword">this</span>.logger.debug(<span class="string">"Chain processed normally"</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException var9) &#123;</span><br><span class="line">    <span class="keyword">throw</span> var9;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">            <span class="comment">//抛出异常，捕获</span></span><br><span class="line">    Throwable[] causeChain = <span class="keyword">this</span>.throwableAnalyzer.determineCauseChain(var10);</span><br><span class="line">    RuntimeException ase = (AuthenticationException)<span class="keyword">this</span>.throwableAnalyzer.getFirstThrowableOfType(AuthenticationException.class, causeChain);</span><br><span class="line">            <span class="keyword">if</span>(ase == <span class="keyword">null</span>) &#123;</span><br><span class="line">                ase = (AccessDeniedException)<span class="keyword">this</span>.throwableAnalyzer.getFirstThrowableOfType(AccessDeniedException.class, causeChain);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.handleSpringSecurityException(request, response, chain, (RuntimeException)ase);<span class="comment">//处理异常，并且引导用户处理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>引导用户登陆，用户登陆完毕</li><li>进入用户名密码校验过滤器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsernamePasswordAuthenticationFilter</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.postOnly &amp;&amp; !request.getMethod().equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">"Authentication method not supported: "</span> + request.getMethod());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        String username = <span class="keyword">this</span>.obtainUsername(request);</span><br><span class="line">        String password = <span class="keyword">this</span>.obtainPassword(request);</span><br><span class="line">        <span class="keyword">if</span>(username == <span class="keyword">null</span>) &#123;</span><br><span class="line">            username = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(password == <span class="keyword">null</span>) &#123;</span><br><span class="line">            password = <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        username = username.trim();</span><br><span class="line">        UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, password);</span><br><span class="line">        <span class="keyword">this</span>.setDetails(request, authRequest);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>进入<code>FilterSecurityInterceptor</code>，再次验证，通过验证，进入服务，服务返回数据</li></ol><h4 id="自定义认证逻辑"><a href="#自定义认证逻辑" class="headerlink" title="自定义认证逻辑"></a>自定义认证逻辑</h4><h5 id="Security处理用户信息校验逻辑"><a href="#Security处理用户信息校验逻辑" class="headerlink" title="Security处理用户信息校验逻辑"></a>Security处理用户信息校验逻辑</h5><p>Spring Security 提供两个接口<code>UserDetailService</code>与<code>UserDetail</code>，用于校验用户信息逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.security.core.userdetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="function">UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.security.core.userdetails;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.GrantedAuthority;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 封装了spring security 登陆所需要的所有信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetails</span> <span class="keyword">extends</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    Collection&lt;? extends GrantedAuthority&gt; getAuthorities();<span class="comment">//权限信息</span></span><br><span class="line">    <span class="function">String <span class="title">getPassword</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getUsername</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 以下四个方法是可以实现自定义校验逻辑的</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonExpired</span><span class="params">()</span></span>;<span class="comment">//账户没有过期返回true</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isAccountNonLocked</span><span class="params">()</span></span>;<span class="comment">//账户是不是被锁定了(冻结)</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isCredentialsNonExpired</span><span class="params">()</span></span>;<span class="comment">//密码是否过期</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEnabled</span><span class="params">()</span></span>;<span class="comment">//账户是不是可用(是否逻辑删除)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="自定义处理用户信息校验逻辑"><a href="#自定义处理用户信息校验逻辑" class="headerlink" title="自定义处理用户信息校验逻辑"></a>自定义处理用户信息校验逻辑</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  模拟注入Dao或Mapper</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Autowired</span></span><br><span class="line">    <span class="comment">//private UserDao userDao;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开发中，所有的动态数据都需要从数据库中或其他数据储存介质读取</span></span><br><span class="line"><span class="comment">     * 包括权限列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//模拟根据用户名使用Dao或Mapper寻找用户</span></span><br><span class="line">        logger.info(<span class="string">"登陆用户名： "</span> + username);</span><br><span class="line">        <span class="comment">//User:spring security框架提供的一个实现了UserDetails接口的实现类</span></span><br><span class="line">        <span class="comment">//三个参数:username,password,authorities：授权</span></span><br><span class="line">        <span class="comment">//分割String类型为授权集合</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(username,<span class="string">"123456"</span>, AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="keyword">super</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码返回了一个User类，是Spring Security默认提供的一个UserDetails接口实现类，以上的构造器传入了3个参数，但是没有传入账号是否过期、是否被锁定，密码是否过期，是否可用(是否逻辑删除)等属性参数，这样默认都为true，账号可用。</p><p>若需要增加账号其他逻辑判断，则可以修改为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(username,<span class="string">"123456"</span>,<span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span></span><br><span class="line">                AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="string">"admin"</span>));</span><br></pre></td></tr></table></figure><h5 id="处理密码加解密"><a href="#处理密码加解密" class="headerlink" title="处理密码加解密"></a>处理密码加解密</h5><ol><li>Spring Security 提供密码加密的接口，并且提供一个常用的密码处理类<code>BCryptPasswordEncoder</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.security.crypto.password;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PasswordEncoder</span> </span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* var1:原始密码</span></span><br><span class="line"><span class="comment">* return:返回加密后的密码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function">String <span class="title">encode</span><span class="params">(CharSequence var1)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户输入的密码与数据库密码进行匹配</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(CharSequence var1, String var2)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>配置Spring Security提供的密码加密类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置一个PasswordEncoder加密的实现类</span></span><br><span class="line"><span class="comment">    * 可以自定义加密类如使用MD5、SHA1等实现加密逻辑然后实现PasswordEncoder</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> PasswordEncoder <span class="title">passwordEncoder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在后台出，从数据库中读取出的密码应是用户注册时已经通过加密添加入数据库中。在UserDetails返回后，spring security 会从前台传过来的密码进行加密后，才会跟我们生成的UserDetails中的密码进行比对。</li><li><code>BCryptPasswordEncoder</code>是Spring 提供的一个强大的密码加密工具类，同样的字符串进行加密，每次结果都会不一样，加密时，使用随机盐进行对取得得密码再次进行处理。安全性更强大。</li></ol><p>对于<code>BCryptPasswordEncoder</code>的强大，原理还不清楚，在网上查了些资料，如下：</p><blockquote><p>spring security中的BCryptPasswordEncoder方法采用SHA-256 +随机盐+密钥对密码进行加密。SHA系列是Hash算法，不是加密算法，使用加密算法意味着可以解密（这个与编码/解码一样），但是采用Hash处理，其过程是不可逆的。</p></blockquote><blockquote><p>加密(encode)：注册用户时，使用SHA-256+随机盐+密钥把用户输入的密码进行hash处理，得到密码的hash值，然后将其存入数据库中。</p></blockquote><blockquote><p>密码匹配(matches)：用户登录时，密码匹配阶段并没有进行密码解密（因为密码经过Hash处理，是不可逆的），而是使用相同的算法把用户输入的密码进行hash处理，得到密码的hash值，然后将其与从数据库中查询到的密码hash值进行比较。如果两者相同，说明用户输入的密码正确。</p></blockquote><blockquote><p>这正是为什么处理密码时要用hash算法，而不用加密算法。因为这样处理即使数据库泄漏，黑客也很难破解密码（破解密码只能用彩虹表）。</p></blockquote><h4 id="个性化认证流程"><a href="#个性化认证流程" class="headerlink" title="个性化认证流程"></a>个性化认证流程</h4><p>一定要注意spring boot默认资源位置，不然会出现404状态</p><p>Spring boot 默认将/**所有访问映射到以下目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">classpath:/static</span><br><span class="line">classpath:/public</span><br><span class="line">classpath:/resources</span><br><span class="line">classpath:/META-INF/resources/</span><br></pre></td></tr></table></figure><h5 id="自定义登陆页面"><a href="#自定义登陆页面" class="headerlink" title="自定义登陆页面"></a>自定义登陆页面</h5><h6 id="页面请求配置"><a href="#页面请求配置" class="headerlink" title="页面请求配置"></a>页面请求配置</h6><ol><li>修改配置</li></ol><p>在核心配置中添加<code>loginPage</code>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//最简单的配置</span></span><br><span class="line">   <span class="comment">//http.httpBasic()//使用httpbasic验证，默认使用</span></span><br><span class="line">   http.formLogin()<span class="comment">//使用表单验证的意思</span></span><br><span class="line">         .loginPage(<span class="string">"/vic-login.html"</span>)</span><br><span class="line">         .and()<span class="comment">//</span></span><br><span class="line">         .authorizeRequests()<span class="comment">//对请求做授权</span></span><br><span class="line">         .anyRequest()<span class="comment">//任何请求</span></span><br><span class="line">         .authenticated();<span class="comment">//都需要身份验证</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>资源目录下添加相应的页面</li></ol><p>在资源目录下<code>resources/vic-login.html</code>增加相应页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h2</span>&gt;</span>标准登录页面<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>表单登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/authentication/form"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>密码:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">         <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>启动服务</li></ol><p>页面错误，提示：ERR_TOO_MANY_REDIRECTS（重定向过多）</p><p>原因：需要验证登陆时，需要跳转到<code>vic-login.html</code>，但本身<code>vic-login.html</code>也需要授权(在前面配置中,对所有访问都实行了验证)，因此会陷入一个死循环</p><p>解决：增加配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin()<span class="comment">//使用表单验证的意思</span></span><br><span class="line">      .loginPage(<span class="string">"/vic-login.html"</span>)</span><br><span class="line">      .and()<span class="comment">//</span></span><br><span class="line">      .authorizeRequests()<span class="comment">//对请求做授权</span></span><br><span class="line">      .antMatchers(<span class="string">"/vic-login.html"</span>).permitAll()</span><br><span class="line">      .anyRequest()<span class="comment">//任何请求</span></span><br><span class="line">      .authenticated();<span class="comment">//都需要身份验证</span></span><br></pre></td></tr></table></figure><ol start="4"><li>处理登陆请求</li></ol><p>在我们的页面中，表达提交的地址定位到<code>/authentication/form</code> ，但在Spring Security  <code>UsernamePasswordAuthenticationFilter.java</code>默认配置中处理的是<code>/login</code> 请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UsernamePasswordAuthenticationFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(<span class="keyword">new</span> AntPathRequestMatcher(<span class="string">"/login"</span>, <span class="string">"POST"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此引入自定义配置的处理登陆请求的地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin()<span class="comment">//使用表单验证的意思</span></span><br><span class="line">         .loginPage(<span class="string">"/vic-login.html"</span>)<span class="comment">//自定义登陆页面</span></span><br><span class="line">         .loginProcessingUrl(<span class="string">"/authentication/form"</span>)<span class="comment">//登陆页面登陆跳转地址</span></span><br><span class="line">         .and()<span class="comment">//</span></span><br><span class="line">         .authorizeRequests()<span class="comment">//对请求做授权</span></span><br><span class="line">         .antMatchers(<span class="string">"/vic-login.html"</span>).permitAll()</span><br><span class="line">         .anyRequest()<span class="comment">//任何请求</span></span><br><span class="line">         .authenticated();<span class="comment">//都需要身份验证</span></span><br></pre></td></tr></table></figure><ol start="5"><li>启动报错</li></ol><p>控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">This application has no explicit mapping for /error, so you are seeing this as a fallback.</span><br><span class="line"></span><br><span class="line">Fri Oct 06 14:49:33 CST 2017</span><br><span class="line">There was an unexpected error (type=Forbidden, status=403).</span><br><span class="line">Could not verify the provided CSRF token because your session was not found.</span><br></pre></td></tr></table></figure><p>原因：spring security 默认情况下提供了一个叫跨站请求伪造的一个防护</p><p>解决：修改配置，暂时关闭请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin()<span class="comment">//使用表单验证的意思</span></span><br><span class="line">        .loginPage(<span class="string">"/vic-login.html"</span>)<span class="comment">//自定义登陆页面</span></span><br><span class="line">        .loginProcessingUrl(<span class="string">"/authentication/form"</span>)<span class="comment">//登陆页面登陆跳转地址</span></span><br><span class="line">        .and()<span class="comment">//</span></span><br><span class="line">        .authorizeRequests()<span class="comment">//对请求做授权</span></span><br><span class="line">        .antMatchers(<span class="string">"/vic-login.html"</span>).permitAll()</span><br><span class="line">        .anyRequest()<span class="comment">//任何请求</span></span><br><span class="line">        .authenticated()<span class="comment">//都需要身份验证</span></span><br><span class="line">        .and()</span><br><span class="line">        .csrf().disable();<span class="comment">//关闭跨站伪造服务</span></span><br></pre></td></tr></table></figure><hr><h6 id="服务请求配置"><a href="#服务请求配置" class="headerlink" title="服务请求配置"></a>服务请求配置</h6><p>​    虽然现在可以使用自定义的登陆页面，但是离我们的目标还是有点距离的。我们在页面上请求我们的RESTful服务请求，我们处理是返回一个自定义的html页面，这个是不合理的，RestFul服务应该返回的是状态码或者是json数据，但我们返回的是一个html，如果是html请求，那么我们应该返回是html，不是则返回json（理应想spring security的错误处理机制一样）。我们的目标是实现一个可重用的模块，可重用的目标是，有多个模块使用同一个模块，但是不可能所有的模块都使用这一个我们刚刚自定义的登陆页面。如果定义其他模块可以使用自己的页面，如果不配置就使用我们默认的配置页面</p><p><img src="images/handlerequest.png" alt=""></p><ol><li>创建处理服务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 把当前请求缓存到session里</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> RequestCache requestCache = <span class="keyword">new</span> HttpSessionRequestCache();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Spring security 提供的一个跳转工具</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> RedirectStrategy redirectStrategy = <span class="keyword">new</span> DefaultRedirectStrategy();</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> SecurityProperties securityProperties;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当需要身份认证时，跳转到这里</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 包装后的错误信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@RequestMapping(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL)</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/authentication/require"</span>)</span><br><span class="line"><span class="meta">@ResponseStatus</span>(code = HttpStatus.UNAUTHORIZED)<span class="comment">//返回状态码 401未授权</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SimpleResponse <span class="title">requireAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span><span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">   SavedRequest savedRequest = requestCache.getRequest(request, response);<span class="comment">//获取引发跳转的请求</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (savedRequest != <span class="keyword">null</span>) &#123;</span><br><span class="line">      String targetUrl = savedRequest.getRedirectUrl();</span><br><span class="line">      logger.info(<span class="string">"引发跳转的请求是:"</span> + targetUrl);</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.endsWithIgnoreCase(targetUrl, <span class="string">".html"</span>)) &#123;<span class="comment">//判断跳转url是否以.html结尾</span></span><br><span class="line">         redirectStrategy.sendRedirect(request, response, securityProperties.getBrowser().getLoginPage());<span class="comment">//用户定义或系统默认</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//如果不是html请求，那么返回一个自定义对象作为json数据返回</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> SimpleResponse(<span class="string">"访问的服务需要身份认证，请引导用户到登录页"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义信息回显包装类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回信息实体包装</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleResponse</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">SimpleResponse</span><span class="params">(Object content)</span></span>&#123; <span class="keyword">this</span>.content = content; &#125;</span><br><span class="line"><span class="comment">//定义object意味着我们可以返回任何对象</span></span><br><span class="line">   <span class="keyword">private</span> Object content;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">getContent</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> content; &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(Object content)</span> </span>&#123;<span class="keyword">this</span>.content = content; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>在项目中<code>application.properties</code>配置自定义的登陆页</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 配置自定义跳转登陆的页面</span><br><span class="line">vic.security.browser.loginPage = /vic-login.html</span><br></pre></td></tr></table></figure><ol start="4"><li>系统配置封装</li></ol><p>系统配置封装的目的是实现可配置化，自定义化。简单来说就是：配置覆盖系统默认</p><p>定义系统封装实体结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SecurityProperties                        # 系统总配置</span><br><span class="line">      | - - - BrowserProperties           # 浏览器相关配置</span><br><span class="line">      | - - - ValidateCodeProperties      # 验证码相关配置</span><br><span class="line">      | - - - OAuthProperties             # OAuth相关配置</span><br><span class="line">      | - - - SocialProperties            # 社交登陆相关配置</span><br></pre></td></tr></table></figure><ol start="5"><li>定义各个配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认值，用户没有配置就使用默认值</span></span><br><span class="line"><span class="comment">     * 若用户自定义配置则使用用户配置的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String loginPage = <span class="string">"vic-login.html"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLoginPage</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> loginPage; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLoginPage</span><span class="params">(String loginPage)</span> </span>&#123;<span class="keyword">this</span>.loginPage = loginPage; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"vic.security"</span>)<span class="comment">//读取配置文件中vic.security的配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//browser读取vic.security.browser属性</span></span><br><span class="line">    <span class="keyword">private</span> BrowserProperties browser = <span class="keyword">new</span> BrowserProperties();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BrowserProperties <span class="title">getBrowser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> browser;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBrowser</span><span class="params">(BrowserProperties browser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.browser = browser;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties</span>(SecurityProperties.class)<span class="comment">//使自定义配置生效</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityCoreConfig</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>修改需要身份跳转的请求，并且对配置的请求权限进行放开</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">http.formLogin()<span class="comment">//使用表单验证的意思</span></span><br><span class="line">         <span class="comment">//.loginPage("/vic-login.html")//自定义登陆页面</span></span><br><span class="line">    .loginPage(<span class="string">"/authentication/require"</span>)<span class="comment">//自定义登陆页面</span></span><br><span class="line">    .and()</span><br><span class="line">.authorizeRequests()</span><br><span class="line">.antMatchers(<span class="string">"/authentication/require"</span>,</span><br><span class="line">securityProperties.getBrowser().getLoginPage()).permitAll()</span><br></pre></td></tr></table></figure><ol start="6"><li><p>总结</p><p><code>/authentication/require</code>的实现逻辑可以自定义配置，不同的系统根据不同的业务处理进行自定义</p></li></ol><h5 id="自定义登陆成功处理"><a href="#自定义登陆成功处理" class="headerlink" title="自定义登陆成功处理"></a>自定义登陆成功处理</h5><h6 id="Spring-Security默认的登陆成功处理器"><a href="#Spring-Security默认的登陆成功处理器" class="headerlink" title="Spring Security默认的登陆成功处理器"></a>Spring Security默认的登陆成功处理器</h6><p>​    Spring Security默认的处理登陆成功的机制是:登陆成功后，跳转到引发登陆的那个请求上（如：访问/user需要进行登陆，则跳到登陆页，当登陆成功后，再次跳转到/user）</p><p>Spring Security提供<code>AuthenticationSuccessHandler</code>接口供实现登陆成功跳转，默认使用其实现类<code>SavedRequestAwareAuthenticationSuccessHandler</code>： 跳转到之前缓存器的那个请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.security.web.authentication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* authentication:封装了认证相关的信息</span></span><br><span class="line"><span class="comment">* 包括:认证请求的一些信息，session</span></span><br><span class="line"><span class="comment">* 认证通过后的UserDetails用户信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="自定义登陆成功处理器"><a href="#自定义登陆成功处理器" class="headerlink" title="自定义登陆成功处理器"></a>自定义登陆成功处理器</h6><ol><li>定义当前登陆类型，并加入<code>BrowserProperties</code>配置中，实现可配置化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> LoginType &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跳转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REDIRECT,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回json</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    JSON</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserProperties</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认值，用户没有配置就使用默认值</span></span><br><span class="line"><span class="comment">     * 若用户自定义配置则使用用户配置的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String loginPage = <span class="string">"/vic-login.html"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> LoginType loginType = LoginType.JSON; <span class="comment">//默认是json</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义处理器实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VicAuthenticationSuccessHandler</span> <span class="keyword">extends</span> <span class="title">SavedRequestAwareAuthenticationSuccessHandler</span> </span>&#123;</span><br><span class="line">        <span class="comment">//implements AuthenticationSuccessHandler &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * spring mvc在启动的时候，自动声明这个bean</span></span><br><span class="line"><span class="comment">     * 作用:把对象输出为json数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SecurityProperties securityProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"登录成功"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里可以增加实现逻辑，比如说从请求头中获取请求类型，根据请求类型去跳转，如果没有带指定的请求头，则按系统配置，实现参数覆盖自定义配置，自定义配置覆盖默认配置</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (LoginType.JSON.equals(securityProperties.getBrowser().getLoginType())) &#123;<span class="comment">//自定义输出</span></span><br><span class="line">            response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">            response.getWriter().write(objectMapper.writeValueAsString(authentication));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onAuthenticationSuccess(request, response, authentication);<span class="comment">//跳转到激发登陆请求的链接</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>加入配置中，使自定义的成功处理器生效</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span></span>&#123;</span><br><span class="line"><span class="comment">//注入自定义成功处理bean</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationSuccessHandler vicAuthenticationSuccessHandler;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//最简单的配置</span></span><br><span class="line">   <span class="comment">//http.httpBasic()//使用httpbasic验证，默认使用</span></span><br><span class="line">   http.formLogin()<span class="comment">//使用表单验证的意思</span></span><br><span class="line">         <span class="comment">//.loginPage("/vic-login.html")//自定义登陆页面</span></span><br><span class="line">         .loginPage(<span class="string">"/authentication/require"</span>)<span class="comment">//自定义登陆页面跳转的controller</span></span><br><span class="line">         .loginProcessingUrl(<span class="string">"/authentication/form"</span>)<span class="comment">//登陆页面登陆跳转地址</span></span><br><span class="line">         .successHandler(vicAuthenticationSuccessHandler)<span class="comment">//使用自定义登陆跳转处理</span></span><br><span class="line">         ………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>启动服务，获得返回信息</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    authorities: [&#123;authority: "admin"&#125;],…&#125;,</span><br><span class="line">authenticated:true,</span><br><span class="line">authorities:[&#123;authority: "admin"&#125;],</span><br><span class="line">0:&#123;authority: "admin"&#125;,</span><br><span class="line">credentials:null,</span><br><span class="line">details:&#123;remoteAddress: "0:0:0:0:0:0:0:1", sessionId: "9785C465BA32BB2D34BBC2FF872A878A"&#125;,</span><br><span class="line">remoteAddress:"0:0:0:0:0:0:0:1",</span><br><span class="line">sessionId:"9785C465BA32BB2D34BBC2FF872A878A",</span><br><span class="line">name:"edpmaster@123.com",</span><br><span class="line">principal:&#123;password: null, username: "edpmaster@123.com", authorities: [&#123;authority: "admin"&#125;],…&#125;,</span><br><span class="line">accountNonExpired:true,</span><br><span class="line">accountNonLocked:true,</span><br><span class="line">authorities:[&#123;authority: "admin"&#125;],</span><br><span class="line">credentialsNonExpired:true,</span><br><span class="line">enabled:true,</span><br><span class="line">password:null,</span><br><span class="line">username:"edpmaster@123.com"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：根据登陆方式的不同，Authentication里的信息也是不同的。他是一个接口，在实际当中，会根据登陆方式不同，会赋值不同的实现类</p><h5 id="自定义登陆失败处理器"><a href="#自定义登陆失败处理器" class="headerlink" title="自定义登陆失败处理器"></a>自定义登陆失败处理器</h5><h6 id="Spring-Security-默认的登陆失败处理"><a href="#Spring-Security-默认的登陆失败处理" class="headerlink" title="Spring Security 默认的登陆失败处理"></a>Spring Security 默认的登陆失败处理</h6><p>Spring Security提供<code>AuthenticationFailureHandler</code>接口供实现登陆失败处理，默认使用其实现类<code>SimpleUrlAuthenticationFailureHandler</code>： 用户不存在或密码错误问题。这种情况下能够实现从哪个登录页面过来的还是返回原登录页，并携带错误信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.security.web.authentication;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthenticationFailureHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2, AuthenticationException var3)</span> <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="自定义登陆失败处理"><a href="#自定义登陆失败处理" class="headerlink" title="自定义登陆失败处理"></a>自定义登陆失败处理</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VicAuthenticationFailureHandler</span> <span class="keyword">extends</span> <span class="title">SimpleUrlAuthenticationFailureHandler</span></span>&#123;</span><br><span class="line">                <span class="comment">//implements AuthenticationFailureHandler &#123;</span></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SecurityProperties securityProperties;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationException 认证过程中产生的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthenticationFailure</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        AuthenticationException authenticationException)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"登录失败"</span>);</span><br><span class="line">        <span class="keyword">if</span> (LoginType.JSON.equals(securityProperties.getBrowser().getLoginType())) &#123;</span><br><span class="line">            response.setStatus(HttpStatus.INTERNAL_SERVER_ERROR.value());<span class="comment">// 500 服务器内部异常</span></span><br><span class="line">            response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">            response.getWriter().write(objectMapper.writeValueAsString(authenticationException));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.onAuthenticationFailure(request, response, authenticationException);<span class="comment">//spring boot 默认的处理方式</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Spring-Security-认证流程源码解析"><a href="#Spring-Security-认证流程源码解析" class="headerlink" title="Spring Security 认证流程源码解析"></a>Spring Security 认证流程源码解析</h4><h5 id="认证流程说明（以用户名密码登陆为入口）"><a href="#认证流程说明（以用户名密码登陆为入口）" class="headerlink" title="认证流程说明（以用户名密码登陆为入口）"></a>认证流程说明（以用户名密码登陆为入口）</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- - 登陆请求 - (携带登陆信息) - &gt; UsernamePasswordAuthenticationFilter - (携带未认证的Authentication) - &gt; AuthenticationManager - - &gt; AuthenticationProvider - - &gt; UserDetailService - - &gt; UserDetails - - &gt; Authentication(已认证)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">登陆请求</span><br><span class="line">   | (携带登陆信息)</span><br><span class="line">UsernamePasswordAuthenticationFilter</span><br><span class="line">   | (携带未认证的Authentication)</span><br><span class="line">AuthenticationManager</span><br><span class="line">   |</span><br><span class="line">AuthenticationProvider</span><br><span class="line">   |</span><br><span class="line">UserDetailService</span><br><span class="line">   |</span><br><span class="line">UserDetails</span><br><span class="line">   |</span><br><span class="line">Authentication(已认证)</span><br></pre></td></tr></table></figure><h6 id="UsernamePasswordAuthenticationFilter源码流程解析"><a href="#UsernamePasswordAuthenticationFilter源码流程解析" class="headerlink" title="UsernamePasswordAuthenticationFilter源码流程解析"></a>UsernamePasswordAuthenticationFilter源码流程解析</h6><p><code>UsernamePasswordAuthenticationToken.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UsernamePasswordAuthenticationToken</span><span class="params">(Object principal, Object credentials)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>((Collection)<span class="keyword">null</span>); <span class="comment">//一组权限，当前没有进行身份验证，所以无权限</span></span><br><span class="line">    <span class="keyword">this</span>.principal = principal;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">this</span>.credentials = credentials;<span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">this</span>.setAuthenticated(<span class="keyword">false</span>);<span class="comment">//当前存进去的信息是否经过身份验证</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><code>UsernamePasswordAuthenticationFilter.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UsernamePasswordAuthenticationFilter</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (postOnly &amp;&amp; !request.getMethod().equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(</span><br><span class="line">            <span class="string">"Authentication method not supported: "</span> + request.getMethod());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//获取用户密码</span></span><br><span class="line">   String username = obtainUsername(request);</span><br><span class="line">   String password = obtainPassword(request);</span><br><span class="line">   <span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;username = <span class="string">""</span>; &#125;</span><br><span class="line">   <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;password = <span class="string">""</span>;&#125;</span><br><span class="line">   username = username.trim();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* UsernamePasswordAuthenticationToken是Authentication接口的一个实现类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(</span><br><span class="line">         username, password);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Allow subclasses to set the "details" property</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 将请求的一些信息，封装到上面的UsernamePasswordAuthenticationToken中</span></span><br><span class="line"><span class="comment">* 包括一些session信息，ip等</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   setDetails(request, authRequest);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* this.getAuthenticationManager()返回一个AuthenticationManager对象</span></span><br><span class="line"><span class="comment">* 这个对象本身并不包含验证逻辑</span></span><br><span class="line"><span class="comment">* 作用：管理AuthenticationProvider</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><code>ProviderManager.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProviderManager</span> <span class="keyword">implements</span> <span class="title">AuthenticationManager</span>, <span class="title">MessageSourceAware</span>,</span></span><br><span class="line"><span class="class">      <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">   <span class="comment">//获取Authentication的类型</span></span><br><span class="line">   Class&lt;? extends Authentication&gt; toTest = authentication.getClass();</span><br><span class="line">   AuthenticationException lastException = <span class="keyword">null</span>;</span><br><span class="line">   Authentication result = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">boolean</span> debug = logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 不同的认证方式，它的认证逻辑是不一样的（如密码登陆需要验证密码，而微信登陆则不需要验证密码）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   <span class="keyword">for</span> (AuthenticationProvider provider : getProviders()) &#123;</span><br><span class="line">       <span class="comment">//每一种AuthenticaitonToken都有各自对应的AuthenticationProvider</span></span><br><span class="line">      <span class="keyword">if</span> (!provider.supports(toTest)) &#123;</span><br><span class="line">         <span class="keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Authentication attempt using "</span></span><br><span class="line">               + provider.getClass().getName());</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//真正的校验逻辑</span></span><br><span class="line">         result = provider.authenticate(authentication);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            copyDetails(authentication, result);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (AccountStatusException e) &#123;</span><br><span class="line">         prepareException(e, authentication);</span><br><span class="line">         <span class="comment">// SEC-546: Avoid polling additional providers if auth failure is due to</span></span><br><span class="line">         <span class="comment">// invalid account status</span></span><br><span class="line">         <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (InternalAuthenticationServiceException e) &#123;</span><br><span class="line">         prepareException(e, authentication);</span><br><span class="line">         <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">         lastException = e;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//循环结束</span></span><br><span class="line">   <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// Allow the parent to try.</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         result = parent.authenticate(authentication);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (ProviderNotFoundException e) &#123;</span><br><span class="line">         <span class="comment">// ignore as we will throw below if no other exception occurred prior to</span></span><br><span class="line">         <span class="comment">// calling parent and the parent</span></span><br><span class="line">         <span class="comment">// may throw ProviderNotFound even though a provider in the child already</span></span><br><span class="line">         <span class="comment">// handled the request</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">         lastException = e;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (eraseCredentialsAfterAuthentication</span><br><span class="line">            &amp;&amp; (result <span class="keyword">instanceof</span> CredentialsContainer)) &#123;</span><br><span class="line">         <span class="comment">// Authentication is complete. Remove credentials and other secret data</span></span><br><span class="line">         <span class="comment">// from authentication</span></span><br><span class="line">         ((CredentialsContainer) result).eraseCredentials();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      eventPublisher.publishAuthenticationSuccess(result);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Parent was null, or didn't authenticate (or throw an exception).</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (lastException == <span class="keyword">null</span>) &#123;</span><br><span class="line">      lastException = <span class="keyword">new</span> ProviderNotFoundException(messages.getMessage(</span><br><span class="line">            <span class="string">"ProviderManager.providerNotFound"</span>,</span><br><span class="line">            <span class="keyword">new</span> Object[] &#123; toTest.getName() &#125;,</span><br><span class="line">            <span class="string">"No AuthenticationProvider found for &#123;0&#125;"</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   prepareException(lastException, authentication);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">throw</span> lastException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><code>AbstractUserDetailsAuthenticationProvider.java</code></p><p>result = provider.authenticate(authentication)的实现就是在此类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractUserDetailsAuthenticationProvider</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">      <span class="title">AuthenticationProvider</span>, <span class="title">InitializingBean</span>, <span class="title">MessageSourceAware</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">   Assert.isInstanceOf(UsernamePasswordAuthenticationToken.class, authentication,</span><br><span class="line">         messages.getMessage(</span><br><span class="line">               <span class="string">"AbstractUserDetailsAuthenticationProvider.onlySupports"</span>,</span><br><span class="line">               <span class="string">"Only UsernamePasswordAuthenticationToken is supported"</span>));</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Determine username</span></span><br><span class="line">   String username = (authentication.getPrincipal() == <span class="keyword">null</span>) ? <span class="string">"NONE_PROVIDED"</span></span><br><span class="line">         : authentication.getName();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">boolean</span> cacheWasUsed = <span class="keyword">true</span>;</span><br><span class="line">   UserDetails user = <span class="keyword">this</span>.userCache.getUserFromCache(username);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">      cacheWasUsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         user = retrieveUser(username,</span><br><span class="line">               (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (UsernameNotFoundException notFound) &#123;</span><br><span class="line">         logger.debug(<span class="string">"User '"</span> + username + <span class="string">"' not found"</span>);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">if</span> (hideUserNotFoundExceptions) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(messages.getMessage(</span><br><span class="line">                  <span class="string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span>,</span><br><span class="line">                  <span class="string">"Bad credentials"</span>));</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> notFound;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      Assert.notNull(user,</span><br><span class="line">            <span class="string">"retrieveUser returned null - a violation of the interface contract"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      preAuthenticationChecks.check(user);</span><br><span class="line">      additionalAuthenticationChecks(user,</span><br><span class="line">            (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (AuthenticationException exception) &#123;</span><br><span class="line">      <span class="keyword">if</span> (cacheWasUsed) &#123;</span><br><span class="line">         <span class="comment">// There was a problem, so try again after checking</span></span><br><span class="line">         <span class="comment">// we're using latest data (i.e. not from the cache)</span></span><br><span class="line">         cacheWasUsed = <span class="keyword">false</span>;</span><br><span class="line">         user = retrieveUser(username,</span><br><span class="line">               (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">         preAuthenticationChecks.check(user);</span><br><span class="line">         additionalAuthenticationChecks(user,</span><br><span class="line">               (UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">throw</span> exception;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   postAuthenticationChecks.check(user);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!cacheWasUsed) &#123;</span><br><span class="line">      <span class="keyword">this</span>.userCache.putUserInCache(user);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   Object principalToReturn = user;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (forcePrincipalAsString) &#123;</span><br><span class="line">      principalToReturn = user.getUsername();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> createSuccessAuthentication(principalToReturn, authentication, user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="认证结果如何在多个请求之间共享"><a href="#认证结果如何在多个请求之间共享" class="headerlink" title="认证结果如何在多个请求之间共享"></a>认证结果如何在多个请求之间共享</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">登陆请求</span><br><span class="line">   | (携带登陆信息)</span><br><span class="line">UsernamePasswordAuthenticationFilter</span><br><span class="line">   | (携带未认证的Authentication)</span><br><span class="line">AuthenticationManager</span><br><span class="line">   |</span><br><span class="line">AuthenticationProvider</span><br><span class="line">   |</span><br><span class="line">UserDetailService</span><br><span class="line">   |</span><br><span class="line">UserDetails</span><br><span class="line">   |</span><br><span class="line">Authentication(已认证)</span><br><span class="line">   |</span><br><span class="line">SecurityContext</span><br><span class="line">   |</span><br><span class="line">SecurityContextHolder</span><br><span class="line">   |</span><br><span class="line">SecurityContextPersistenceFilter</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAuthenticationProcessingFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span></span></span><br><span class="line"><span class="class">      <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span>, <span class="title">MessageSourceAware</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">     … … …</span><br><span class="line">     successfulAuthentication(request, response, chain, authResult);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response, FilterChain chain, Authentication authResult)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">… … …</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 将已经认证成功后的Authentication 放入 SecurityContext中，然后</span></span><br><span class="line"><span class="comment"> * 放进SecurityContextHolder</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="images/persistencefilter.png" alt=""></p><p><code>SecurityContextPersistenceFilter</code>过滤器的作用：</p><ol><li>当请求进来时，检查Session中是否有SecurityContext，如果有则取出放到当前线程中</li><li>当请求结束后，线程中有SecurityContext，则取出放进Session中</li></ol><h5 id="获取认证用户信息"><a href="#获取认证用户信息" class="headerlink" title="获取认证用户信息"></a>获取认证用户信息</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前用户信息，使用SecurityContextHolder</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/me"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前用户信息，使用Spring自动注入，</span></span><br><span class="line"><span class="comment">     * spring会在后台自动在SecurityContext中寻找相应的类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/me2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCurrentUsers</span><span class="params">(Authentication authentication)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> authentication;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="验证码功能"><a href="#验证码功能" class="headerlink" title="验证码功能"></a>验证码功能</h4><h5 id="实现思想"><a href="#实现思想" class="headerlink" title="实现思想"></a>实现思想</h5><p>​    校验实现思路：在<code>UsernamePasswordAuthenticationFilter</code>前，加入自定义的验证码过滤器，验证通过则进入<code>UsernamePasswordAuthenticationFilter</code>，验证不通过则抛出异常</p><ol><li>验证码参数可配置</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">请求级配置 （如服务中的参数）</span><br><span class="line">    | （覆盖）</span><br><span class="line">应用级配置 （在配置文件中定义）</span><br><span class="line">    | （覆盖）</span><br><span class="line"> 默认配置  （属性中的默认值）</span><br></pre></td></tr></table></figure><p>对于验证码，默认配置会存在默认值，当模块自定义时，配置会覆盖默认值（通过properties指定配置），当请求参数中存在指定参数，则会覆盖默认值或配置值</p><ol start="2"><li>验证码拦截接口可配置</li></ol><p>系统提供默认的拦截URL，通过配置，用户也可以指定验证码接口拦截的URL</p><ol start="3"><li>验证码生成逻辑可配置</li></ol><p>通过接口化，系统提供默认的验证码生成逻辑，用户自定义的生成逻辑，可覆盖系统的默认实现</p><ol start="4"><li>基本类介绍</li></ol><p><strong>验证码生成器</strong></p><p><code>ValidateCodeGenerator</code> : 其作用是提供生成验证码接口</p><p>​    实现类 1) <code>ImageCodeGenerator</code> ： 图形验证码生成器，生成一个图形验证码</p><p>​    实现类 2) <code>SmsCodeGenerator</code> : 短信验证码生成器，生成一个短信验证码</p><p><strong>验证码处理器</strong></p><p><code>ValidateCodeProcessor</code> : 其作用是封装不同校验码的处理逻辑，提供<code>创建</code>和<code>验证</code>方法</p><p>​    实现类：<code>AbstractValidateCodeProcessor</code> : 此类为抽象类</p><p>​        作用是：1) 收集所有的验证码生成器</p><p>​                2) 创建验证码：包括生成验证码、保存验证码、发送验证码（可由子类自定义实现）</p><p>​            实现类 1)<code>ImageCodeProcessor</code>：覆盖父类中的发送验证码处理逻辑</p><p>​            实现类 2)<code>SmsCodeProcessor</code>：覆盖父类中的发送验证码处理逻辑</p><p><strong>验证码处理器寻找器</strong></p><p><code>ValidateCodeProcessorHolder</code> :其作用是</p><p>​    1) 收集所有<code>ValidateCodeProcessor</code> 的实现类</p><p>​    2) 根据请求类型，获取指定的<code>ValidateCodeProcessor</code> </p><p><strong>验证码存储器</strong></p><p><code>ValidateCodeRepository</code>：起作用是提供验证码保存、获取、删除</p><p><strong>验证码过滤器</strong></p><p><code>ValidateCodeFilter</code>： 用于在Spring Security 过滤器链中进行验证</p><p><strong>请求逻辑</strong></p><p><code>ValidateCodeProcessorHolder</code>通过请求中的TYPE(验证码类型)寻找相应类型的<code>ValidateCodeProcessor</code> 进行验证码的生成、保存和发送</p><h5 id="验证码接口定义"><a href="#验证码接口定义" class="headerlink" title="验证码接口定义"></a>验证码接口定义</h5><ol><li>验证码基类，所有验证码通用的属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码属性，字符串验证码、过期时间</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180228</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCode</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> LocalDateTime expireTime;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ValidateCode</span><span class="params">(String code, <span class="keyword">int</span> expireIn)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.code = code;</span><br><span class="line"><span class="keyword">this</span>.expireTime = LocalDateTime.now().plusSeconds(expireIn);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ValidateCode</span><span class="params">(String code, LocalDateTime expireTime)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.code = code;</span><br><span class="line"><span class="keyword">this</span>.expireTime = expireTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExpried</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> LocalDateTime.now().isAfter(expireTime);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.code = code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> LocalDateTime <span class="title">getExpireTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> expireTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExpireTime</span><span class="params">(LocalDateTime expireTime)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.expireTime = expireTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>验证码异常类，存储验证码异常信息</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码异常类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180228</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCodeException</span> <span class="keyword">extends</span> <span class="title">AuthenticationException</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7285211528095468156L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ValidateCodeException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>验证码生成器接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码生成器接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180301</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidateCodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function">ValidateCode <span class="title">generate</span><span class="params">(ServletWebRequest request)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>验证码处理器接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验码处理器，封装不同校验码的处理逻辑</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180301</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidateCodeProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码放入session时的前缀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String SESSION_KEY_PREFIX = <span class="string">"SESSION_KEY_FOR_CODE_"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建校验码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request 工具类，request or response 都可以放入此包装类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">(ServletWebRequest request)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验验证码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> servletWebRequest 工具类，request or response 都可以放入此包装类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">validate</span><span class="params">(ServletWebRequest servletWebRequest)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>验证码处理器寻找器定义</li></ol><p>主要用于寻找指定的验证码处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCodeProcessorHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, ValidateCodeProcessor&gt; validateCodeProcessors;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ValidateCodeProcessor <span class="title">findValidateCodeProcessor</span><span class="params">(ValidateCodeType type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> findValidateCodeProcessor(type.toString().toLowerCase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> ValidateCodeProcessor <span class="title">findValidateCodeProcessor</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">String name = type.toLowerCase() + ValidateCodeProcessor.class.getSimpleName();</span><br><span class="line">ValidateCodeProcessor processor = validateCodeProcessors.get(name);</span><br><span class="line"><span class="keyword">if</span> (processor == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"验证码处理器"</span> + name + <span class="string">"不存在"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> processor;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>验证码类型定义，主要定义了短信验证码与图片验证码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码类型</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * String DEFAULT_PARAMETER_NAME_CODE_IMAGE = "imageCode";</span></span><br><span class="line"><span class="comment"> * 验证图片验证码时，http请求中默认的携带图片验证码信息的参数的名称</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * String DEFAULT_PARAMETER_NAME_CODE_SMS = "smsCode";</span></span><br><span class="line"><span class="comment"> * 验证短信验证码时，http请求中默认的携带短信验证码信息的参数的名称</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ValidateCodeType &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SMS &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getParamNameOnValidate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> SecurityConstants.DEFAULT_PARAMETER_NAME_CODE_SMS;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">IMAGE &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getParamNameOnValidate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> SecurityConstants.DEFAULT_PARAMETER_NAME_CODE_IMAGE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验时从请求中获取的参数的名字</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getParamNameOnValidate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>定义验证码配置属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码需要配置的基本属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> length = <span class="number">4</span>;  <span class="comment">//验证码基本长度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expireIn = <span class="number">60</span>;<span class="comment">//验证码的过期时间/秒</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url; <span class="comment">//拦截url可配置化</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(<span class="keyword">int</span> lenght)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = lenght;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getExpireIn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> expireIn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExpireIn</span><span class="params">(<span class="keyword">int</span> expireIn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.expireIn = expireIn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>定义配置属性，并加入<code>SecurityProperties</code>配置类中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有验证码类型属性分类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCodeProperties</span> </span>&#123;</span><br><span class="line"><span class="comment">//图形验证码属性</span></span><br><span class="line">    <span class="keyword">private</span> ImageCodeProperties image = <span class="keyword">new</span> ImageCodeProperties();</span><br><span class="line">    <span class="comment">//短信验证码属性</span></span><br><span class="line">    <span class="keyword">private</span> SmsCodeProperties sms = <span class="keyword">new</span> SmsCodeProperties();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ImageCodeProperties <span class="title">getImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(ImageCodeProperties image)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.image = image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SmsCodeProperties <span class="title">getSms</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sms;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSms</span><span class="params">(SmsCodeProperties sms)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sms = sms;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>定义统一的验证码处理器，规范验证码处理的逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用模板方法进行抽取</span></span><br><span class="line"><span class="comment"> * 生成可重用的验证码操作逻辑</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180228</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractValidateCodeProcessor</span>&lt;<span class="title">C</span> <span class="keyword">extends</span> <span class="title">ValidateCode</span>&gt; <span class="keyword">implements</span> <span class="title">ValidateCodeProcessor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring中的依赖查找</span></span><br><span class="line"><span class="comment"> * 所有验证码生成器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, ValidateCodeGenerator&gt; validateCodeGenerators;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证码存储接口</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ValidateCodeRepository validateCodeRepository;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主干逻辑想通过，但处理不同</span></span><br><span class="line"><span class="comment"> * 1.创建验证码</span></span><br><span class="line"><span class="comment"> * 2.保存验证码</span></span><br><span class="line"><span class="comment"> * 3.发送验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">(ServletWebRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">C validateCode = generate(request);</span><br><span class="line">save(request, validateCode);</span><br><span class="line">send(request, validateCode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成校验码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="function"><span class="keyword">private</span> C <span class="title">generate</span><span class="params">(ServletWebRequest request)</span> </span>&#123;</span><br><span class="line">String type = getProcessorType(request);</span><br><span class="line">ValidateCodeGenerator validateCodeGenerator = validateCodeGenerators.get(type + <span class="string">"ValidateCodeGenerator"</span>);</span><br><span class="line"><span class="keyword">return</span> (C) validateCodeGenerator.generate(request);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存校验码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> validateCode</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(ServletWebRequest request, C validateCode)</span> </span>&#123;</span><br><span class="line">ValidateCode code = <span class="keyword">new</span> ValidateCode(validateCode.getCode(),validateCode.getExpireTime());</span><br><span class="line"><span class="comment">//sessionStrategy.setAttribute(request, SESSION_KEY_PREFIX + getProcessorType(request).toUpperCase(), code);</span></span><br><span class="line">validateCodeRepository.save(request, code, getValidateCodeType(request));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送校验码，由子类实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> validateCode</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(ServletWebRequest request, C validateCode)</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据请求的url获取校验码的类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getProcessorType</span><span class="params">(ServletWebRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> StringUtils.substringAfter(request.getRequest().getRequestURI(), <span class="string">"/code/"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">validate</span><span class="params">(ServletWebRequest request)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">ValidateCodeType processorType = getValidateCodeType(request);</span><br><span class="line"></span><br><span class="line">C codeInSession = (C) validateCodeRepository.get(request, processorType);</span><br><span class="line"></span><br><span class="line">String codeInRequest;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">codeInRequest = ServletRequestUtils.getStringParameter(request.getRequest(),</span><br><span class="line">processorType.getParamNameOnValidate());</span><br><span class="line">&#125; <span class="keyword">catch</span> (ServletRequestBindingException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(<span class="string">"获取验证码的值失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(codeInRequest)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(processorType + <span class="string">"验证码的值不能为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (codeInSession == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(processorType + <span class="string">"验证码不存在"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (codeInSession.isExpried()) &#123;</span><br><span class="line">validateCodeRepository.remove(request, processorType);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(processorType + <span class="string">"验证码已过期"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!StringUtils.equals(codeInSession.getCode(), codeInRequest)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ValidateCodeException(processorType + <span class="string">"验证码不匹配"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">validateCodeRepository.remove(request, processorType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构建验证码放入session时的key</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">getSessionKey</span><span class="params">(ServletWebRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> SESSION_KEY_PREFIX + getValidateCodeType(request).toString().toUpperCase();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据请求的url获取校验码的类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ValidateCodeType <span class="title">getValidateCodeType</span><span class="params">(ServletWebRequest request)</span> </span>&#123;</span><br><span class="line">String type = StringUtils.substringBefore(getClass().getSimpleName(), <span class="string">"CodeProcessor"</span>);</span><br><span class="line"><span class="keyword">return</span> ValidateCodeType.valueOf(type.toUpperCase());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>定义统一的验证码存储器，用户根据不同的环境下，存储验证码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码存储接口</span></span><br><span class="line"><span class="comment"> * 提供给不同类型的自定义实现，浏览器项目可用session ， app项目可用redis数据库等进行验证码的保存</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180305</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ValidateCodeRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code 验证码实体</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> validateCodeType 验证码类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(ServletWebRequest request, ValidateCode code, ValidateCodeType validateCodeType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> validateCodeType 验证码类型</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">ValidateCode <span class="title">get</span><span class="params">(ServletWebRequest request, ValidateCodeType validateCodeType)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除验证码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> codeType 验证码类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">(ServletWebRequest request, ValidateCodeType codeType)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="图形验证码"><a href="#图形验证码" class="headerlink" title="图形验证码"></a>图形验证码</h5><ol><li>定义图形验证码配置属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图形验证码属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180228</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCodeProperties</span> <span class="keyword">extends</span> <span class="title">CodeProperties</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证码的默认长度与高度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> width = <span class="number">67</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> height = <span class="number">23</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWidth</span><span class="params">(<span class="keyword">int</span> width)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.width = width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeight</span><span class="params">(<span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.height = height;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义图片验证码实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片验证码</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180228</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCode</span> <span class="keyword">extends</span> <span class="title">ValidateCode</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> BufferedImage image;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ImageCode</span><span class="params">(BufferedImage image, String code, <span class="keyword">int</span> expireIn)</span></span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(code,expireIn);</span><br><span class="line">      <span class="keyword">this</span>.image = image;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ImageCode</span><span class="params">(BufferedImage image, String code, LocalDateTime expireTime)</span></span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(code,expireTime);</span><br><span class="line">      <span class="keyword">this</span>.image = image;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> BufferedImage <span class="title">getImage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> image;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setImage</span><span class="params">(BufferedImage image)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.image = image;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义图片验证码生成器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片验证码生成器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180301</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCodeGenerator</span> <span class="keyword">implements</span> <span class="title">ValidateCodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SecurityProperties securityProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ImageCode <span class="title">generate</span><span class="params">(ServletWebRequest request)</span> </span>&#123;</span><br><span class="line">         <span class="comment">//实现参数覆盖配置</span></span><br><span class="line"><span class="keyword">int</span> width = ServletRequestUtils.getIntParameter(request.getRequest(), <span class="string">"width"</span>,</span><br><span class="line">securityProperties.getCode().getImage().getWidth());</span><br><span class="line"><span class="keyword">int</span> height = ServletRequestUtils.getIntParameter(request.getRequest(), <span class="string">"height"</span>,</span><br><span class="line">securityProperties.getCode().getImage().getHeight());</span><br><span class="line">BufferedImage image = <span class="keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line"></span><br><span class="line">Graphics g = image.getGraphics();</span><br><span class="line"></span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">g.setColor(getRandColor(<span class="number">200</span>, <span class="number">250</span>));</span><br><span class="line">g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">g.setFont(<span class="keyword">new</span> Font(<span class="string">"Times New Roman"</span>, Font.ITALIC, <span class="number">20</span>));</span><br><span class="line">g.setColor(getRandColor(<span class="number">160</span>, <span class="number">200</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">155</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x = random.nextInt(width);</span><br><span class="line"><span class="keyword">int</span> y = random.nextInt(height);</span><br><span class="line"><span class="keyword">int</span> xl = random.nextInt(<span class="number">12</span>);</span><br><span class="line"><span class="keyword">int</span> yl = random.nextInt(<span class="number">12</span>);</span><br><span class="line">g.drawLine(x, y, x + xl, y + yl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String sRand = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; securityProperties.getCode().getImage().getLength(); i++) &#123;</span><br><span class="line">String rand = String.valueOf(random.nextInt(<span class="number">10</span>));</span><br><span class="line">sRand += rand;</span><br><span class="line">g.setColor(<span class="keyword">new</span> Color(<span class="number">20</span> + random.nextInt(<span class="number">110</span>), <span class="number">20</span> + random.nextInt(<span class="number">110</span>), <span class="number">20</span> + random.nextInt(<span class="number">110</span>)));</span><br><span class="line">g.drawString(rand, <span class="number">13</span> * i + <span class="number">6</span>, <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g.dispose();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ImageCode(image, sRand, securityProperties.getCode().getImage().getExpireIn());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机背景条纹</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bc</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Color <span class="title">getRandColor</span><span class="params">(<span class="keyword">int</span> fc, <span class="keyword">int</span> bc)</span> </span>&#123;</span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"><span class="keyword">if</span> (fc &gt; <span class="number">255</span>) &#123;</span><br><span class="line">fc = <span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (bc &gt; <span class="number">255</span>) &#123;</span><br><span class="line">bc = <span class="number">255</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> r = fc + random.nextInt(bc - fc);</span><br><span class="line"><span class="keyword">int</span> g = fc + random.nextInt(bc - fc);</span><br><span class="line"><span class="keyword">int</span> b = fc + random.nextInt(bc - fc);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Color(r, g, b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityProperties <span class="title">getSecurityProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> securityProperties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecurityProperties</span><span class="params">(SecurityProperties securityProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.securityProperties = securityProperties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>图片验证码处理器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图片验证码处理器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180301</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"imageValidateCodeProcessor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageCodeProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractValidateCodeProcessor</span>&lt;<span class="title">ImageCode</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送图形验证码，将其写到响应中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(ServletWebRequest request, ImageCode imageCode)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">ImageIO.write(imageCode.getImage(), <span class="string">"JPEG"</span>, request.getResponse().getOutputStream());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="短信验证码"><a href="#短信验证码" class="headerlink" title="短信验证码"></a>短信验证码</h5><ol><li>定义短信验证码配置属性</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信验证码属性</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180301</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeProperties</span> <span class="keyword">extends</span> <span class="title">CodeProperties</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义短信验证码实体类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信验证码</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20170308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCode</span> <span class="keyword">extends</span> <span class="title">ValidateCode</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsCode</span><span class="params">(String code, <span class="keyword">int</span> expireIn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(code, expireIn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SmsCode</span><span class="params">(String code, LocalDateTime expireTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(code, expireTime);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义短信验证码生成器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信验证码生成器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180301</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeGenerator</span> <span class="keyword">implements</span> <span class="title">ValidateCodeGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SecurityProperties securityProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信验证码生成</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 验证码实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ValidateCode <span class="title">generate</span><span class="params">(ServletWebRequest request)</span> </span>&#123;</span><br><span class="line">String code = RandomStringUtils.randomNumeric(securityProperties.getCode().getSms().getLength());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SmsCode(code, securityProperties.getCode().getSms().getExpireIn());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> SecurityProperties <span class="title">getSecurityProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> securityProperties;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecurityProperties</span><span class="params">(SecurityProperties securityProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.securityProperties = securityProperties;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>短信验证码处理器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信验证码处理器</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180301</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"smsValidateCodeProcessor"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeProcessor</span> <span class="keyword">extends</span> <span class="title">AbstractValidateCodeProcessor</span>&lt;<span class="title">ValidateCode</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信验证码发送器</span></span><br><span class="line"><span class="comment"> * 需要进行bean配置,默认使用核心包中的DefaultSmsCodeSender</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SmsCodeSender smsCodeSender;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送处理逻辑不一样，需要重新实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(ServletWebRequest request, ValidateCode validateCode)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">String mobile = ServletRequestUtils.getRequiredStringParameter(request.getRequest(), SecurityConstants.DEFAULT_PARAMETER_NAME_MOBILE);</span><br><span class="line">smsCodeSender.send(mobile, validateCode.getCode());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>定义短信发送商规范接口，并提供一个默认实现类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信验证码发送者实现发送接口</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180301</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SmsCodeSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信验证码发送逻辑</span></span><br><span class="line"><span class="comment"> * 需要开发者继承此接口，并实现业务处理逻辑</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mobile 手机号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code 验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(String mobile, String code)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信验证码发送者实现发送接口默认实现类</span></span><br><span class="line"><span class="comment"> * 自定义可以覆盖默认实现类</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180301</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSmsCodeSender</span> <span class="keyword">implements</span> <span class="title">SmsCodeSender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String mobile, String code)</span> </span>&#123;</span><br><span class="line"><span class="comment">//模拟实现</span></span><br><span class="line">System.out.println(<span class="string">"向手机"</span>+mobile+<span class="string">"发送短信验证码"</span>+code);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证码实体类配置"><a href="#验证码实体类配置" class="headerlink" title="验证码实体类配置"></a>验证码实体类配置</h5><p>目的：提供默认的图片验证、短信验证码生成器等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码相关的扩展点配置。配置在这里的bean，业务系统都可以通过声明同类型或同名的bean来覆盖安全</span></span><br><span class="line"><span class="comment"> * 模块默认的配置。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCodeBeanConfig</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> SecurityProperties securityProperties;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 图片验证码图片生成器</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> ValidateCodeGenerator图片验证码生成器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"imageValidateCodeGenerator"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ValidateCodeGenerator <span class="title">imageValidateCodeGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      ImageCodeGenerator codeGenerator = <span class="keyword">new</span> ImageCodeGenerator();</span><br><span class="line">      codeGenerator.setSecurityProperties(securityProperties);</span><br><span class="line">      <span class="keyword">return</span> codeGenerator;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 短信验证码生成器</span></span><br><span class="line"><span class="comment">    *  <span class="doctag">@return</span> ValidateCodeGenerator短信验证码生成器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span>(name = <span class="string">"smsValidateCodeGenerator"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ValidateCodeGenerator <span class="title">smsValidateCodeGenerator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      SmsCodeGenerator codeGenerator = <span class="keyword">new</span> SmsCodeGenerator();</span><br><span class="line">      codeGenerator.setSecurityProperties(securityProperties);</span><br><span class="line">      <span class="keyword">return</span> codeGenerator;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 短信验证码发送器</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> SmsCodeSender 默认实现类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@ConditionalOnMissingBean</span>(SmsCodeSender.class)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> SmsCodeSender <span class="title">smsCodeSender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DefaultSmsCodeSender();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="验证码校验过滤器的生成"><a href="#验证码校验过滤器的生成" class="headerlink" title="验证码校验过滤器的生成"></a>验证码校验过滤器的生成</h5><p>生成过滤器，主要是为了加入Spring Security过滤器链中，并且在<code>UsernamePasswordAuthenticationFilter</code>之前</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成过滤器，负责对验证码进行校验</span></span><br><span class="line"><span class="comment"> * InitializingBean:初始化bean后完成一些指定的业务处理逻辑</span></span><br><span class="line"><span class="comment"> * OncePerRequestFilter:在spring中，filter都默认继承OncePerRequestFilter,确保在一次请求只通过一次filter，而不需要重复执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"validateCodeFilter"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCodeFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 验证码校验失败处理器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> AuthenticationFailureHandler authenticationFailureHandler;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 系统配置信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> SecurityProperties securityProperties;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 系统中的校验码处理器</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> ValidateCodeProcessorHolder validateCodeProcessorHolder;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 存放所有需要校验验证码的url</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Map&lt;String, ValidateCodeType&gt; urlMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 验证请求url与配置的url是否匹配的工具类</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> AntPathMatcher pathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 初始化要拦截的url配置信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line">      <span class="comment">//从系统中读取信息，放入不同的类型</span></span><br><span class="line">      urlMap.put(SecurityConstants.DEFAULT_LOGIN_PROCESSING_URL_FORM, ValidateCodeType.IMAGE);</span><br><span class="line">      addUrlToMap(securityProperties.getCode().getImage().getUrl(), ValidateCodeType.IMAGE);</span><br><span class="line"></span><br><span class="line">      urlMap.put(SecurityConstants.DEFAULT_LOGIN_PROCESSING_URL_MOBILE, ValidateCodeType.SMS);</span><br><span class="line">      addUrlToMap(securityProperties.getCode().getSms().getUrl(), ValidateCodeType.SMS);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 从系统中配置的需要校验验证码的URL根据校验的类型放入map</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> urlString 配置的url字符串,每条url用,分割</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> type 验证码类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addUrlToMap</span><span class="params">(String urlString, ValidateCodeType type)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (StringUtils.isNotBlank(urlString)) &#123;</span><br><span class="line">         String[] urls = StringUtils.splitByWholeSeparatorPreserveAllTokens(urlString, <span class="string">","</span>);</span><br><span class="line">         <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            urlMap.put(url, type);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">      ValidateCodeType type = getValidateCodeType(request);</span><br><span class="line">      <span class="keyword">if</span> (type != <span class="keyword">null</span>) &#123;</span><br><span class="line">         logger.info(<span class="string">"校验请求("</span> + request.getRequestURI() + <span class="string">")中的验证码,验证码类型"</span> + type);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            validateCodeProcessorHolder.findValidateCodeProcessor(type)</span><br><span class="line">                  .validate(<span class="keyword">new</span> ServletWebRequest(request, response));</span><br><span class="line">            logger.info(<span class="string">"验证码校验通过"</span>);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (ValidateCodeException exception) &#123;</span><br><span class="line">            authenticationFailureHandler.onAuthenticationFailure(request, response, exception);</span><br><span class="line">            <span class="keyword">return</span>;<span class="comment">//防止继续请求</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取校验码的类型，如果当前请求不需要校验，则返回null</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> ValidateCodeType <span class="title">getValidateCodeType</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">      ValidateCodeType result = <span class="keyword">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (!StringUtils.equalsIgnoreCase(request.getMethod(), <span class="string">"get"</span>)) &#123;</span><br><span class="line">         Set&lt;String&gt; urls = urlMap.keySet();</span><br><span class="line">         <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pathMatcher.match(url, request.getRequestURI())) &#123;</span><br><span class="line">               result = urlMap.get(url);</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="登陆页面改造"><a href="#登陆页面改造" class="headerlink" title="登陆页面改造"></a>登陆页面改造</h5><ol><li>图形验证码：<code>&lt;img src=&quot;/code/image?width=200&quot;&gt;</code></li><li>短信验证码：<code>&lt;a href=&quot;/code/sms?mobile=13012345678&quot;&gt;发送验证码&lt;/a&gt;</code></li></ol><h5 id="配置成为Spring-security-过滤器中的一员"><a href="#配置成为Spring-security-过滤器中的一员" class="headerlink" title="配置成为Spring security 过滤器中的一员"></a>配置成为Spring security 过滤器中的一员</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验码相关安全配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"validateCodeSecurityConfig"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCodeSecurityConfig</span> <span class="keyword">extends</span> <span class="title">SecurityConfigurerAdapter</span>&lt;<span class="title">DefaultSecurityFilterChain</span>, <span class="title">HttpSecurity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> Filter validateCodeFilter;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 将自定义的验证码校验过滤器加入spring sucurity的过滤器链中</span></span><br><span class="line"><span class="comment">    * 为保证能在自定义的短信验证码登录AuthenticationFilter(自定义的像UsernamePasswordAuthentication类实现的功能)能比其他Authentication过滤器先在执行</span></span><br><span class="line"><span class="comment">    * 因此将自定义的过滤器加在spring security 过滤器链中的AbstractPreAuthenticatedProcessingFilter</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> http HttpSecurity</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      http.addFilterBefore(validateCodeFilter, AbstractPreAuthenticatedProcessingFilter.class);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成校验码的请求处理器</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180309</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidateCodeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> ValidateCodeProcessorHolder validateCodeProcessorHolder;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建验证码，根据验证码类型不同，调用不同的 &#123;<span class="doctag">@link</span> ValidateCodeProcessor&#125;接口实现</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    * 默认的处理验证码的url前缀</span></span><br><span class="line"><span class="comment">    * String DEFAULT_VALIDATE_CODE_URL_PREFIX = "/code";</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@GetMapping</span>(SecurityConstants.DEFAULT_VALIDATE_CODE_URL_PREFIX + <span class="string">"/&#123;type&#125;"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createCode</span><span class="params">(HttpServletRequest request, HttpServletResponse response, @PathVariable String type)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//根据类型从验证码处理器中找到验证码生成器，并生成验证码</span></span><br><span class="line">      validateCodeProcessorHolder.findValidateCodeProcessor(type).create(<span class="keyword">new</span> ServletWebRequest(request, response));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="记住我功能"><a href="#记住我功能" class="headerlink" title="记住我功能"></a>记住我功能</h4><h5 id="记住我基本原理"><a href="#记住我基本原理" class="headerlink" title="记住我基本原理"></a>记住我基本原理</h5><p><img src="images/rememberme-1.png" alt=""></p><p><img src="images/rememberme-2.png" alt=""></p><p>当其他的的过滤器无法认证时（如<code>UsernamePasswordAuthenticationFilter</code>），<code>RememberMeAuthenticationFilter</code>会尝试进行验证</p><h5 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h5><ol><li>页面添加属性，属性名必须为<code>remember-me</code></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"remember-me"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span>记住我</span><br></pre></td></tr></table></figure><ol start="2"><li>配置<code>TokenRepository</code>相关配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityBeanConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置是否开启remmemberMe功能</span></span><br><span class="line"><span class="comment"> * 只有配置中存在turing.security.browser.remember-me" 并且值为true才会生效</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty</span>(prefix = <span class="string">"turing.security.browser"</span>, name = <span class="string">"remember-me"</span>, havingValue = <span class="string">"true"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> PersistentTokenRepository <span class="title">persistentTokenRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">JdbcTokenRepositoryImpl tokenRepository = <span class="keyword">new</span> JdbcTokenRepositoryImpl();</span><br><span class="line">tokenRepository.setDataSource(dataSource);</span><br><span class="line">        <span class="comment">//数据库不存在，则会创建，如果存在则会报错</span></span><br><span class="line">tokenRepository.setCreateTableOnStartup(<span class="keyword">true</span>);<span class="comment">//启动的时候建表</span></span><br><span class="line"><span class="keyword">return</span> tokenRepository;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//其他配置省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Security安全配置中实现配置，开启RememberMe功能，此特性为浏览器特性特有，因此配置在浏览器项目的核心配置中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span>  <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SecurityProperties securityProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置RemmberMe所需要的数据操作仓库</span></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> PersistentTokenRepository persistentTokenRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置浏览器特有的安全配置，并且读取全局配置，加入spring security安全配置中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//是否开启remmemberMe功能</span></span><br><span class="line"><span class="keyword">if</span> (persistentTokenRepository != <span class="keyword">null</span>)&#123;</span><br><span class="line">http.rememberMe()</span><br><span class="line">.tokenRepository(persistentTokenRepository)<span class="comment">//配置数据每个用户对应的token</span></span><br><span class="line">                .tokenValiditySeconds(securityProperties.getBrowser().getRememberMeSeconds())</span><br><span class="line">                <span class="comment">//在浏览器属性配置中增加rememberMe的过期时间</span></span><br><span class="line">.userDetailsService(userDetailsService);<span class="comment">//拿到用户名后从该user找到用户</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//省略其他相关配置</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="RememberMe源码解析"><a href="#RememberMe源码解析" class="headerlink" title="RememberMe源码解析"></a>RememberMe源码解析</h5><h6 id="普通登陆处理"><a href="#普通登陆处理" class="headerlink" title="普通登陆处理"></a>普通登陆处理</h6><ol><li><code>AbstractAuthenticationProcessingFilter.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * spring提供的登陆验证处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractAuthenticationProcessingFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span></span></span><br><span class="line"><span class="class">      <span class="keyword">implements</span> <span class="title">ApplicationEventPublisherAware</span>, <span class="title">MessageSourceAware</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 登陆成功</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response, FilterChain chain, Authentication authResult)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Authentication success. Updating SecurityContextHolder to contain: "</span></span><br><span class="line">            + authResult);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//将认证信息放入Context中</span></span><br><span class="line">   SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line">   <span class="comment">//rememberMe处理</span></span><br><span class="line">   rememberMeServices.loginSuccess(request, response, authResult);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Fire event</span></span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">this</span>.eventPublisher != <span class="keyword">null</span>) &#123;</span><br><span class="line">      eventPublisher.publishEvent(<span class="keyword">new</span> InteractiveAuthenticationSuccessEvent(</span><br><span class="line">            authResult, <span class="keyword">this</span>.getClass()));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   successHandler.onAuthenticationSuccess(request, response, authResult);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>AbstractRememberMeServices.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRememberMeServices</span> <span class="keyword">implements</span> <span class="title">RememberMeServices</span>,</span></span><br><span class="line"><span class="class">      <span class="title">InitializingBean</span>, <span class="title">LogoutHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">loginSuccess</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response, Authentication successfulAuthentication)</span> </span>&#123;</span><br><span class="line">   <span class="comment">//是否开启RemmberMe，检查请求参数中是否带remember-me参数</span></span><br><span class="line">   <span class="keyword">if</span> (!rememberMeRequested(request, parameter)) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Remember-me login not requested."</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   onLoginSuccess(request, response, successfulAuthentication);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>PersistentTokenBasedRememberMeServices.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistentTokenBasedRememberMeServices</span> <span class="keyword">extends</span> <span class="title">AbstractRememberMeServices</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLoginSuccess</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response, Authentication successfulAuthentication)</span> </span>&#123;</span><br><span class="line">   String username = successfulAuthentication.getName();</span><br><span class="line"></span><br><span class="line">   logger.debug(<span class="string">"Creating new persistent login for user "</span> + username);</span><br><span class="line"></span><br><span class="line">   PersistentRememberMeToken persistentToken = <span class="keyword">new</span> PersistentRememberMeToken(</span><br><span class="line">         username, generateSeriesData(), generateTokenData(), <span class="keyword">new</span> Date());</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//写入token</span></span><br><span class="line">      tokenRepository.createNewToken(persistentToken);</span><br><span class="line"><span class="comment">//写入浏览器</span></span><br><span class="line">      addCookie(persistentToken, request, response);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      logger.error(<span class="string">"Failed to save persistent token "</span>, e);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="普通访问处理"><a href="#普通访问处理" class="headerlink" title="普通访问处理"></a>普通访问处理</h6><ol><li><code>RememberMeAuthenticationFilter.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RememberMeAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">      <span class="title">ApplicationEventPublisherAware</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">   HttpServletRequest request = (HttpServletRequest) req;</span><br><span class="line">   HttpServletResponse response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否已经有认证过的信息</span></span><br><span class="line">   <span class="keyword">if</span> (SecurityContextHolder.getContext().getAuthentication() == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">//如果前面的没验证，尝试使用rememberMe登陆</span></span><br><span class="line">      Authentication rememberMeAuth = rememberMeServices.autoLogin(request,</span><br><span class="line">            response);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (rememberMeAuth != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="comment">// Attempt authenticaton via AuthenticationManager</span></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            rememberMeAuth = authenticationManager.authenticate(rememberMeAuth);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Store to SecurityContextHolder</span></span><br><span class="line">            SecurityContextHolder.getContext().setAuthentication(rememberMeAuth);</span><br><span class="line"></span><br><span class="line">            onSuccessfulAuthentication(request, response, rememberMeAuth);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">               logger.debug(<span class="string">"SecurityContextHolder populated with remember-me token: '"</span></span><br><span class="line">                     + SecurityContextHolder.getContext().getAuthentication()</span><br><span class="line">                     + <span class="string">"'"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Fire event</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.eventPublisher != <span class="keyword">null</span>) &#123;</span><br><span class="line">               eventPublisher</span><br><span class="line">                     .publishEvent(<span class="keyword">new</span> InteractiveAuthenticationSuccessEvent(</span><br><span class="line">                           SecurityContextHolder.getContext()</span><br><span class="line">                                 .getAuthentication(), <span class="keyword">this</span>.getClass()));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (successHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">               successHandler.onAuthenticationSuccess(request, response,</span><br><span class="line">                     rememberMeAuth);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (AuthenticationException authenticationException) &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">               logger.debug(</span><br><span class="line">                     <span class="string">"SecurityContextHolder not populated with remember-me token, as "</span></span><br><span class="line">                           + <span class="string">"AuthenticationManager rejected Authentication returned by RememberMeServices: '"</span></span><br><span class="line">                           + rememberMeAuth</span><br><span class="line">                           + <span class="string">"'; invalidating remember-me token"</span>,</span><br><span class="line">                     authenticationException);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rememberMeServices.loginFail(request, response);</span><br><span class="line"></span><br><span class="line">            onUnsuccessfulAuthentication(request, response,</span><br><span class="line">                  authenticationException);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"SecurityContextHolder not populated with remember-me token, as it already contained: '"</span></span><br><span class="line">               + SecurityContextHolder.getContext().getAuthentication() + <span class="string">"'"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      chain.doFilter(request, response);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>AbstractRememberMeServices.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRememberMeServices</span> <span class="keyword">implements</span> <span class="title">RememberMeServices</span>,</span></span><br><span class="line"><span class="class">      <span class="title">InitializingBean</span>, <span class="title">LogoutHandler</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Authentication <span class="title">autoLogin</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">   String rememberMeCookie = extractRememberMeCookie(request);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (rememberMeCookie == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   logger.debug(<span class="string">"Remember-me cookie detected"</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (rememberMeCookie.length() == <span class="number">0</span>) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Cookie was empty"</span>);</span><br><span class="line">      cancelCookie(request, response);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   UserDetails user = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      String[] cookieTokens = decodeCookie(rememberMeCookie);</span><br><span class="line">      user = processAutoLoginCookie(cookieTokens, request, response);</span><br><span class="line">      userDetailsChecker.check(user);</span><br><span class="line"></span><br><span class="line">      logger.debug(<span class="string">"Remember-me cookie accepted"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> createSuccessfulAuthentication(request, user);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   cancelCookie(request, response);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><code>PersistentTokenBasedRememberMeServices.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersistentTokenBasedRememberMeServices</span> <span class="keyword">extends</span> <span class="title">AbstractRememberMeServices</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> UserDetails <span class="title">processAutoLoginCookie</span><span class="params">(String[] cookieTokens,</span></span></span><br><span class="line"><span class="function"><span class="params">      HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (cookieTokens.length != <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> InvalidCookieException(<span class="string">"Cookie token did not contain "</span> + <span class="number">2</span></span><br><span class="line">            + <span class="string">" tokens, but contained '"</span> + Arrays.asList(cookieTokens) + <span class="string">"'"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">final</span> String presentedSeries = cookieTokens[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">final</span> String presentedToken = cookieTokens[<span class="number">1</span>];</span><br><span class="line">   </span><br><span class="line"><span class="comment">//数据库查询</span></span><br><span class="line">   PersistentRememberMeToken token = tokenRepository</span><br><span class="line">         .getTokenForSeries(presentedSeries);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (token == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">// No series match, so we can't authenticate using this cookie</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RememberMeAuthenticationException(</span><br><span class="line">            <span class="string">"No persistent token found for series id: "</span> + presentedSeries);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// We have a match for this user/series combination</span></span><br><span class="line">   <span class="keyword">if</span> (!presentedToken.equals(token.getTokenValue())) &#123;</span><br><span class="line">      <span class="comment">// Token doesn't match series value. Delete all logins for this user and throw</span></span><br><span class="line">      <span class="comment">// an exception to warn them.</span></span><br><span class="line">      tokenRepository.removeUserTokens(token.getUsername());</span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> CookieTheftException(</span><br><span class="line">            messages.getMessage(</span><br><span class="line">                  <span class="string">"PersistentTokenBasedRememberMeServices.cookieStolen"</span>,</span><br><span class="line">                  <span class="string">"Invalid remember-me token (Series/token) mismatch. Implies previous cookie theft attack."</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (token.getDate().getTime() + getTokenValiditySeconds() * <span class="number">1000L</span> &lt; System</span><br><span class="line">         .currentTimeMillis()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RememberMeAuthenticationException(<span class="string">"Remember-me login has expired"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Token also matches, so login is valid. Update the token value, keeping the</span></span><br><span class="line">   <span class="comment">// *same* series number.</span></span><br><span class="line">   <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Refreshing persistent login token for user '"</span></span><br><span class="line">            + token.getUsername() + <span class="string">"', series '"</span> + token.getSeries() + <span class="string">"'"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   PersistentRememberMeToken newToken = <span class="keyword">new</span> PersistentRememberMeToken(</span><br><span class="line">         token.getUsername(), token.getSeries(), generateTokenData(), <span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      tokenRepository.updateToken(newToken.getSeries(), newToken.getTokenValue(),</span><br><span class="line">            newToken.getDate());</span><br><span class="line">      addCookie(newToken, request, response);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      logger.error(<span class="string">"Failed to update token: "</span>, e);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RememberMeAuthenticationException(</span><br><span class="line">            <span class="string">"Autologin failed due to data access problem"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> getUserDetailsService().loadUserByUsername(token.getUsername());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="短信登陆"><a href="#短信登陆" class="headerlink" title="短信登陆"></a>短信登陆</h4><p>​    前面已经实现了短信验证码的校验，校验通过后，需要根据手机号实现登陆。用户名密码登陆是spring security的默认实现，整个流程都是固定在代码中，虽然提供了部分接口使得可以进行扩展，但核心的流程是无法更改的，需要实现自定义的身份验证逻辑。</p><h5 id="登陆实现原理"><a href="#登陆实现原理" class="headerlink" title="登陆实现原理"></a>登陆实现原理</h5><p>​    Spring security 中密码登陆请求处理如下，我们需要仿造这个流程，写一套短信验证码登陆校验。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">用户名密码登陆请求</span><br><span class="line">   | (携带登陆信息)</span><br><span class="line">UsernamePasswordAuthenticationFilter</span><br><span class="line">   | (携带未认证的UsernamePasswordAuthenticationToken)</span><br><span class="line">AuthenticationManager</span><br><span class="line">   |</span><br><span class="line">AuthenticationProvider（由DaoAuthenticationProvider实现）</span><br><span class="line">   |</span><br><span class="line">UserDetailService</span><br><span class="line">   |</span><br><span class="line">UserDetails</span><br><span class="line">   |</span><br><span class="line">Authentication(已认证)</span><br><span class="line">   |</span><br><span class="line">SecurityContext</span><br><span class="line">   |</span><br><span class="line">SecurityContextHolder</span><br><span class="line">   |</span><br><span class="line">SecurityContextPersistenceFilter</span><br></pre></td></tr></table></figure><p>自定义验证短信登陆流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">手机登陆请求</span><br><span class="line">   | (携带登陆信息)</span><br><span class="line">SmsAuthenticationFilter</span><br><span class="line">   | (携带未认证的SmsAuthenticationToken)</span><br><span class="line">AuthenticationManager</span><br><span class="line">   |</span><br><span class="line">AuthenticationProvider（由SmsAuthenticationProvider实现）</span><br><span class="line">   |</span><br><span class="line">UserDetailService</span><br><span class="line">   |</span><br><span class="line">UserDetails</span><br><span class="line">   |</span><br><span class="line">Authentication(已认证)</span><br><span class="line">   |</span><br><span class="line">SecurityContext</span><br><span class="line">   |</span><br><span class="line">SecurityContextHolder</span><br><span class="line">   |</span><br><span class="line">SecurityContextPersistenceFilter</span><br></pre></td></tr></table></figure><p>总结：我们需要仿造一个<code>UsernamePasswordAuthenticationFilter</code>、<code>UsernamePasswordAuthenticationToken</code>、<code>DaoAuthenticationProvider</code>即可</p><h5 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h5><ol><li>定义Token</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 短信登录验证信息封装类</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180308</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeAuthenticationToken</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationToken</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = SpringSecurityCoreVersion.SERIAL_VERSION_UID;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化为手机号,验证完成为UserDetail</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object principal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化传入手机，设置校验状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mobile 手机号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SmsCodeAuthenticationToken</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">this</span>.principal = mobile;</span><br><span class="line">setAuthenticated(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验成功后的初始化Token信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> principal 用户信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> authorities 权限信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SmsCodeAuthenticationToken</span><span class="params">(Object principal,</span></span></span><br><span class="line"><span class="function"><span class="params">Collection&lt;? extends GrantedAuthority&gt; authorities)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(authorities);</span><br><span class="line"><span class="keyword">this</span>.principal = principal;</span><br><span class="line"><span class="keyword">super</span>.setAuthenticated(<span class="keyword">true</span>); <span class="comment">// must use super, as we override</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getPrincipal</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.principal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthenticated</span><span class="params">(<span class="keyword">boolean</span> isAuthenticated)</span> <span class="keyword">throws</span> IllegalArgumentException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (isAuthenticated) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line"><span class="string">"Cannot set this token to trusted - use constructor which takes a GrantedAuthority list instead"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">super</span>.setAuthenticated(<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eraseCredentials</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.eraseCredentials();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>定义Provider，Provider需要加入到ProviderManager进行管理</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义Provider校验短信验证码验证</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180228</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeAuthenticationProvider</span> <span class="keyword">implements</span> <span class="title">AuthenticationProvider</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证逻辑</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"></span><br><span class="line">SmsCodeAuthenticationToken authenticationToken = (SmsCodeAuthenticationToken) authentication;</span><br><span class="line"><span class="comment">//根据手机号获取用户信息</span></span><br><span class="line">UserDetails user = userDetailsService.loadUserByUsername((String) authenticationToken.getPrincipal());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InternalAuthenticationServiceException(<span class="string">"无法获取用户信息"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SmsCodeAuthenticationToken authenticationResult = <span class="keyword">new</span> SmsCodeAuthenticationToken(user, user.getAuthorities());</span><br><span class="line"></span><br><span class="line">authenticationResult.setDetails(authenticationToken.getDetails());</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> authenticationResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明当前Provider支持验证哪一个类型的Token</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supports</span><span class="params">(Class&lt;?&gt; authentication)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> SmsCodeAuthenticationToken.class.isAssignableFrom(authentication);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> UserDetailsService <span class="title">getUserDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userDetailsService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDetailsService</span><span class="params">(UserDetailsService userDetailsService)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userDetailsService = userDetailsService;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义Filter</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义手机登陆过滤器</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180228</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeAuthenticationFilter</span> <span class="keyword">extends</span> <span class="title">AbstractAuthenticationProcessingFilter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//请求中手机好的参数名</span></span><br><span class="line"><span class="keyword">private</span> String mobileParameter = SecurityConstants.DEFAULT_PARAMETER_NAME_MOBILE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> postOnly = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 只拦截指定的请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SmsCodeAuthenticationFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//手机登陆匹配哪个请求地址</span></span><br><span class="line"><span class="keyword">super</span>(<span class="keyword">new</span> AntPathRequestMatcher(SecurityConstants.DEFAULT_LOGIN_PROCESSING_URL_MOBILE, <span class="string">"POST"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (postOnly &amp;&amp; !request.getMethod().equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">"Authentication method not supported: "</span> + request.getMethod());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String mobile = obtainMobile(request);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (mobile == <span class="keyword">null</span>) &#123;</span><br><span class="line">mobile = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mobile = mobile.trim();</span><br><span class="line"></span><br><span class="line">SmsCodeAuthenticationToken authRequest = <span class="keyword">new</span> SmsCodeAuthenticationToken(mobile);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow subclasses to set the "details" property</span></span><br><span class="line">setDetails(request, authRequest);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取手机号</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">obtainMobile</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> request.getParameter(mobileParameter);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setDetails</span><span class="params">(HttpServletRequest request, SmsCodeAuthenticationToken authRequest)</span> </span>&#123;</span><br><span class="line">authRequest.setDetails(authenticationDetailsSource.buildDetails(request));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMobileParameter</span><span class="params">(String usernameParameter)</span> </span>&#123;</span><br><span class="line">Assert.hasText(usernameParameter, <span class="string">"Username parameter must not be empty or null"</span>);</span><br><span class="line"><span class="keyword">this</span>.mobileParameter = usernameParameter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPostOnly</span><span class="params">(<span class="keyword">boolean</span> postOnly)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.postOnly = postOnly;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">getMobileParameter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mobileParameter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>组合生成短信登陆配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义短信验证码身份验证配置</span></span><br><span class="line"><span class="comment"> * 合适浏览器、APP项目</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180228</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsCodeAuthenticationSecurityConfig</span> <span class="keyword">extends</span> <span class="title">SecurityConfigurerAdapter</span>&lt;<span class="title">DefaultSecurityFilterChain</span>, <span class="title">HttpSecurity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationSuccessHandler turingAuthenticationSuccessHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> AuthenticationFailureHandler turingAuthenticationFailureHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserDetailsService userDetailsService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置认证过滤器</span></span><br><span class="line">SmsCodeAuthenticationFilter smsCodeAuthenticationFilter = <span class="keyword">new</span> SmsCodeAuthenticationFilter();</span><br><span class="line">smsCodeAuthenticationFilter.setAuthenticationManager(http.getSharedObject(AuthenticationManager.class));</span><br><span class="line">smsCodeAuthenticationFilter.setAuthenticationSuccessHandler(turingAuthenticationSuccessHandler);</span><br><span class="line">smsCodeAuthenticationFilter.setAuthenticationFailureHandler(turingAuthenticationFailureHandler);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置provider</span></span><br><span class="line">SmsCodeAuthenticationProvider smsCodeAuthenticationProvider = <span class="keyword">new</span> SmsCodeAuthenticationProvider();</span><br><span class="line">smsCodeAuthenticationProvider.setUserDetailsService(userDetailsService);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Token是不需要配置的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//加入到ProviderManager</span></span><br><span class="line">http.authenticationProvider(smsCodeAuthenticationProvider)</span><br><span class="line"><span class="comment">//过滤器加入安全链中,在UsernamePasswordAuthenticationFilter后中加入</span></span><br><span class="line">.addFilterAfter(smsCodeAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>将配置应用在Spring Security核心配置中</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span>  <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//短信登录过滤器配置</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SmsCodeAuthenticationSecurityConfig smsCodeAuthenticationSecurityConfig;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       http.apply(smsCodeAuthenticationSecurityConfig);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//...其他配置省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>使用 Maven Module 搭建spring boot项目（整合Spring Security、Spring Social、spring OAuth）五</title>
      <link href="/2018/07/12/spring_security/5.SpringSecurityAuthorizationControllerAndIntegrateThymeleaf/"/>
      <url>/2018/07/12/spring_security/5.SpringSecurityAuthorizationControllerAndIntegrateThymeleaf/</url>
      <content type="html"><![CDATA[<h1 id="Spring-Security-权限控制及整合Thymeleaf引擎模板"><a href="#Spring-Security-权限控制及整合Thymeleaf引擎模板" class="headerlink" title="Spring Security 权限控制及整合Thymeleaf引擎模板"></a>Spring Security 权限控制及整合Thymeleaf引擎模板</h1><table><thead><tr><th>版本号</th><th>作者</th><th>日期</th><th>备注</th></tr></thead><tbody><tr><td>V0.1</td><td>huangz</td><td>2018-04-03</td><td>初稿</td></tr></tbody></table><hr><h2 id="Spring-Security-权限控制"><a href="#Spring-Security-权限控制" class="headerlink" title="Spring Security 权限控制"></a>Spring Security 权限控制</h2><h3 id="Spring-Security-对权限的定义"><a href="#Spring-Security-对权限的定义" class="headerlink" title="Spring Security 对权限的定义"></a>Spring Security 对权限的定义</h3><p><img src="images/authorize-01.png" alt=""></p><p><img src="images/authorize-02.png" alt=""></p><p>对权限的控制，可以通过简单的权限规则、复杂的权限规则进行自定义的配置</p><h4 id="简单规则（权限规则基本不变）"><a href="#简单规则（权限规则基本不变）" class="headerlink" title="简单规则（权限规则基本不变）"></a>简单规则（权限规则基本不变）</h4><p><img src="images/authorize-03.png" alt=""></p><h4 id="区分是否登陆"><a href="#区分是否登陆" class="headerlink" title="区分是否登陆"></a>区分是否登陆</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.authorizeRequests()<span class="comment">//对请求做授权</span></span><br><span class="line">.antMatchers(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL,</span><br><span class="line">      SecurityConstants.DEFAULT_LOGIN_PROCESSING_URL_MOBILE,</span><br><span class="line">      securityProperties.getBrowser().getLoginPage(),</span><br><span class="line">      SecurityConstants.DEFAULT_VALIDATE_CODE_URL_PREFIX+<span class="string">"/*"</span>,</span><br><span class="line">      securityProperties.getBrowser().getSignUpUrl(),</span><br><span class="line">      <span class="string">"/user/regist"</span>,</span><br><span class="line">      <span class="string">"/session/invalid"</span>,</span><br><span class="line">      securityProperties.getBrowser().getSignOutUrl()</span><br><span class="line">   ).permitAll() <span class="comment">//不用登陆就可以访问</span></span><br><span class="line">.anyRequest()<span class="comment">//任何请求</span></span><br><span class="line">.authenticated()<span class="comment">//都需要身份验证  //需要登陆才能访问</span></span><br></pre></td></tr></table></figure><h4 id="区分简单角色"><a href="#区分简单角色" class="headerlink" title="区分简单角色"></a>区分简单角色</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.authorizeRequests()<span class="comment">//对请求做授权</span></span><br><span class="line">.antMatchers(SecurityConstants.DEFAULT_UNAUTHENTICATION_URL,</span><br><span class="line">      SecurityConstants.DEFAULT_LOGIN_PROCESSING_URL_MOBILE,</span><br><span class="line">      securityProperties.getBrowser().getLoginPage(),</span><br><span class="line">      SecurityConstants.DEFAULT_VALIDATE_CODE_URL_PREFIX+<span class="string">"/*"</span>,</span><br><span class="line">      securityProperties.getBrowser().getSignUpUrl(),</span><br><span class="line">      <span class="string">"/user/regist"</span>,</span><br><span class="line">      <span class="string">"/session/invalid"</span>,</span><br><span class="line">      securityProperties.getBrowser().getSignOutUrl()</span><br><span class="line">   ).permitAll()</span><br><span class="line">.antMatchers(<span class="string">"/roles/*"</span>).hasRole(<span class="string">"ADMIN"</span>)<span class="comment">//有什么角色才能访问</span></span><br><span class="line">.anyRequest()<span class="comment">//任何请求</span></span><br><span class="line">.authenticated()<span class="comment">//都需要身份验证</span></span><br></pre></td></tr></table></figure><h4 id="Spring-Security-中用户的权限设置"><a href="#Spring-Security-中用户的权限设置" class="headerlink" title="Spring Security 中用户的权限设置"></a>Spring Security 中用户的权限设置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyUserDetailsService</span> <span class="keyword">implements</span> <span class="title">UserDetailsService</span>,<span class="title">SocialUserDetailsService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SocialUserDetails <span class="title">loadUserByUserId</span><span class="params">(String userId)</span> <span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">        String password = passwordEncoder.encode(<span class="string">"123456"</span>);<span class="comment">//此时应该是用户登记密码时的流程</span></span><br><span class="line">        logger.info(<span class="string">"数据库密码是: "</span> + password);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SocialUser(userId,password,</span><br><span class="line">                <span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>,<span class="keyword">true</span>,</span><br><span class="line">                AuthorityUtils.commaSeparatedStringToAuthorityList(<span class="keyword">super</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在生成<code>UserDetails</code> 和<code>SocialUserDetail</code> 接口实现类时，构造函数中都需要传入权限集合</p><p><code>Collection&lt;?extends GrantedAuthority&gt; authorities</code>类型的参数</p><p>上面代码中，通过<code>AuthorityUtils</code>工具类将字符串切割成权限集合</p><p><strong>在权限配置中，<code>antMatchers(&quot;/roles/*&quot;).hasRole(&quot;ADMIN&quot;),hasRole所对应的角色字符串为：ROLE_ADMIN</code></strong></p><p>(下文会解析为什么是有这样的命名规范)</p><p>在restful服务中，一个url通常对应不同httpmethod的请求，针对不同请求可以进行权限配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.antMatchers(HttpMethod.GET,<span class="string">"/roles/*"</span>).hasRole(<span class="string">"ADMIN"</span>) <span class="comment">//针对URL的get请求作权限</span></span><br></pre></td></tr></table></figure><h3 id="Spring-Security-授权源码分析"><a href="#Spring-Security-授权源码分析" class="headerlink" title="Spring Security 授权源码分析"></a>Spring Security 授权源码分析</h3><h4 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h4><p><img src="images/authorize-resource-analysis-01.png" alt=""></p><p><code>FilterSecurityInterceptor</code>与<code>ExceptionTranslationFilter</code>是授权相关的类。</p><p><code>FilterSecurityInterceptor</code>根据未能授权原因抛出异常给<code>ExceptionTranslationFilter</code>处理。 </p><p><code>AnonymousAuthenticationFilter</code>：（匿名认证过滤器）处于所有验证过滤器链中的最后一个</p><h4 id="授权分析"><a href="#授权分析" class="headerlink" title="授权分析"></a>授权分析</h4><p><img src="images/authorize-analysis-02.png" alt=""></p><p><code>AccessDecisionManager</code>(访问决定管理者)管理着一组Voter</p><p><code>AccessDecisionVoter</code>(投票者)。</p><p>投票逻辑：</p><ol><li><code>AffirmativeBased</code>(所有投票者中有一个过则通过，是spring 的默认实现)</li><li><code>ConsensusBased</code>(否定票与赞成票，多者胜出)</li><li><code>UnanimousBased</code>(只要有一个投票者不过则不过)</li></ol><p>SecurityConfig：配置信息</p><p>Authentication：验证信息，含用户权限信息</p><h4 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h4><p>1) <code>AnonymousAuthenticationFilter.java</code> 匿名认证过滤器，当其他认证都不通过，最后尝试此过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousAuthenticationFilter</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">   <span class="comment">//判断在前面的认证过程中是否已经创建了Authentication</span></span><br><span class="line">   <span class="keyword">if</span> (SecurityContextHolder.getContext().getAuthentication() == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="comment">//创建出一个匿名Authentication</span></span><br><span class="line">SecurityContextHolder.getContext().setAuthentication(</span><br><span class="line">            createAuthentication((HttpServletRequest) req));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"SecurityContextHolder not populated with anonymous token, as it already contained: '"</span></span><br><span class="line">               + SecurityContextHolder.getContext().getAuthentication() + <span class="string">"'"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   chain.doFilter(req, res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Authentication <span class="title">createAuthentication</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">   AnonymousAuthenticationToken auth = <span class="keyword">new</span> AnonymousAuthenticationToken(key,</span><br><span class="line">         principal, authorities);</span><br><span class="line">   auth.setDetails(authenticationDetailsSource.buildDetails(request));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> auth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnonymousAuthenticationFilter</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">this</span>(key, <span class="string">"anonymousUser"</span>, AuthorityUtils.createAuthorityList(<span class="string">"ROLE_ANONYMOUS"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2) <code>FilterSecurityInterceptor.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterSecurityInterceptor</span> <span class="keyword">extends</span> <span class="title">AbstractSecurityInterceptor</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">      <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> FilterInvocationSecurityMetadataSource securityMetadataSource;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> observeOncePerRequest = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response,</span></span></span><br><span class="line"><span class="function"><span class="params">         FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">      FilterInvocation fi = <span class="keyword">new</span> FilterInvocation(request, response, chain);</span><br><span class="line">      invoke(fi);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invoke</span><span class="params">(FilterInvocation fi)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> ((fi.getRequest() != <span class="keyword">null</span>)</span><br><span class="line">            &amp;&amp; (fi.getRequest().getAttribute(FILTER_APPLIED) != <span class="keyword">null</span>)</span><br><span class="line">            &amp;&amp; observeOncePerRequest) &#123;</span><br><span class="line">         <span class="comment">// filter already applied to this request and user wants us to observe</span></span><br><span class="line">         <span class="comment">// once-per-request handling, so don't re-do security checking</span></span><br><span class="line">         fi.getChain().doFilter(fi.getRequest(), fi.getResponse());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// first time this request being called, so perform security checking</span></span><br><span class="line">         <span class="keyword">if</span> (fi.getRequest() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            fi.getRequest().setAttribute(FILTER_APPLIED, Boolean.TRUE);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">//权限认证在这里面完成，如果这里抛出异常会给ExceptionTranslationFilter处理</span></span><br><span class="line">         InterceptorStatusToken token = <span class="keyword">super</span>.beforeInvocation(fi);</span><br><span class="line"></span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//服务器中的服务</span></span><br><span class="line">            fi.getChain().doFilter(fi.getRequest(), fi.getResponse());</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.finallyInvocation(token);</span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">super</span>.afterInvocation(token, <span class="keyword">null</span>);</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3) <code>AbstractSecurityInterceptor.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSecurityInterceptor</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> InterceptorStatusToken <span class="title">beforeInvocation</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">   Assert.notNull(object, <span class="string">"Object was null"</span>);</span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">boolean</span> debug = logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!getSecureObjectClass().isAssignableFrom(object.getClass())) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">            <span class="string">"Security invocation attempted for object "</span></span><br><span class="line">                  + object.getClass().getName()</span><br><span class="line">                  + <span class="string">" but AbstractSecurityInterceptor only configured to support secure objects of type: "</span></span><br><span class="line">                  + getSecureObjectClass());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//从配置信息中获取信息，需要的权限，封装成ConfigAttribute</span></span><br><span class="line">   Collection&lt;ConfigAttribute&gt; attributes = <span class="keyword">this</span>.obtainSecurityMetadataSource()</span><br><span class="line">         .getAttributes(object);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (attributes == <span class="keyword">null</span> || attributes.isEmpty()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (rejectPublicInvocations) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(</span><br><span class="line">               <span class="string">"Secure object invocation "</span></span><br><span class="line">                     + object</span><br><span class="line">                     + <span class="string">" was denied as public invocations are not allowed via this interceptor. "</span></span><br><span class="line">                     + <span class="string">"This indicates a configuration error because the "</span></span><br><span class="line">                     + <span class="string">"rejectPublicInvocations property is set to 'true'"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Public object - authentication not attempted"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      publishEvent(<span class="keyword">new</span> PublicInvocationEvent(object));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// no further work post-invocation</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Secure object: "</span> + object + <span class="string">"; Attributes: "</span> + attributes);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (SecurityContextHolder.getContext().getAuthentication() == <span class="keyword">null</span>) &#123;</span><br><span class="line">      credentialsNotFound(messages.getMessage(</span><br><span class="line">            <span class="string">"AbstractSecurityInterceptor.authenticationNotFound"</span>,</span><br><span class="line">            <span class="string">"An Authentication object was not found in the SecurityContext"</span>),</span><br><span class="line">            object, attributes);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//获取当前的Authentication</span></span><br><span class="line">   Authentication authenticated = authenticateIfRequired();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Attempt authorization</span></span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//获得Authentication、当前请求信息和ConfigAttribute后，进行投票</span></span><br><span class="line">      <span class="keyword">this</span>.accessDecisionManager.decide(authenticated, object, attributes);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">catch</span> (AccessDeniedException accessDeniedException) &#123;</span><br><span class="line">      publishEvent(<span class="keyword">new</span> AuthorizationFailureEvent(object, attributes, authenticated,</span><br><span class="line">            accessDeniedException));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">throw</span> accessDeniedException;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">      logger.debug(<span class="string">"Authorization successful"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (publishAuthorizationSuccess) &#123;</span><br><span class="line">      publishEvent(<span class="keyword">new</span> AuthorizedEvent(object, attributes, authenticated));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// Attempt to run as a different user</span></span><br><span class="line">   Authentication runAs = <span class="keyword">this</span>.runAsManager.buildRunAs(authenticated, object,</span><br><span class="line">         attributes);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (runAs == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">         logger.debug(<span class="string">"RunAsManager did not change Authentication object"</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// no further work post-invocation</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> InterceptorStatusToken(SecurityContextHolder.getContext(), <span class="keyword">false</span>,</span><br><span class="line">            attributes, object);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Switching to RunAs Authentication: "</span> + runAs);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      SecurityContext origCtx = SecurityContextHolder.getContext();</span><br><span class="line">      SecurityContextHolder.setContext(SecurityContextHolder.createEmptyContext());</span><br><span class="line">      SecurityContextHolder.getContext().setAuthentication(runAs);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// need to revert to token.Authenticated post-invocation</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> InterceptorStatusToken(origCtx, <span class="keyword">true</span>, attributes, object);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4) <code>AffirmativeBased.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AffirmativeBased</span> <span class="keyword">extends</span> <span class="title">AbstractAccessDecisionManager</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">decide</span><span class="params">(Authentication authentication, Object object,</span></span></span><br><span class="line"><span class="function"><span class="params">      Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> deny = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">//所有的投票者投票</span></span><br><span class="line">   <span class="keyword">for</span> (AccessDecisionVoter voter : getDecisionVoters()) &#123;</span><br><span class="line"><span class="comment">//投票后返回投票结果</span></span><br><span class="line">      <span class="keyword">int</span> result = voter.vote(authentication, object, configAttributes);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">         logger.debug(<span class="string">"Voter: "</span> + voter + <span class="string">", returned: "</span> + result);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">switch</span> (result) &#123;</span><br><span class="line"><span class="comment">//有一个投票者则通过</span></span><br><span class="line">      <span class="keyword">case</span> AccessDecisionVoter.ACCESS_GRANTED:</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">case</span> AccessDecisionVoter.ACCESS_DENIED:</span><br><span class="line">         deny++;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">         <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (deny &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> AccessDeniedException(messages.getMessage(</span><br><span class="line">            <span class="string">"AbstractAccessDecisionManager.accessDenied"</span>, <span class="string">"Access is denied"</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// To get this far, every AccessDecisionVoter abstained</span></span><br><span class="line">   checkAllowIfAllAbstainDecisions();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="分析hasRole角色配置"><a href="#分析hasRole角色配置" class="headerlink" title="分析hasRole角色配置"></a>分析hasRole角色配置</h4><p>前面配置提到 :</p><p><code>antMatchers(&quot;/roles/*&quot;).hasRole(&quot;ADMIN&quot;),hasRole所对应的角色字符串为：ROLE_ADMIN</code></p><p><code>ExpressionUrlAuthorizationConfigurer.java</code>源码跟踪</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpressionUrlAuthorizationConfigurer</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> ExpressionUrlAuthorizationConfigurer&lt;H&gt;.<span class="function">ExpressionInterceptUrlRegistry <span class="title">hasRole</span><span class="params">(String role)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.access(ExpressionUrlAuthorizationConfigurer.hasRole(role));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">hasRole</span><span class="params">(String role)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(role, <span class="string">"role cannot be null"</span>);</span><br><span class="line">    <span class="keyword">if</span>(role.startsWith(<span class="string">"ROLE_"</span>)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"role should not start with 'ROLE_' since it is automatically inserted. Got '"</span> + role + <span class="string">"'"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//最终返回sping security 需要判断的一个完整的表达式</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hasRole('ROLE_"</span> + role + <span class="string">"')"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此在<code>hasRole</code>中只需要配置角色名称<code>ADMIN</code>，而配置用户角色权限的时候，需要配置<code>ROLE_ADMIN</code></p><h3 id="Spring-Security-权限表达式"><a href="#Spring-Security-权限表达式" class="headerlink" title="Spring Security 权限表达式"></a>Spring Security 权限表达式</h3><p><img src="images/authorize-express-01.png" alt=""></p><p>在spring security中，每个权限表达式都对应一个方法，这个方法跟在<code>antMatchers(&quot;/roles/*&quot;)</code>，</p><p>不支持<code>.antMatchers(&quot;/roles/*&quot;).hasRole(&quot;ADMIN&quot;)</code>多个并列调用。</p><p>但是可以使用另外一个提供的方法处理并列逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">antMatchers(<span class="string">"/roles/*"</span>)</span><br><span class="line">.access(<span class="string">"hasRole('ADMIN') and hasIpAddress('192.168.1.235')"</span>)</span><br></pre></td></tr></table></figure><h3 id="复杂规则权限开发"><a href="#复杂规则权限开发" class="headerlink" title="复杂规则权限开发"></a>复杂规则权限开发</h3><h4 id="RBAC模型"><a href="#RBAC模型" class="headerlink" title="RBAC模型"></a>RBAC模型</h4><p><img src="images/rbac.png" alt=""></p><h4 id="开发自定义的权限模块"><a href="#开发自定义的权限模块" class="headerlink" title="开发自定义的权限模块"></a>开发自定义的权限模块</h4><p>新建一个子模块项目，命名为<code>chu-authorize</code></p><p><code>pom.xml</code> 文件定义</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vic-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>vic.tjs.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>chu-authorize<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>RbacService</code> 定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RBAC接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RbacService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 权限认证</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> request 请求</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> authentication 认证信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">boolean</span> <span class="title">hasPermission</span><span class="params">(HttpServletRequest request, Authentication authentication)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> vic.tjs.authorize.rbac; </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RBAC接口实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"rbacService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RbacServiceImpl</span> <span class="keyword">implements</span> <span class="title">RbacService</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> AntPathMatcher antPathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//实现处理逻辑</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPermission</span><span class="params">(HttpServletRequest request, Authentication authentication)</span> </span>&#123;</span><br><span class="line">      Object principal = authentication.getPrincipal();</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">boolean</span> hasPermission = <span class="keyword">false</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span> (principal <span class="keyword">instanceof</span> UserDetails) &#123;</span><br><span class="line">         </span><br><span class="line">         String username = ((UserDetails)principal).getUsername();</span><br><span class="line">         <span class="comment">//读取模拟用户所拥有权限的所有URL</span></span><br><span class="line">         Set&lt;String&gt; urls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">         <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">            <span class="keyword">if</span>(antPathMatcher.match(url, request.getRequestURI()))&#123;</span><br><span class="line">               hasPermission = <span class="keyword">true</span>;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> hasPermission;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用自定义认证"><a href="#使用自定义认证" class="headerlink" title="使用自定义认证"></a>使用自定义认证</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.anyRequest().access(<span class="string">"@rbacService.hasPermission(request,authentication)"</span>);</span><br></pre></td></tr></table></figure><h2 id="Spring-Security-整合-Thymeleaf-引擎模板"><a href="#Spring-Security-整合-Thymeleaf-引擎模板" class="headerlink" title="Spring Security 整合 Thymeleaf 引擎模板"></a>Spring Security 整合 Thymeleaf 引擎模板</h2><blockquote><p>参考<a href="https://www.thymeleaf.org/doc/articles/springsecurity.html" target="_blank" rel="noopener">Thymeleaf官方整合Security文档</a></p></blockquote><h3 id="目的："><a href="#目的：" class="headerlink" title="目的："></a>目的：</h3><p>更方便的在thymeleaf中使用security安全表达式</p><h3 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h3><p>引用 Spring security 和 Thymeleaf 整合包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="引入测试权限"><a href="#引入测试权限" class="headerlink" title="引入测试权限"></a>引入测试权限</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config.antMatchers(<span class="string">"/thymeleaf/admins/**"</span>).hasAnyRole(<span class="string">"ADMIN"</span>)</span><br><span class="line">.antMatchers(<span class="string">"/thymeleaf/users/**"</span>).hasAnyRole(<span class="string">"USER"</span>)</span><br></pre></td></tr></table></figure><h3 id="页面引用"><a href="#页面引用" class="headerlink" title="页面引用"></a>页面引用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity4"</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authorize</span>=<span class="string">"isAuthenticated()"</span>&gt;</span></span><br><span class="line">                | Logged user: <span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"name"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> |</span><br><span class="line">                Roles: <span class="tag">&lt;<span class="name">span</span> <span class="attr">sec:authentication</span>=<span class="string">"principal.authorities"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> |</span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/logout&#125;"</span>&gt;</span>登出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>标签解释</strong><br><code>sec:authorize</code> : 基于表达式的计算结果，条件性的渲染内容，接受spring security 权限表达式（本文上部分已列出常用的表达式），若权限认证成功，则标签执行（理解为：显示），否则不执行（理解为：不显示）</p><p><code>sec:authentication</code> :渲染认证对象的属性， 获取Authentication对象中的信息，并执行输出</p><p>备注： 待时间充足，将更深入的了解整合的其他功能</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>使用 Maven Module 搭建spring boot项目（整合Spring Security、Spring Social、spring OAuth）四</title>
      <link href="/2018/07/12/spring_security/4.SpringSecuritySession/"/>
      <url>/2018/07/12/spring_security/4.SpringSecuritySession/</url>
      <content type="html"><![CDATA[<h1 id="使用-Maven-Module-搭建spring-boot项目（整合Spring-Security、Spring-Social、spring-OAuth）四"><a href="#使用-Maven-Module-搭建spring-boot项目（整合Spring-Security、Spring-Social、spring-OAuth）四" class="headerlink" title="使用 Maven Module 搭建spring boot项目（整合Spring Security、Spring Social、spring OAuth）四"></a>使用 Maven Module 搭建spring boot项目（整合Spring Security、Spring Social、spring OAuth）四</h1><table><thead><tr><th>版本号</th><th>作者</th><th>日期</th><th>备注</th></tr></thead><tbody><tr><td>V0.1</td><td>huangz</td><td>2018-04-03</td><td>初稿</td></tr><tr><td>V0.2</td><td>huangz</td><td>2018-04-20</td><td>新增并发流程说明</td></tr><tr><td>V0.3</td><td>huangz</td><td>2018-04-25</td><td>解决session并发登录退出失效问题</td></tr></tbody></table><hr><h2 id="Spring-boot-中应用-Spring-Session"><a href="#Spring-boot-中应用-Spring-Session" class="headerlink" title="Spring boot 中应用 Spring Session"></a>Spring boot 中应用 Spring Session</h2><p>spring session 只对浏览器环境下才生效,因此在浏览器项目中加入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单机Session管理"><a href="#单机Session管理" class="headerlink" title="单机Session管理"></a>单机Session管理</h3><h4 id="Session-超时和并发处理"><a href="#Session-超时和并发处理" class="headerlink" title="Session 超时和并发处理"></a>Session 超时和并发处理</h4><h5 id="spring-session-配置"><a href="#spring-session-配置" class="headerlink" title="spring session 配置"></a>spring session 配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># session 默认30分钟超时</span><br><span class="line">server.session.timeout = 600</span><br></pre></td></tr></table></figure><p>若配置session超时时间少于1分钟,则会设置为1分钟,也就是60秒</p><p>设置超时时间源码分析:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.context.embedded.tomcat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TomcatEmbeddedServletContainerFactory</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//配置session</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureSession</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获得session的超时时间</span></span><br><span class="line">        <span class="keyword">long</span> sessionTimeout = <span class="keyword">this</span>.getSessionTimeoutInMinutes();</span><br><span class="line">        context.setSessionTimeout((<span class="keyword">int</span>)sessionTimeout);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.isPersistSession()) &#123;</span><br><span class="line">            Manager manager = context.getManager();</span><br><span class="line">            <span class="keyword">if</span> (manager == <span class="keyword">null</span>) &#123;</span><br><span class="line">                manager = <span class="keyword">new</span> StandardManager();</span><br><span class="line">                context.setManager((Manager)manager);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.configurePersistSession((Manager)manager);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            context.addLifecycleListener(<span class="keyword">new</span> TomcatEmbeddedServletContainerFactory.DisablePersistSessionListener(<span class="keyword">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获得session超时时间</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">getSessionTimeoutInMinutes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> sessionTimeout = (<span class="keyword">long</span>)<span class="keyword">this</span>.getSessionTimeout();</span><br><span class="line">        <span class="keyword">if</span> (sessionTimeout &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">            <span class="comment">//将秒数转化为分数,如果小与1则按1分钟算</span></span><br><span class="line">            sessionTimeout = Math.max(TimeUnit.SECONDS.toMinutes(sessionTimeout), <span class="number">1L</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sessionTimeout;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Spring-Security-对-Session-过期处理"><a href="#Spring-Security-对-Session-过期处理" class="headerlink" title="Spring Security 对 Session 过期处理"></a>Spring Security 对 Session 过期处理</h5><p>spring-security-web包中提供了spring security 对session的管理，提供两个过滤器<code>ConcurrentSessionFilter</code>与<code>SessionManagementFilter</code></p><p>spring security对session过期的处理可以是</p><ol><li>配置session失效的处理url(注意要放开URL的权限)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http.sessionManagement()</span><br><span class="line">    .invalidSessionUrl(URL)<span class="comment">//配置session失效跳转的url</span></span><br></pre></td></tr></table></figure><ol start="2"><li>配置seesion失效策略处理器(设置了处理器则配置失效的url就会失效)</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http.sessionManagement()</span><br><span class="line">    .invalidSessionUrl(URL)<span class="comment">//配置session失效跳转的url</span></span><br><span class="line">    .invalidSessionStrategy(invalidSessionStrategy)<span class="comment">//session过期处理器,invalidSessionUrl就会失效</span></span><br></pre></td></tr></table></figure><h5 id="Spring-Security-对-Session-并发处理"><a href="#Spring-Security-对-Session-并发处理" class="headerlink" title="Spring Security 对 Session 并发处理"></a>Spring Security 对 Session 并发处理</h5><p>控制用户在系统中只能有一个或指定个数的session</p><h6 id="并发处理的策略"><a href="#并发处理的策略" class="headerlink" title="并发处理的策略"></a>并发处理的策略</h6><ol><li>踢掉策略</li></ol><p>后登录的session会使前一个登录的session失效掉,通过以下配置实现,并且可配置因并发失效处理的URL</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启session管理功能</span></span><br><span class="line">http.sessionManagement().maximumSessions(number)</span><br><span class="line">         .expiredUrl(URL) <span class="comment">//处理返回给失效session的url</span></span><br></pre></td></tr></table></figure><ol start="2"><li>禁止策略</li></ol><p>禁止后登录的session登录进入,当前正在系统的session继续使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">http.sessionManagement().maximumSessions(number)</span><br><span class="line">         .expiredUrl(URL) <span class="comment">//处理返回给失效session的url</span></span><br><span class="line">         .maxSessionsPreventsLogin(<span class="keyword">true</span>) <span class="comment">//默认为false,不阻止登录</span></span><br><span class="line">         <span class="comment">//.expiredSessionStrategy() 设置并发策略,则会让expiredUrl配置失效</span></span><br></pre></td></tr></table></figure><h5 id="实现Session过期与并发处理"><a href="#实现Session过期与并发处理" class="headerlink" title="实现Session过期与并发处理"></a>实现Session过期与并发处理</h5><p>1.定义自定义session属性配置,并将其加入<code>BrowserProperties</code>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * session的配置</span><br><span class="line"> * created by chuIllusions_tan 20180322</span><br><span class="line"> */</span><br><span class="line">public class SessionProperties &#123;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 同一个用户在系统中的最大session数，默认1</span><br><span class="line"> */</span><br><span class="line">private int maximumSessions = 1;</span><br><span class="line">/**</span><br><span class="line"> * 达到最大session时是否阻止新的登录请求，默认为false，不阻止，新的登录会将老的登录失效掉</span><br><span class="line"> */</span><br><span class="line">private boolean maxSessionsPreventsLogin;</span><br><span class="line">/**</span><br><span class="line"> * session失效时跳转的地址</span><br><span class="line"> */</span><br><span class="line">private String sessionInvalidUrl = SecurityConstants.DEFAULT_SESSION_INVALID_URL;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SessionProperties session = <span class="keyword">new</span> SessionProperties();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用模板方法定义策略抽象类,抽取相同的处理逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于处理session失效策略（踢掉策略 与 禁止登陆策略）</span></span><br><span class="line"><span class="comment"> * session失效包括两种情况：session 超时、session并发</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180304</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSessionStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转的url</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String destinationUrl;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 重定向策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> RedirectStrategy redirectStrategy = <span class="keyword">new</span> DefaultRedirectStrategy();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳转前是否创建新的session</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> createNewSession = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SecurityProperties securityPropertie;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> securityPropertie</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractSessionStrategy</span><span class="params">(SecurityProperties securityPropertie)</span> </span>&#123;</span><br><span class="line">String invalidSessionUrl = securityPropertie.getBrowser().getSession().getSessionInvalidUrl();</span><br><span class="line">Assert.isTrue(UrlUtils.isValidRedirectUrl(invalidSessionUrl), <span class="string">"url must start with '/' or with 'http(s)'"</span>);</span><br><span class="line"><span class="comment">//Assert.isTrue(StringUtils.endsWithIgnoreCase(invalidSessionUrl, ".html"), "url must end with '.html'");</span></span><br><span class="line"><span class="keyword">this</span>.destinationUrl = invalidSessionUrl;</span><br><span class="line"><span class="keyword">this</span>.securityPropertie = securityPropertie;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSessionInvalid</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (createNewSession) &#123;</span><br><span class="line">request.getSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String sourceUrl = request.getRequestURI();</span><br><span class="line">String targetUrl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StringUtils.endsWithIgnoreCase(sourceUrl, <span class="string">".html"</span>)) &#123;</span><br><span class="line">targetUrl = destinationUrl+<span class="string">".html"</span>;</span><br><span class="line">logger.info(<span class="string">"session失效,跳转到"</span>+targetUrl);</span><br><span class="line">redirectStrategy.sendRedirect(request, response, targetUrl);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">Object result = buildResponseContent(request);</span><br><span class="line">response.setStatus(HttpStatus.UNAUTHORIZED.value());</span><br><span class="line">response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">response.getWriter().write(objectMapper.writeValueAsString(result));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">buildResponseContent</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">String message = <span class="string">"session已失效"</span>;</span><br><span class="line"><span class="keyword">if</span>(isConcurrency())&#123;</span><br><span class="line">message = message + <span class="string">"，有可能是并发登录导致的"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SimpleResponse(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * session失效是否是并发导致的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isConcurrency</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateNewSession</span><span class="params">(<span class="keyword">boolean</span> createNewSession)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.createNewSession = createNewSession;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>定义session失效策略,需要实现InvalidSessionStrategy接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认的session失效处理策略</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180308</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractInvalidSessionStrategy</span> <span class="keyword">extends</span> <span class="title">AbstractSessionStrategy</span> <span class="keyword">implements</span> <span class="title">InvalidSessionStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractInvalidSessionStrategy</span><span class="params">(SecurityProperties securityProperties)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(securityProperties);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInvalidSessionDetected</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">onSessionInvalid(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>定义session并发策略</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 并发登录导致session失效时，默认的处理策略</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180308</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractExpiredSessionStrategy</span> <span class="keyword">extends</span> <span class="title">AbstractSessionStrategy</span> <span class="keyword">implements</span> <span class="title">SessionInformationExpiredStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractExpiredSessionStrategy</span><span class="params">(SecurityProperties securityPropertie)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(securityPropertie);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onExpiredSessionDetected</span><span class="params">(SessionInformationExpiredEvent event)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">onSessionInvalid(event.getRequest(), event.getResponse());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 覆盖父类,证明其是并发登录的</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isConcurrency</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>策略bean的配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * session管理策略相关的扩展点配置。配置在这里的bean，业务系统都可以通过声明同类型或同名的bean来覆盖安全</span></span><br><span class="line"><span class="comment"> * 模块默认的配置。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180308</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionStrategyBeanConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SecurityProperties securityProperties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * session失效时的处理策略配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(InvalidSessionStrategy.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> InvalidSessionStrategy <span class="title">invalidSessionStrategy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AbstractInvalidSessionStrategy(securityProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 并发登录导致前一个session失效时的处理策略配置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(SessionInformationExpiredStrategy.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SessionInformationExpiredStrategy <span class="title">sessionInformationExpiredStrategy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AbstractExpiredSessionStrategy(securityProperties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>生成session配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 浏览器项目的安全配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180227</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span>  <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line"><span class="comment">//session失效策略</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> InvalidSessionStrategy invalidSessionStrategy;</span><br><span class="line"><span class="comment">//session并发策略</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SessionInformationExpiredStrategy sessionInformationExpiredStrategy;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置浏览器特有的安全配置，并且读取全局配置，加入spring security安全配置中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//开启session管理功能</span></span><br><span class="line">http.sessionManagement()</span><br><span class="line">.invalidSessionStrategy(invalidSessionStrategy)<span class="comment">//session过期处理器</span></span><br><span class="line">.maximumSessions(securityProperties.getBrowser().getSession().getMaximumSessions())<span class="comment">//用户最大session数</span></span><br><span class="line">.maxSessionsPreventsLogin(securityProperties.getBrowser().getSession().isMaxSessionsPreventsLogin())<span class="comment">//是否阻止并发登录</span></span><br><span class="line">.expiredSessionStrategy(sessionInformationExpiredStrategy);<span class="comment">//session并发处理器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="流程整体描述"><a href="#流程整体描述" class="headerlink" title="流程整体描述"></a>流程整体描述</h5><p>​    <strong>session过期</strong></p><p>​    当ssesion过期时，自动进入自定义的session过去策略器。</p><p>​    <strong>session并发</strong></p><ol><li>当<code>maxSessionsPreventsLogin</code>配置为true时，即阻止并发登录，正在登录的用户正常使用，后登录的用户无法登入系统。当后登录用户发起登录请求时，通过过滤器的检验，发现已经出现了session并发，后登陆的用户会进入我们自定义的登录失败处理器中，并且<code>AuthenticationException</code>的实现类为<code>SessionAuthenticationException</code></li><li>当<code>maxSessionsPreventsLogin</code>配置为false时(默认)，不阻止并发登录，后登陆的用户B登入系统，但前面已经登录的用户A已经是失效状态。当用户A再发起请求时，则会进入自定义的session并发处理策略器中。</li></ol><h3 id="集群-Session-管理"><a href="#集群-Session-管理" class="headerlink" title="集群 Session 管理"></a>集群 Session 管理</h3><p><img src="images/session-jiqun.png" alt=""></p><h4 id="Spring-session对session存储方式的支持"><a href="#Spring-session对session存储方式的支持" class="headerlink" title="Spring session对session存储方式的支持"></a>Spring session对session存储方式的支持</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.boot.autoconfigure.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> StoreType &#123;</span><br><span class="line"><span class="comment">//redis //存放在非关系型数据库</span></span><br><span class="line">    REDIS,</span><br><span class="line"><span class="comment">//mongo</span></span><br><span class="line">    MONGO,</span><br><span class="line"><span class="comment">//jdbc 存放在数据库中</span></span><br><span class="line">    JDBC,</span><br><span class="line"><span class="comment">//跟redis类似</span></span><br><span class="line">    HAZELCAST,</span><br><span class="line"><span class="comment">//放在本机内存</span></span><br><span class="line">    HASH_MAP,</span><br><span class="line"><span class="comment">//使用默认session</span></span><br><span class="line">    NONE;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StoreType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>使用Redis的原因:</strong></p><p>​    Session需要频繁访问，如果放在数据库中，会造成很大的压力；另外session会有一个时效性，超时时间，还要在数据库中进行清除。</p><p>​    Redis 特点就是对数据的存储会有一个过期的时间</p><h4 id="开启支持"><a href="#开启支持" class="headerlink" title="开启支持"></a>开启支持</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#使用了session管理</span></span><br><span class="line"><span class="attr">  session:</span></span><br><span class="line"><span class="attr">    store-type:</span> <span class="string">redis</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>此前我将生产的图片也存放在seesion中了,Image并未实现序列化借口,存放在redis中都数据需要被序列化,否则可能会抛出以下异常</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nested exception is java.lang.IllegalArgumentException: DefaultSerializer requires a Serializable payload but received an object of type [vic.security.core.validate.code.image.ImageCode]</span><br></pre></td></tr></table></figure><h2 id="Spring-Security-退出登录"><a href="#Spring-Security-退出登录" class="headerlink" title="Spring Security 退出登录"></a>Spring Security 退出登录</h2><p>Spring Security 默认的退出登录有指定的服务<code>/logout</code></p><h3 id="退出处理逻辑"><a href="#退出处理逻辑" class="headerlink" title="退出处理逻辑"></a>退出处理逻辑</h3><p>spring security 退出处理逻辑:</p><ol><li>使当前session失效</li><li>清除与当前用户相关的remember-me记录</li><li>清空当前的SecurityContext</li><li>重定向到登录页</li></ol><h3 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h3><p>spring security 提供类似于<code>AuthenticationSuccessHandler</code>登录成功处理器的<code>LogoutSuccessHandler</code>退出成功处理器</p><h4 id="自定义LogoutSuccessHandler"><a href="#自定义LogoutSuccessHandler" class="headerlink" title="自定义LogoutSuccessHandler"></a>自定义LogoutSuccessHandler</h4><ol><li>定义默认实现的退出成功处理器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认的退出成功处理器，如果设置了turing.security.browser.signOutUrl，则跳到配置的地址上，</span></span><br><span class="line"><span class="comment"> * 如果没配置，则返回json格式的响应。</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan on 20180308</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractLogoutSuccessHandler</span> <span class="keyword">implements</span> <span class="title">LogoutSuccessHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String signOutSuccessUrl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractLogoutSuccessHandler</span><span class="params">(String signOutSuccessUrl)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.signOutSuccessUrl = signOutSuccessUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLogoutSuccess</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">logger.info(<span class="string">"退出成功"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(signOutSuccessUrl)) &#123;</span><br><span class="line">response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">response.setStatus(HttpStatus.OK.value());</span><br><span class="line">response.getWriter().write(objectMapper.writeValueAsString(<span class="keyword">new</span> SimpleResponse(<span class="string">"退出成功"</span>)));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">response.sendRedirect(signOutSuccessUrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setObjectMapper</span><span class="params">(ObjectMapper objectMapper)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.objectMapper = objectMapper;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><code>AuthenticationHandlerBeanConfig.java</code>中添加可配置Bean</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退出登录时跳转的策略</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span>(LogoutSuccessHandler.class)</span><br><span class="line"><span class="function"><span class="keyword">public</span> LogoutSuccessHandler <span class="title">logoutSuccessHandler</span><span class="params">()</span></span>&#123;</span><br><span class="line">AbstractLogoutSuccessHandler abstractLogoutSuccessHandler= <span class="keyword">new</span> AbstractLogoutSuccessHandler(securityProperties.getBrowser().getSignOutUrl());</span><br><span class="line">abstractLogoutSuccessHandler.setObjectMapper(objectMapper);</span><br><span class="line"><span class="keyword">return</span> abstractLogoutSuccessHandler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="加入总配置"><a href="#加入总配置" class="headerlink" title="加入总配置"></a>加入总配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 浏览器项目的安全配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * created by chuIllusions_tan 20180227</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserSecurityConfig</span>  <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> LogoutSuccessHandler logoutSuccessHandler;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置浏览器特有的安全配置，并且读取全局配置，加入spring security安全配置中</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> http</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//退出登录管理</span></span><br><span class="line">http.logout()</span><br><span class="line">.logoutUrl(<span class="string">"/signOut"</span>)<span class="comment">//配置请求退出处理的URL,覆盖默认</span></span><br><span class="line">            <span class="comment">//.logoutSuccessUrl("")</span></span><br><span class="line">.logoutSuccessHandler(logoutSuccessHandler)<span class="comment">//配置了handler会使这条配置失效.logoutSuccessUrl("")</span></span><br><span class="line">.deleteCookies(<span class="string">"JSESSIONID"</span>);<span class="comment">//其他操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Security-集合-Session-并发登录退出问题"><a href="#Spring-Security-集合-Session-并发登录退出问题" class="headerlink" title="Spring Security 集合 Session 并发登录退出问题"></a>Spring Security 集合 Session 并发登录退出问题</h2><h3 id="问题抛出"><a href="#问题抛出" class="headerlink" title="问题抛出"></a>问题抛出</h3><p>​    当请求退出登录时，成功退出跳转到登录页面，再次进行登录，无法进行登录，提示用户已经登录，存在session并发问题（理想状态下，退出成功之后，再次登录，不存在并发问题，进入系统）</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>查看源码进行分析：</p><p><code>LogoutFilter.java</code>检验退出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogoutFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span> </span>&#123;</span><br><span class="line">    <span class="comment">//退出登录后进行拦截处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        HttpServletRequest request = (HttpServletRequest)req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse)res;</span><br><span class="line">        <span class="comment">//判断请求是否是需要退出登录</span></span><br><span class="line">        <span class="comment">//请求是退出登录则进入逻辑处理</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.requiresLogout(request, response)) &#123;</span><br><span class="line">            Authentication auth = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.logger.debug(<span class="string">"Logging out user '"</span> + auth + <span class="string">"' and transferring to logout destination"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//处理退出</span></span><br><span class="line">            <span class="keyword">this</span>.handler.logout(request, response, auth);</span><br><span class="line">            <span class="comment">//退出成功</span></span><br><span class="line">            <span class="keyword">this</span>.logoutSuccessHandler.onLogoutSuccess(request, response, auth);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SecurityContextLogoutHandler.java</code>  处理退出逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityContextLogoutHandler</span> <span class="keyword">implements</span> <span class="title">LogoutHandler</span> </span>&#123;</span><br><span class="line"><span class="comment">//处理退出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">logout</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Authentication authentication)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(request, <span class="string">"HttpServletRequest required"</span>);</span><br><span class="line">        <span class="comment">//销毁session</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.invalidateHttpSession) &#123;</span><br><span class="line">            HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.logger.debug(<span class="string">"Invalidating session: "</span> + session.getId());</span><br><span class="line">                session.invalidate();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//销毁认证信息</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.clearAuthentication) &#123;</span><br><span class="line">            SecurityContext context = SecurityContextHolder.getContext();</span><br><span class="line">            context.setAuthentication((Authentication)<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//清空Context</span></span><br><span class="line">        SecurityContextHolder.clearContext();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ConcurrentSessionControlAuthenticationStrategy.java</code>验证session并发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentSessionControlAuthenticationStrategy</span> <span class="keyword">implements</span> <span class="title">MessageSourceAware</span>, <span class="title">SessionAuthenticationStrategy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAuthentication</span><span class="params">(Authentication authentication, HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//问题关键就在于这一行</span></span><br><span class="line">        <span class="comment">//拿到当前存档的所有该用户的登录信息</span></span><br><span class="line">        List&lt;SessionInformation&gt; sessions = <span class="keyword">this</span>.sessionRegistry.getAllSessions(authentication.getPrincipal(), <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">int</span> sessionCount = sessions.size();</span><br><span class="line">        <span class="keyword">int</span> allowedSessions = <span class="keyword">this</span>.getMaximumSessionsForThisUser(authentication);</span><br><span class="line">        <span class="comment">//判断是否session数超过了限制数</span></span><br><span class="line">        <span class="keyword">if</span> (sessionCount &gt;= allowedSessions) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allowedSessions != -<span class="number">1</span>) &#123;</span><br><span class="line">               </span><br><span class="line">                <span class="keyword">if</span> (sessionCount == allowedSessions) &#123;</span><br><span class="line">                    HttpSession session = request.getSession(<span class="keyword">false</span>);</span><br><span class="line">                    <span class="keyword">if</span> (session != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        Iterator var8 = sessions.iterator();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span>(var8.hasNext()) &#123;</span><br><span class="line">                            SessionInformation si = (SessionInformation)var8.next();</span><br><span class="line">                            <span class="keyword">if</span> (si.getSessionId().equals(session.getId())) &#123;</span><br><span class="line">                                <span class="keyword">return</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//超过则扔出异常</span></span><br><span class="line">                <span class="keyword">this</span>.allowableSessionsExceeded(sessions, allowedSessions, <span class="keyword">this</span>.sessionRegistry);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SessionRegistryImpl.java</code> 用户对应的session信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionRegistryImpl</span> <span class="keyword">implements</span> <span class="title">SessionRegistry</span>,</span></span><br><span class="line"><span class="class"><span class="title">ApplicationListener</span>&lt;<span class="title">SessionDestroyedEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(SessionRegistryImpl.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** &lt;principal:Object,SessionIdSet&gt; */</span></span><br><span class="line">    <span class="comment">//存放一个用户对应多个session</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;Object, Set&lt;String&gt;&gt; principals = <span class="keyword">new</span> ConcurrentHashMap&lt;Object, Set&lt;String&gt;&gt;();</span><br><span class="line"><span class="comment">/** &lt;sessionId:Object,SessionInformation&gt; */</span></span><br><span class="line">    <span class="comment">//存放session对应的用户信息        </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, SessionInformation&gt; sessionIds = <span class="keyword">new</span> ConcurrentHashMap&lt;String, SessionInformation&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getAllPrincipals</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;Object&gt;(principals.keySet());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据用户，获取用户的所有session</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;SessionInformation&gt; <span class="title">getAllSessions</span><span class="params">(Object principal,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">boolean</span> includeExpiredSessions)</span> </span>&#123;</span><br><span class="line"><span class="keyword">final</span> Set&lt;String&gt; sessionsUsedByPrincipal = principals.get(principal);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sessionsUsedByPrincipal == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">List&lt;SessionInformation&gt; list = <span class="keyword">new</span> ArrayList&lt;SessionInformation&gt;(</span><br><span class="line">sessionsUsedByPrincipal.size());</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String sessionId : sessionsUsedByPrincipal) &#123;</span><br><span class="line">SessionInformation sessionInformation = getSessionInformation(sessionId);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sessionInformation == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (includeExpiredSessions || !sessionInformation.isExpired()) &#123;</span><br><span class="line">list.add(sessionInformation);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重要</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(SessionDestroyedEvent event)</span> </span>&#123;</span><br><span class="line">String sessionId = event.getId();</span><br><span class="line">removeSessionInformation(sessionId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    通过源码分析，根于找到了。当用户退出登录的时候，session进行了销毁，但是SessionRegistryImpl中维护的session对应的用户信息以及用户所对应的所有session并未清除，也就是说当退出的时候没有清除SessionRegistryImpl中principals、sessionIds两个集合的对应内容。</p><p>​    问题的根源就是没有进行退出时的数据清除。再看SessionRegistryImpl中实现了<code>ApplicationListener&lt;SessionDestroyedEvent&gt;</code>接口，并覆盖了方法，如下实现，但是经过断点测试，发现并未进入，说明监听失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重要</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(SessionDestroyedEvent event)</span> </span>&#123;</span><br><span class="line">String sessionId = event.getId();</span><br><span class="line">        <span class="comment">//进行两个集合的清除</span></span><br><span class="line">removeSessionInformation(sessionId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><p>​    细心发现<code>SessionRegistryImpl</code>类注释中有下面这一段解析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default implementation of</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> org.springframework.security.core.session.SessionRegistry SessionRegistry&#125; which</span></span><br><span class="line"><span class="comment"> * listens for &#123;<span class="doctag">@link</span> org.springframework.security.core.session.SessionDestroyedEvent</span></span><br><span class="line"><span class="comment"> * SessionDestroyedEvent&#125;s published in the Spring application context.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * For this class to function correctly in a web application, it is important that you</span></span><br><span class="line"><span class="comment"> * register an &lt;a href="&#123;<span class="doctag">@docRoot</span>&#125;/org/springframework/security/web/session/HttpSessionEventPublisher.html"&gt;HttpSessionEventPublisher&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * in the &lt;tt&gt;web.xml&lt;/tt&gt; file so that this class is notified of sessions that expire.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ben Alex</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Luke Taylor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionRegistryImpl</span> <span class="keyword">implements</span> <span class="title">SessionRegistry</span>,</span></span><br><span class="line"><span class="class"><span class="title">ApplicationListener</span>&lt;<span class="title">SessionDestroyedEvent</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>​    说为了让<code>SessionDestroyedEvent</code>功能在环境中正确利用，需要注册一个<code>HttpSessionEventPublisher</code>以便这个类能够通知seesion事件</p><p>添加该类的默认实现，问题即可解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置session 监听接口</span></span><br><span class="line"><span class="comment"> * 目前作用 用于监听session失效进入session并发处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> HttpSessionEventPublisher <span class="title">sessionEventPubulisher</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="keyword">new</span> HttpSessionEventPublisher();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>使用 Maven Module 搭建spring boot项目（整合Spring Security、Spring Social、spring OAuth）一</title>
      <link href="/2018/07/12/spring_security/1.SpringSecurityRESTful/"/>
      <url>/2018/07/12/spring_security/1.SpringSecurityRESTful/</url>
      <content type="html"><![CDATA[<h1 id="使用-Maven-Module-搭建spring-boot项目（整合Spring-Security、Spring-Social、spring-OAuth）一"><a href="#使用-Maven-Module-搭建spring-boot项目（整合Spring-Security、Spring-Social、spring-OAuth）一" class="headerlink" title="使用 Maven Module 搭建spring boot项目（整合Spring Security、Spring Social、spring OAuth）一"></a>使用 Maven Module 搭建spring boot项目（整合Spring Security、Spring Social、spring OAuth）一</h1><table><thead><tr><th>版本号</th><th>作者</th><th>日期</th><th>备注</th></tr></thead><tbody><tr><td>V0.1</td><td>huangz</td><td>2018-04-03</td><td>初稿</td></tr><tr><td>V0.2</td><td>huangz</td><td>2018-04-18</td><td>引入lombok</td></tr></tbody></table><hr><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="项目环境、组件及目标"><a href="#项目环境、组件及目标" class="headerlink" title="项目环境、组件及目标"></a>项目环境、组件及目标</h3><ol><li><p>开发环境</p><p>Jdk1.8、Idea、Mysql、maven module</p></li><li><p>使用框架组件</p><p>spring boot 、spring security、spring social、spring oauth</p></li><li><p>搭建项目目标</p><p>深入理解spring security原理、功能及代码</p><p>基于spring security及相关框架独立开发认证授权相关功能</p><p>掌握抽象和封装的常见技巧，可以编写可重用的模块供他人使用</p><p>​</p></li></ol><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h4><p>​    Spring Security是一个能够为基于Spring的企业应用系统提供声明式的安全访问控制解决方案的安全框架。它提供了一组可以在Spring应用上下文中配置的Bean，充分利用了Spring IoC，DI（控制反转Inversion of Control ,DI:Dependency Injection 依赖注入）和AOP（面向切面编程）功能，为应用系统提供声明式的安全访问控制功能，减少了为企业系统安全控制编写大量重复代码的工作。</p><h4 id="Spring-IO-platform"><a href="#Spring-IO-platform" class="headerlink" title="Spring IO platform"></a>Spring IO platform</h4><p>​    Spring IO是构建现代应用程序的一个有凝聚力的版本化平台。这是一个模块化的企业级分布，提供了一组策略依赖关系，同时让开发人员完全控制只部署他们所需的部分。</p><p>   <strong>主要解决问题：</strong></p><p>​    在使用Spring的时候，经常会使用到第三方库，一般大家都是根据经验挑选一个版本号或挑选最新的，随意性较大，其实这是有问题的，除非做过完整的测试，保证集成该版本的依赖不会出现问题，且后续集成其它第三方库的时候也不会出现问题，否则风险较大，且后续扩展会越来越困难，因为随着业务复杂度的增加，集成的第三方组件会越来会多，依赖之间的关联也会也来越复杂。</p><p>   <strong>优点：</strong><br>       Spring IO平台提供了各种Spring项目及其依赖项的版本。通过指定的配置添加到您的构建脚本中，您就可以声明您的依赖关系，而无需担心版本号，保证最大限度的扩展，而且该版本的依赖是经过测试的，可以完美的与其它组件结合使用。</p><h3 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">airports</span><br><span class="line">    | - - airport-core   &lt; - - | </span><br><span class="line">            | - - pom.xml      |</span><br><span class="line">    | - - airport-browser  - - |(依赖)   &lt;-| </span><br><span class="line">            | - - pom.xml      |           |</span><br><span class="line">    | - - airport-app      - - |         &lt;-|</span><br><span class="line">            | - - pom.xml                  |(选择性依赖) </span><br><span class="line">    | - - traffic-forecast   - - - - - - - |</span><br><span class="line">            | - - pom.xml</span><br><span class="line">    | - - pom.xml</span><br></pre></td></tr></table></figure><p><strong>airports:</strong> 项目父模块，只负责管理其下的子项目，只有一个pom文件，并且pom文件中打包方式为</p><p><code>&lt;packaging&gt;pom&lt;/packaging&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>airportsCore<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>airportsBrowser<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>airportsApp<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>trafficForecast<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">com.chuIllusion.version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">com.chuIllusion.version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.spring.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>platform-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Brussels-SR4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.SR2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>$&#123;java.version&#125;<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>$&#123;project.build.sourceEncoding&#125;<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>airport-core:</strong> 核心业务逻辑，提供核心通用功能</p><p><code>pom.xml</code></p><p>引入核心包，包括jdbc、aop及一些基本工具类，并且引入核心组件：spring security、spring oauth、spring social</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring security/social/oauth --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引用spring security、spring oauth核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-oauth2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring social --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提供Java 配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.social<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-social-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提供社交连接框架和OAuth 客户端支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.social<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-social-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提供社交安全支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.social<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-social-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 管理web应用程序的连接 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.social<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-social-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>airport-browser:</strong> 浏览器相关业务，依赖核心项目，拓展浏览器项目特有的功能</p><p><code>pom.xml</code></p><p>引入核心模块的支持，并拓展浏览器特有的支持，如session</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chuIllusion<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>airports.core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.chuIllusion.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ============================== Thymeleaf模板引擎 ================================= --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>airport-app:</strong> App或前后端分离项目中相关业务，依赖核心项目，拓展了前后端分离项目的功能</p><p><code>pom.xml</code></p><p>引入核心模块的支持，并拓展App或前后端分离项目特有的支持，如使用redis代替session存储</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.turingdi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>airports.core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>traffic-forecast:</strong>  项目程序，根据项目情况，选择性依赖浏览器模块或App模块</p><p><code>pom.xml</code></p><p>根据需求，引用浏览器核心支持或App核心支持,并且引用编译插件的支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;groupId&gt;com.chuIllusion&lt;/groupId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;artifactId&gt;airports.browser&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;version&gt;$&#123;com.turingdi.version&#125;&lt;/version&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.chuIllusion<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>airports.app<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;com.chuIllusion.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入测试框架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 重新打包现有的JAR和WAR存档，以便可以使用java -jar从命令行执行它们。 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>trafficForecast<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><ol><li><p>spring boot 包扫描机制</p><p>​    在项目程序启动前，一定要保证spring boot 启动类一定是在所有依赖项目中父级包，启动类扫描同级包和下级包的所有类才能生效，否则如果其他项目中有使用配置的类（相对于启动类是在启动类的上一级）则无法生效，建议将使用同一命名，以下是我这几个项目包的结构，每个模块中的代码都对应在其标准包下</p><p>​    在核心包中：com.chuillusion.core，在浏览器包中：com.chuillusion.browser，在App包中：com.chuillusion.app，在项目程序中：com.chuIllusion.trafiicforecast，启动类在<em>com.chuIllusion</em>包中创建</p></li><li><p>依赖配置</p><p>​    在项目中引入jdbc的依赖需要配置数据源、session的依赖需要配置session类型，否则系统启动会报错，根据系统报错信息，查找原因，排查原因，则很快可以解决问题</p></li><li><p>启动类</p><p>maven 默认 编译成jar包，使用java -jar运行命令即可将项目运行</p><p>但是在项目中我们需要war包，则要继承<code>SpringBootServletInitializer</code>并且实现其<code>config</code>方法，否则会报错误（无法找到入口）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrafficForecastEntryApplication</span> <span class="keyword">extends</span> <span class="title">SpringBootServletInitializer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TrafficForecastEntryApplication</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SpringApplicationBuilder <span class="title">configure</span><span class="params">(SpringApplicationBuilder application)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> application.sources(<span class="keyword">new</span> Class[]&#123;TrafficForecastEntryApplication.class&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(TrafficForecastEntryApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="RESTFUL-API"><a href="#RESTFUL-API" class="headerlink" title="RESTFUL API"></a>RESTFUL API</h2><h3 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h3><p>​    <strong>Representational State Transfer</strong>，简称<strong>REST</strong>，一种软件架构风格、设计风格，而不是标准，只是提供了一组设计原则和约束条件。它主要用于客户端和服务器交互类的软件。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>特点：</strong></p><ol><li><p>用URL描述资源</p></li><li><p>使用HTTP方法描述行为，使用HTTP状态码表示不同的结果</p><p>HTTP METHOD：GET(从服务器取出资源（一项或多项）)、POST(在服务器新建一个资源)、PUT(在服务器更新资源)、DELETE(从服务器删除资源)</p><p>HTTP STATUS CODE：200（请求成功）、401（未授权）、404（未找到资源）、500（服务器内部错误）</p></li><li><p>使用JSON交互数据</p></li><li><p>RESTful只是一种风格，并不是强制的标准</p></li></ol><p><strong>例子：</strong></p><table><thead><tr><th>URL</th><th>METHOD</th><th>DESRCIBE</th></tr></thead><tbody><tr><td>/product</td><td>GET</td><td>列出所有商品</td></tr><tr><td>/product?limit=10</td><td>GET</td><td>返回指定数量的商品</td></tr><tr><td>/product?limit=10&amp;type=1</td><td>GET</td><td>返回指定类型和数量的商品</td></tr><tr><td>/product/id</td><td>GET</td><td>获取指定的商品</td></tr><tr><td>/product/id/image</td><td>GET</td><td>获取指定商品的所有图片</td></tr><tr><td>/product/id/image/id</td><td>GET</td><td>获取指定商品的指定图片</td></tr><tr><td>/product</td><td>POST</td><td>新建商品</td></tr><tr><td>/product/id</td><td>PUT</td><td>更新指定的商品信息</td></tr><tr><td>/prodect/id</td><td>DELETE</td><td>删除指定的商品</td></tr></tbody></table><p><strong>成熟度模型</strong></p><p><img src="images/restfulmaturitymodel.png" alt=""></p><h3 id="Spring-Boot-中-RESTful-API-开发"><a href="#Spring-Boot-中-RESTful-API-开发" class="headerlink" title="Spring Boot 中 RESTful API 开发"></a>Spring Boot 中 RESTful API 开发</h3><p>​    spring boot 对 RESTful API 提供了多个开发注解，在以下将会慢慢介绍</p><ol><li><p>@RestController : 标明此controller提供RESTful API</p><p>@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用。</p></li><li><p>@RequestMapping及其变体。映射HTTP请求URL到JAVA方法上</p></li><li><p>@RequestParam 映射请求参数到JAVA方法的参数</p></li></ol><h4 id="测试框架引入"><a href="#测试框架引入" class="headerlink" title="测试框架引入"></a>测试框架引入</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="测试用例创建"><a href="#测试用例创建" class="headerlink" title="测试用例创建"></a>测试用例创建</h4><p>建立测试用例的目的，是为了确保我们的服务能按照我们指定的方式去运行，并且获取预期的效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如何运行测试用例</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="comment">//标记此类为测试类</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserControllerTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//web环境 启动的时候spring 已经创建了，直接注入就好了</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext webApplicationContext;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//伪造一个mvc的环境</span></span><br><span class="line">    <span class="keyword">private</span> MockMvc mockMvc;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询用例</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenQuerySuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//模拟请求</span></span><br><span class="line">        mockMvc.perform(</span><br><span class="line">                MockMvcRequestBuilders.get(<span class="string">"/user"</span>)<span class="comment">//模拟发出get请求</span></span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON_UTF8))<span class="comment">//设置请求的contentType</span></span><br><span class="line">                .andExpect(MockMvcResultMatchers.status().isOk())<span class="comment">//执行之后，期望的返回结果是返回状态码是200</span></span><br><span class="line">                <span class="comment">//返回一个集合，包含三个元素，jsonPath解析返回的内容，并对json进行判断 $.length()集合的长度</span></span><br><span class="line">                .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"$.length()"</span>).value(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>启动测试用例</strong></p><p>Error：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error:java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=...) with your test</span><br></pre></td></tr></table></figure><p>Cause：测试用例位置必须在Spring boot 启动类同名子包下，才能扫描打</p><p>Solve：</p><ol><li><p>更为测试类位置为Spring boot 启动类同名子包下</p></li><li><p>添加指定启动类位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Error：</span><br></pre></td></tr></table></figure></li></ol><p>java.lang.AssertionError: Status<br>Expected :200<br>Actual  :404<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Cause and Solve：未建立对应的服务，应建立相应的服务</span><br><span class="line"></span><br><span class="line">**服务的创建**</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@RestController</span><br><span class="line">public class UserController &#123;</span><br><span class="line">    @RequestMapping(value = &quot;/user&quot;,method = RequestMethod.GET)</span><br><span class="line">    public List&lt;User&gt; query()&#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Error：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Description</span><br><span class="line">java.lang.AssertionError: No value at JSON path &quot;$.length()&quot;, exception: json can not be null or empty</span><br></pre></td></tr></table></figure><p>Cause：服务中的返回值为null，而测试对返回值的期待是返回数据的长度为3</p><p>Solve：使服务中返回指定的数据长度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    users.add(<span class="keyword">new</span> User());</span><br><span class="line">    users.add(<span class="keyword">new</span> User());</span><br><span class="line">    users.add(<span class="keyword">new</span> User());</span><br><span class="line">    <span class="keyword">return</span> users;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="RequestParam注解的使用"><a href="#RequestParam注解的使用" class="headerlink" title="@RequestParam注解的使用"></a><code>@RequestParam</code>注解的使用</h5><p>在测试用例上添加参数传递</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mockMvc.perform(</span><br><span class="line">        MockMvcRequestBuilders.get(<span class="string">"/user"</span>)<span class="comment">//模拟发出get请求</span></span><br><span class="line">        .contentType(MediaType.APPLICATION_JSON_UTF8)<span class="comment">//设置请求的contentType</span></span><br><span class="line">        .param(<span class="string">"username"</span>,<span class="string">"victorys"</span>))<span class="comment">//设置参数</span></span><br></pre></td></tr></table></figure><p>在服务中接受参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">query</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        @RequestParam(name=<span class="string">"username"</span>,//请求中属性名</span></span></span><br><span class="line"><span class="function"><span class="params">required = <span class="keyword">true</span>,//属性必须，否则报错</span></span></span><br><span class="line"><span class="function"><span class="params">defaultValue = <span class="string">"jojo"</span>)</span> <span class="comment">//没有则设置默认值</span></span></span><br><span class="line"><span class="function">                String username)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="查询用例"><a href="#查询用例" class="headerlink" title="查询用例"></a>查询用例</h4><p><strong>掌握</strong></p><ol><li><p>@PathVariable 映射URL片段到java方法的参数</p></li><li><p>在url声明中使用正则表达式</p></li><li><p>@JsonView控制json输出内容</p><p>jsonview使用步骤：1）使用接口声明视图；2）在值对象的get方法上指定视图；3）在controller方法上指定视图</p></li></ol><h5 id="UserControllerTest-java"><a href="#UserControllerTest-java" class="headerlink" title="UserControllerTest.java"></a>UserControllerTest.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用RESTful API 查询用户详情</span></span><br><span class="line"><span class="comment"> * /user/1 代表资源</span></span><br><span class="line"><span class="comment"> * get请求代表操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenGetInfoSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String result = mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/user/1"</span>)<span class="comment">//获取用户为1的信息</span></span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">            .andExpect(MockMvcResultMatchers.status().isOk())<span class="comment">//用状态码判断是成功还是失败，成功就是200</span></span><br><span class="line">            .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"$.username"</span>).value(<span class="string">"tom"</span>))<span class="comment">//期望值</span></span><br><span class="line">            .andReturn().getResponse().getContentAsString();<span class="comment">//获得返回结果，并以字符串形式输出</span></span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br><span class="line">**</span><br><span class="line"> * 测试使用正则表达式接受资源的服务</span><br><span class="line"> * <span class="meta">@throws</span> Exception</span><br><span class="line"> */</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenGetInfoFail</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">"/user/a"</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">            .andExpect(MockMvcResultMatchers.status().is4xxClientError());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="UserController-java"><a href="#UserController-java" class="headerlink" title="UserController.java"></a>UserController.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="meta">@JsonView</span>(User.UserSimpleView.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">query</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(name=<span class="string">"username"</span>,required = <span class="keyword">true</span>,defaultValue = <span class="string">"jojo"</span>)</span></span></span><br><span class="line"><span class="function">                    String username,</span></span><br><span class="line"><span class="function">            <span class="comment">//spring提供的一个分页信息存储对象</span></span></span><br><span class="line"><span class="function">            @<span class="title">PageableDefault</span><span class="params">(page = <span class="number">2</span>, size = <span class="number">17</span>, sort = <span class="string">"username,asc"</span>)</span> Pageable pageable)</span>&#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        users.add(<span class="keyword">new</span> User());</span><br><span class="line">        users.add(<span class="keyword">new</span> User());</span><br><span class="line">        users.add(<span class="keyword">new</span> User());</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@PathVariable</span>:将请求资源中的片段，映射到请求服务方法中的参数中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@JsonView</span>:使用场景：List&lt;User&gt; query()方法中返回的用户信息没有包含密码信息</span></span><br><span class="line"><span class="comment">     *                      User getInfo()方法返回的用户信息有密码信息</span></span><br><span class="line"><span class="comment">     *                      1.在 User 类中 使用接口定义视图</span></span><br><span class="line"><span class="comment">     *                         public interface UserSimpleView &#123;&#125;; //简单视图</span></span><br><span class="line"><span class="comment">     *                         public interface UserDetailView extends UserSimpleView &#123;&#125;;//包含简单视图内容和扩展视图内容</span></span><br><span class="line"><span class="comment">     *                      2.在 User 类中值对象get方法中指定视图，UserDetailView可以显示所有UserSimpleView视图的显示内容</span></span><br><span class="line"><span class="comment">     *                         <span class="doctag">@JsonView</span>(UserSimpleView.class)</span></span><br><span class="line"><span class="comment">     *                         public String getUsername() &#123; return username;&#125;</span></span><br><span class="line"><span class="comment">     *                         <span class="doctag">@JsonView</span>(UserDetailView.class)</span></span><br><span class="line"><span class="comment">                               public String getPassword() &#123; return password;&#125;</span></span><br><span class="line"><span class="comment">                           3.在controller中指定视图</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@GetMapping("/&#123;id:\\d+&#125;")</span></span><br><span class="line">    <span class="meta">@JsonView</span>(User.UserDetailView.class)</span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/&#123;id:\\d+&#125;"</span>,method = RequestMethod.GET)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getInfo</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入getInfo服务"</span>);</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUsername(<span class="string">"tom"</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="User-java"><a href="#User-java" class="headerlink" title="User.java"></a>User.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserSimpleView</span> </span>&#123;&#125;;</span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDetailView</span> <span class="keyword">extends</span> <span class="title">UserSimpleView</span> </span>&#123;&#125;;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> String id;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">//@MyConstraint(message = "这是一个测试")</span></span><br><span class="line">   <span class="comment">//@ApiModelProperty(value = "用户名")</span></span><br><span class="line">   <span class="keyword">private</span> String username;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@NotBlank</span>(message = <span class="string">"密码不能为空"</span>)</span><br><span class="line">   <span class="keyword">private</span> String password;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@Past</span>(message = <span class="string">"生日必须是过去的时间"</span>)</span><br><span class="line">   <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@JsonView</span>(UserSimpleView.class)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> username;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.username = username;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@JsonView</span>(UserDetailView.class)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> password;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.password = password;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@JsonView</span>(UserSimpleView.class)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> id;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@JsonView</span>(UserSimpleView.class)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Date <span class="title">getBirthday</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> birthday;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirthday</span><span class="params">(Date birthday)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.birthday = birthday;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>代码重构</strong></p><p>使用RequestMapping变体简化代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">query</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getInfo</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="创建用例"><a href="#创建用例" class="headerlink" title="创建用例"></a>创建用例</h4><ol><li>@RequestBody映射请求体到java方法的参数</li><li>日期类型参数的处理</li><li>@Valid注解和BindingResult验证请求参数的合法性并处理校验结果</li></ol><h5 id="UserControllerTest-java-1"><a href="#UserControllerTest-java-1" class="headerlink" title="UserControllerTest.java"></a>UserControllerTest.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用RESTful API 创建一个用户</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenCreateSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date();</span><br><span class="line">    System.out.println(date.getTime());</span><br><span class="line">    String content = <span class="string">"&#123;\"username\":\"tom\",\"password\":null,\"birthday\":"</span>+date.getTime()+<span class="string">"&#125;"</span>;</span><br><span class="line">    String reuslt = mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/user"</span>).contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">            .content(content))</span><br><span class="line">            .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">            .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"$.id"</span>).value(<span class="string">"1"</span>))</span><br><span class="line">            .andReturn().getResponse().getContentAsString();</span><br><span class="line"></span><br><span class="line">    System.out.println(reuslt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="UserController-java-1"><a href="#UserController-java-1" class="headerlink" title="UserController.java"></a>UserController.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过post请求创建用户</span></span><br><span class="line"><span class="comment"> * @ RequestBody:若请求数据是以json字符串格式数据传输，参数无法封装到方法中的参数</span></span><br><span class="line"><span class="comment"> *                  使用requestBody可以解析json格式为方法体中的参数赋值</span></span><br><span class="line"><span class="comment"> * @ Valid 验证、校验参数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> errors 校验错误信息存储器，与<span class="doctag">@Valid</span>注解成对出现</span></span><br><span class="line"><span class="comment"> *               若校验不接收错误信息，则不会进入方法体，并且返回错误到请求处</span></span><br><span class="line"><span class="comment"> *               若已接受错误信息，则进入方法体，完成方法体内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="comment">//@ApiOperation(value = "创建用户")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">create</span><span class="params">(@Valid @RequestBody User user,BindingResult errors)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(errors.hasErrors())&#123;<span class="comment">//是否有错误校验信息</span></span><br><span class="line">        <span class="comment">//流化并且打印错误信息</span></span><br><span class="line">        errors.getAllErrors().stream().forEach(error -&gt; System.out.println(error.getDefaultMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    System.out.println(user.getPassword());</span><br><span class="line">    System.out.println(user.getBirthday());</span><br><span class="line"></span><br><span class="line">    user.setId(<span class="string">"1"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="User-java-1"><a href="#User-java-1" class="headerlink" title="User.java"></a>User.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotBlank</span>(message = <span class="string">"密码不能为空"</span>)</span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure><h4 id="修改与删除用例"><a href="#修改与删除用例" class="headerlink" title="修改与删除用例"></a>修改与删除用例</h4><h5 id="UserControllerTest-java-2"><a href="#UserControllerTest-java-2" class="headerlink" title="UserControllerTest.java"></a>UserControllerTest.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试更新请求</span></span><br><span class="line"><span class="comment"> * 请求方式put请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenUpdateSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Date date = <span class="keyword">new</span> Date(LocalDateTime.now().plusYears(<span class="number">1</span>).atZone(ZoneId.systemDefault()).toInstant().toEpochMilli());</span><br><span class="line">    System.out.println(date.getTime());</span><br><span class="line">    String content = <span class="string">"&#123;\"id\":\"1\", \"username\":\"tom\",\"password\":null,\"birthday\":"</span>+date.getTime()+<span class="string">"&#125;"</span>;</span><br><span class="line">    String reuslt = mockMvc.perform(MockMvcRequestBuilders.put(<span class="string">"/user/1"</span>).contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">            .content(content))</span><br><span class="line">            .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">            .andExpect(MockMvcResultMatchers.jsonPath(<span class="string">"$.id"</span>).value(<span class="string">"1"</span>))</span><br><span class="line">            .andReturn().getResponse().getContentAsString();</span><br><span class="line"></span><br><span class="line">    System.out.println(reuslt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求方式Delete</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenDeleteSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    mockMvc.perform(MockMvcRequestBuilders.delete(<span class="string">"/user/1"</span>)</span><br><span class="line">            .contentType(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">            .andExpect(MockMvcResultMatchers.status().isOk());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="UserConroller-java"><a href="#UserConroller-java" class="headerlink" title="UserConroller.java"></a>UserConroller.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">update</span><span class="params">(@Valid @RequestBody User user, BindingResult errors)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (errors.hasErrors())&#123;</span><br><span class="line">        errors.getAllErrors().stream().forEach(error -&gt; &#123;</span><br><span class="line">            FieldError fieldError = (FieldError)error;</span><br><span class="line">            String message = fieldError.getField() + <span class="string">" "</span> + fieldError.getDefaultMessage();</span><br><span class="line">            System.out.println(message);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println(user.getId());</span><br><span class="line">    System.out.println(user.getUsername());</span><br><span class="line">    System.out.println(user.getPassword());</span><br><span class="line">    System.out.println(user.getBirthday());</span><br><span class="line"></span><br><span class="line">    user.setId(<span class="string">"1"</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Delete请求</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DeleteMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(@PathVariable String id)</span> </span>&#123;</span><br><span class="line">    System.out.println(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="User-java-2"><a href="#User-java-2" class="headerlink" title="User.java"></a>User.java</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotBlank</span>(message = <span class="string">"密码不能为空"</span>)</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Past</span>(message = <span class="string">"生日必须是过去的时间"</span>)</span><br><span class="line"><span class="keyword">private</span> Date birthday;</span><br></pre></td></tr></table></figure><h4 id="定义校验器"><a href="#定义校验器" class="headerlink" title="定义校验器"></a>定义校验器</h4><h5 id="校验器接口定义"><a href="#校验器接口定义" class="headerlink" title="校验器接口定义"></a>校验器接口定义</h5><p><strong>MyConstrain.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义校验注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  自定义校验器要声明以下必须的三个方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.FIELD&#125;)<span class="comment">//使用在方法和字段上</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)<span class="comment">//运行时注解</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = MyConstraintValidator.class)<span class="comment">//表名此注解用于校验  validatedBy:当前注解，用哪一个类去校验</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyConstraint &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 错误信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function">String <span class="title">message</span><span class="params">()</span></span>;</span><br><span class="line">   Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">   Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123; &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="定义校验器校验实现类"><a href="#定义校验器校验实现类" class="headerlink" title="定义校验器校验实现类"></a>定义校验器校验实现类</h5><p><strong>MyConstraintValidator.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConstraintValidator&lt;A,B&gt;</span></span><br><span class="line"><span class="comment"> *     A：使用哪个注解</span></span><br><span class="line"><span class="comment"> *    B：验证类型。如String，那么注解就只有String类型上起作用</span></span><br><span class="line"><span class="comment"> * 在类结构上，不需要声明为spring管理的类</span></span><br><span class="line"><span class="comment"> *        原因:spring扫描到 ConstraintValidator 接口， 自动将其实现类为自己管理的bean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConstraintValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">MyConstraint</span>, <span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 在校验器中，可以注入spring容器中的任何Bean</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> HelloService helloService;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 校验器初始化工作</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> constraintAnnotation</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(MyConstraint constraintAnnotation)</span> </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"my validator init"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 真正的校验逻辑</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> value 需要校验的值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> context 验证器上下文</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(Object value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">      helloService.greeting(<span class="string">"tom"</span>);<span class="comment">//模拟校验逻辑</span></span><br><span class="line">      System.out.println(value);</span><br><span class="line">      <span class="comment">//return false; //失败</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//校验成功</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="服务器异常处理"><a href="#服务器异常处理" class="headerlink" title="服务器异常处理"></a>服务器异常处理</h4><h5 id="Spring-Boot-的错误处理机制"><a href="#Spring-Boot-的错误处理机制" class="headerlink" title="Spring Boot 的错误处理机制"></a>Spring Boot 的错误处理机制</h5><ol><li>在浏览器中输入不存在的资源地址，spring boot跳转到指定的页面，显示如下信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Whitelabel Error Page</span><br><span class="line">This application has no explicit mapping for /error, so you are seeing this as a fallback.</span><br><span class="line">Tue Oct 03 18:46:23 CST 2017</span><br><span class="line">There was an unexpected error (type=Not Found, status=404).</span><br><span class="line">No message available</span><br></pre></td></tr></table></figure><ol start="2"><li>在模拟非浏览器请求，spring boot返回json数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;timestamp&quot;: 1507028069711,</span><br><span class="line">    &quot;status&quot;: 404,</span><br><span class="line">    &quot;error&quot;: &quot;Not Found&quot;,</span><br><span class="line">    &quot;message&quot;: &quot;No message available&quot;,</span><br><span class="line">    &quot;path&quot;: &quot;/xxx&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Spring-Boot错误处理机制源码分析"><a href="#Spring-Boot错误处理机制源码分析" class="headerlink" title="Spring Boot错误处理机制源码分析"></a>Spring Boot错误处理机制源码分析</h5><ol><li><p>浏览器发出的请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Request Headers：</span><br><span class="line">Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span><br></pre></td></tr></table></figure></li><li><p>非浏览器请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Request Headers:</span><br><span class="line">Accept:*/*</span><br></pre></td></tr></table></figure></li><li><p>源码分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span> <span class="comment">//本身就是一个控制器</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(&#123;<span class="string">"$&#123;server.error.path:$&#123;error.path:/error&#125;&#125;"</span>&#125;)<span class="comment">//处理error请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicErrorController</span> <span class="keyword">extends</span> <span class="title">AbstractErrorController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 以下两个方法：</span></span><br><span class="line"><span class="comment">* 根据请求信息不同，返回结果不同</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(produces = &#123;<span class="string">"text/html"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">errorHtml</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line">    HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">    Map&lt;String, Object&gt; model = Collections.unmodifiableMap(<span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.isIncludeStackTrace(request, MediaType.TEXT_HTML)));<span class="comment">//返回一个HTML</span></span><br><span class="line">    response.setStatus(status.value());</span><br><span class="line">    ModelAndView modelAndView = <span class="keyword">this</span>.resolveErrorView(request, response, status, model);</span><br><span class="line">    <span class="keyword">return</span> modelAndView == <span class="keyword">null</span>?<span class="keyword">new</span> ModelAndView(<span class="string">"error"</span>, model):modelAndView;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回map转为json数据</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@ResponseBody</span>  <span class="comment">//将map集合输出为json数据</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) &#123;</span><br><span class="line">    Map&lt;String, Object&gt; body = <span class="keyword">this</span>.getErrorAttributes(request, <span class="keyword">this</span>.isIncludeStackTrace(request, MediaType.ALL));</span><br><span class="line">    HttpStatus status = <span class="keyword">this</span>.getStatus(request);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity(body, status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="自定义错误处理机制"><a href="#自定义错误处理机制" class="headerlink" title="自定义错误处理机制"></a>自定义错误处理机制</h5><p>​    默认情况下，spring boot默认的处理机制已经是可以满足我们一般的开发目标，若有特定需求，可以自定义处理方案</p><p><strong>定义浏览器返回的错误处理资源</strong></p><p>​    在资源目录下，创建<code>resources/error</code>目录，根据状态码命名错误页面，自定义错误页面的内容</p><p><strong>定义非浏览器（APP）返回的错误处理</strong></p><ol><li>自定义异常类<code>UserNotExistException.java</code></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserNotExistException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">6112780192479692859L</span>;</span><br><span class="line">   <span class="keyword">private</span> String id;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">UserNotExistException</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">super</span>(<span class="string">"user not exist"</span>);</span><br><span class="line">      <span class="keyword">this</span>.id = id;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> id; &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;<span class="keyword">this</span>.id = id;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>增加服务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getInfo</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UserNotExistException(<span class="string">"1"</span>);<span class="comment">//测试异常处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用postman发送请求，返回json信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;timestamp&quot;: 1507034846064,</span><br><span class="line">    &quot;status&quot;: 500,</span><br><span class="line">    &quot;error&quot;: &quot;Internal Server Error&quot;,</span><br><span class="line">    &quot;exception&quot;: &quot;vic.tjs.Exception.UserNotExistException&quot;,</span><br><span class="line">    &quot;message&quot;: &quot;user not exist&quot;,</span><br><span class="line">    &quot;path&quot;: &quot;/user/1&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>创建异常处理控制器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ControllerAdvice</span>：处理其他控制器抛出的异常，不处理http请求，只负责处理控制器抛出的异常</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ExceptionHandler</span>：当任何一个控制器，抛出指定的异常，都会执行该注解下的方法进行处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@ExceptionHandler</span>(UserNotExistException.class)</span><br><span class="line">   <span class="meta">@ResponseBody</span> <span class="comment">//返回的map集合转成json</span></span><br><span class="line">   <span class="meta">@ResponseStatus</span>(HttpStatus.INTERNAL_SERVER_ERROR)<span class="comment">//返回的htto状态码</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">handleUserNotExistException</span><span class="params">(UserNotExistException ex)</span> </span>&#123;</span><br><span class="line">      Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">      result.put(<span class="string">"id"</span>, ex.getId());</span><br><span class="line">      result.put(<span class="string">"message"</span>, ex.getMessage());</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>使用postman发送请求，返回json信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;message&quot;: &quot;user not exist&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RESTful-API的拦截（Filter、Interceptor与Aspect）"><a href="#RESTful-API的拦截（Filter、Interceptor与Aspect）" class="headerlink" title="RESTful API的拦截（Filter、Interceptor与Aspect）"></a>RESTful API的拦截（Filter、Interceptor与Aspect）</h4><h5 id="Filter过滤器：记录所有服务的处理时间"><a href="#Filter过滤器：记录所有服务的处理时间" class="headerlink" title="Filter过滤器：记录所有服务的处理时间"></a>Filter过滤器：记录所有服务的处理时间</h5><h6 id="组件自定义配置"><a href="#组件自定义配置" class="headerlink" title="组件自定义配置"></a>组件自定义配置</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义过滤器，拦截所有服务，并且计算服务时长</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//声明为spring管理的组件才能识别此类为过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"time filter start"</span>);</span><br><span class="line">      <span class="keyword">long</span> start = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">      chain.doFilter(request, response); <span class="comment">//整个服务方法就在过滤器中执行</span></span><br><span class="line">      System.out.println(<span class="string">"time filter 耗时:"</span>+ (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">      System.out.println(<span class="string">"time filter finish"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问服务，console输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">time filter start</span><br><span class="line">进入getInfo服务</span><br><span class="line">time filter 耗时:240</span><br><span class="line">time filter finish</span><br><span class="line">time filter start</span><br><span class="line">time filter 耗时:10</span><br><span class="line">time filter finish</span><br></pre></td></tr></table></figure><h6 id="Spring-boot-声明配置"><a href="#Spring-boot-声明配置" class="headerlink" title="Spring boot 声明配置"></a>Spring boot 声明配置</h6><p>取消组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Component //声明为spring管理的组件才能识别此类为过滤器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>配置类配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span></span>&#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">timeFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">      TimeFilter timeFilter = <span class="keyword">new</span> TimeFilter();</span><br><span class="line">      registrationBean.setFilter(timeFilter); </span><br><span class="line">      List&lt;String&gt; urls = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">      urls.add(<span class="string">"/*"</span>);</span><br><span class="line">      registrationBean.setUrlPatterns(urls); </span><br><span class="line">      <span class="keyword">return</span> registrationBean; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Filter-应用缺点"><a href="#Filter-应用缺点" class="headerlink" title="Filter 应用缺点"></a>Filter 应用缺点</h6><p>​    由于<code>Filter</code>是在<code>J2EE</code>规范定义的，未知<code>sping</code>相关的任何东西，只能获取<code>request</code>和<code>response</code>请求，无法获取请求的<code>controller</code>信息和哪个方法处理请求的</p><h5 id="Interceptor-拦截器"><a href="#Interceptor-拦截器" class="headerlink" title="Interceptor 拦截器"></a>Interceptor 拦截器</h5><h6 id="声明拦截器"><a href="#声明拦截器" class="headerlink" title="声明拦截器"></a>声明拦截器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务时间记录拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 服务方法执行前 调用</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> handler 服务控制器</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"preHandle"</span>);</span><br><span class="line">      <span class="comment">//获得服务的控制器的信息</span></span><br><span class="line">    System.out.println(((HandlerMethod)handler).getBean().getClass().getName());</span><br><span class="line">      System.out.println(((HandlerMethod)handler).getMethod().getName());</span><br><span class="line">      request.setAttribute(<span class="string">"startTime"</span>, <span class="keyword">new</span> Date().getTime());</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">//是否放行</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 服务方法执行完后 调用</span></span><br><span class="line"><span class="comment">    * 若服务方法抛出异常，则此方法不会被调用</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> modelAndView</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler,</span></span></span><br><span class="line"><span class="function"><span class="params">         ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"postHandle"</span>);</span><br><span class="line">      Long start = (Long) request.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">      System.out.println(<span class="string">"time interceptor 耗时:"</span>+ (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 不管服务方法是正常完成还是抛出异常，此方法都会调用</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> handler</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> exception</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception exception)</span></span></span><br><span class="line"><span class="function">         <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"afterCompletion"</span>);</span><br><span class="line">      Long start = (Long) request.getAttribute(<span class="string">"startTime"</span>);</span><br><span class="line">      System.out.println(<span class="string">"time interceptor 耗时:"</span>+ (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">      System.out.println(<span class="string">"exception is "</span>+ exception);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="配置拦截器"><a href="#配置拦截器" class="headerlink" title="配置拦截器"></a>配置拦截器</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> TimeInterceptor timeInterceptor; <span class="comment">//注入拦截器</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">      registry.addInterceptor(timeInterceptor);</span><br><span class="line">   &#125;</span><br><span class="line">……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="正常运行控制台信息"><a href="#正常运行控制台信息" class="headerlink" title="正常运行控制台信息"></a>正常运行控制台信息</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">time filter start                                -- doFilter</span><br><span class="line">preHandle                                        -- preHandle</span><br><span class="line">vic.tjs.web.controller.UserController            -- preHandle</span><br><span class="line">query                                            -- preHandle</span><br><span class="line">postHandle                                       -- postHandle</span><br><span class="line">time interceptor 耗时:167                        -- postHandle</span><br><span class="line">afterCompletion                                  -- afterCompletion</span><br><span class="line">time interceptor 耗时:167</span><br><span class="line">exception is null</span><br><span class="line">time filter 耗时:170                             -- doFilter</span><br><span class="line">time filter finish</span><br></pre></td></tr></table></figure><h6 id="抛出异常控制台信息"><a href="#抛出异常控制台信息" class="headerlink" title="抛出异常控制台信息"></a>抛出异常控制台信息</h6><p>设置异常点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id:\\d+&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getInfo</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> UserNotExistException(<span class="string">"1"</span>);<span class="comment">//测试异常处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>异常输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">time filter start</span><br><span class="line">preHandle</span><br><span class="line">vic.tjs.web.controller.UserController</span><br><span class="line">getInfo</span><br><span class="line">                                               -- 没有执行postHandle</span><br><span class="line">afterCompletion</span><br><span class="line">time interceptor 耗时:30</span><br><span class="line">exception is null                   </span><br><span class="line">time filter 耗时:40</span><br><span class="line">time filter finish</span><br></pre></td></tr></table></figure><p>疑问？exception为null？</p><p>解释：exception为空是因为之前配置中把异常处理了，自定义的异常控制处理器 比 拦截器中的afterCompletion 先执行，把异常处理完后才调用拦截器，因此不会获得异常信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerExceptionHandler</span> </span>&#123;</span><br><span class="line">   <span class="meta">@ExceptionHandler</span>(UserNotExistException.class)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title">handleUserNotExistException</span><span class="params">(UserNotExistException ex)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>解决：</p><ol><li>改造异常抛出点</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getInfo</span><span class="params">(@PathVariable(name = <span class="string">"id"</span>)</span> String id) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"user not exist"</span>); &#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>抛出异常</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">time filter start</span><br><span class="line">preHandle</span><br><span class="line">vic.tjs.web.controller.UserController</span><br><span class="line">getInfo</span><br><span class="line">afterCompletion</span><br><span class="line">time interceptor 耗时:0</span><br><span class="line">exception is java.lang.RuntimeException: user not exist</span><br><span class="line">………</span><br><span class="line">//拦截器会拦截所有的控制器</span><br><span class="line">//以下的spring 异常处理控制器也被拦截了</span><br><span class="line">preHandle</span><br><span class="line">org.springframework.boot.autoconfigure.web.BasicErrorController</span><br><span class="line">error</span><br><span class="line">postHandle</span><br><span class="line">time interceptor 耗时:0</span><br><span class="line">afterCompletion</span><br><span class="line">time interceptor 耗时:0</span><br><span class="line">exception is null</span><br></pre></td></tr></table></figure><h6 id="拦截器局限性"><a href="#拦截器局限性" class="headerlink" title="拦截器局限性"></a>拦截器局限性</h6><p>​    拦截器<code>Object handle</code>中的能获取请求的控制器的信息，但无法获取请求的参数的值</p><p><strong>DispatcherServlet.java分发请求源码分析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DispatcherServlet</span> <span class="keyword">extends</span> <span class="title">FrameworkServlet</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doService</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.doDispatch(request, response);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span>&#123;</span><br><span class="line">   <span class="comment">//此方法是调用拦截器中的preHandle</span></span><br><span class="line"><span class="keyword">if</span>(!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="comment">//此处真正的调用控制器，方法参数的拼装在此处进行，所以拦截器无法获取参数信息</span></span><br><span class="line">      mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">      <span class="keyword">if</span>(asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Aspect-AOP-切片"><a href="#Aspect-AOP-切片" class="headerlink" title="Aspect (AOP) 切片"></a>Aspect (AOP) 切片</h5><p><img src="images/aop.png" alt="aop"></p><h6 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h6><p>在<code>pom.xml</code>中添加aop支持</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="声明切片"><a href="#声明切片" class="headerlink" title="声明切片"></a>声明切片</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span>  <span class="comment">//定义一个切片类</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeAspect</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Around：什么时候执行</span></span><br><span class="line"><span class="comment">    * execution：在哪些符合条件的方法上执行</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> pjp 当前被拦截的方法信息对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Around</span>(<span class="string">"execution(* vic.tjs.web.controller.UserController.*(..))"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">handleControllerMethod</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">"time aspect start"</span>);</span><br><span class="line">      <span class="comment">//获取被拦截的控制器的参数</span></span><br><span class="line">      Object[] args = pjp.getArgs();</span><br><span class="line">      <span class="keyword">for</span> (Object arg : args) &#123;</span><br><span class="line">         System.out.println(<span class="string">"arg is "</span>+arg);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">long</span> start = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">      Object object = pjp.proceed(); <span class="comment">//很像Filter中的doFilter，得到的结果就是控制器的返回值</span></span><br><span class="line">      System.out.println(<span class="string">"time aspect 耗时:"</span>+ (<span class="keyword">new</span> Date().getTime() - start));</span><br><span class="line">      System.out.println(<span class="string">"time aspect end"</span>);</span><br><span class="line">      <span class="keyword">return</span> object;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">time filter start <span class="comment">#过滤器</span></span><br><span class="line">preHandle <span class="comment"># 拦截器</span></span><br><span class="line">vic.tjs.web.controller.UserController$<span class="variable">$EnhancerBySpringCGLIB</span>$<span class="variable">$678cdc94</span> <span class="comment">#拦截器</span></span><br><span class="line">getInfo <span class="comment">#拦截器</span></span><br><span class="line">time aspect start <span class="comment"># 切片</span></span><br><span class="line">arg is 1 <span class="comment">#切片</span></span><br><span class="line">进入getInfo服务 <span class="comment">#服务</span></span><br><span class="line">time aspect 耗时:3 <span class="comment">#切片</span></span><br><span class="line">time aspect end <span class="comment"># 切片</span></span><br><span class="line">postHandle<span class="comment"># 拦截器</span></span><br><span class="line">time interceptor 耗时:83 <span class="comment"># 拦截器</span></span><br><span class="line">afterCompletion <span class="comment">#拦截器</span></span><br><span class="line">time interceptor 耗时:83</span><br><span class="line">exception is null</span><br><span class="line">time filter 耗时:93 <span class="comment">#过滤器</span></span><br><span class="line">time filter finish <span class="comment">#过滤器</span></span><br></pre></td></tr></table></figure><h6 id="切片局限性"><a href="#切片局限性" class="headerlink" title="切片局限性"></a>切片局限性</h6><p>​    切片不能像Filter和Interceptor能获取http请求与响应</p><h5 id="总结-amp-amp-执行顺序"><a href="#总结-amp-amp-执行顺序" class="headerlink" title="总结 &amp;&amp; 执行顺序"></a>总结 &amp;&amp; 执行顺序</h5><p>​    总结：这三种拦截方式各有各好处，应根据需求选取其中一种</p><p>​    执行顺序：</p><p><img src="images/executionsequence.png" alt=""></p><h4 id="使用RESTful方式处理文件服务"><a href="#使用RESTful方式处理文件服务" class="headerlink" title="使用RESTful方式处理文件服务"></a>使用RESTful方式处理文件服务</h4><h5 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h5><ol><li>添加常用io包</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>创建测试类，模拟上传文件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟客户端实现文件上传</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">whenUploadSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    String result = mockMvc.perform(MockMvcRequestBuilders.fileUpload(<span class="string">"/file"</span>)</span><br><span class="line">            .file(<span class="keyword">new</span> MockMultipartFile(<span class="string">"file"</span>, <span class="string">"test.txt"</span>, <span class="string">"multipart/form-data"</span>, <span class="string">"hello upload"</span>.getBytes(<span class="string">"UTF-8"</span>))))</span><br><span class="line">            .andExpect(MockMvcResultMatchers.status().isOk())</span><br><span class="line">            .andReturn().getResponse().getContentAsString();</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>创建服务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传处理控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/file"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileController</span> </span>&#123;</span><br><span class="line"><span class="comment">//上传到本地</span></span><br><span class="line">   <span class="keyword">private</span> String folder = <span class="string">"D:\\idea_location\\vicsecuritydemo\\src\\main\\java\\vic\\tjs\\web\\controller"</span></span><br><span class="line">   <span class="meta">@PostMapping</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> FileInfo <span class="title">upload</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">//上传文件的信息</span></span><br><span class="line">      System.out.println(file.getName());</span><br><span class="line">      System.out.println(file.getOriginalFilename());</span><br><span class="line">      System.out.println(file.getSize());</span><br><span class="line">      File localFile = <span class="keyword">new</span> File(folder, <span class="keyword">new</span> Date().getTime() + <span class="string">".txt"</span>);</span><br><span class="line">      file.transferTo(localFile);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> FileInfo(localFile.getAbsolutePath());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：这里的<code>FileInfo</code>只是一个自定义的简单实体类，用来记录文件位置</p><h5 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h5><ol><li>创建服务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(@PathVariable String id, HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * jdk 7 语法，将流声明在try()中，调用完后可以自动关闭对应的流，简化开发</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">try</span> (InputStream inputStream = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(folder, id + <span class="string">".txt"</span>));</span><br><span class="line">         OutputStream outputStream = response.getOutputStream();) &#123;</span><br><span class="line">      response.setContentType(<span class="string">"application/x-download"</span>);</span><br><span class="line">      response.addHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename=test.txt"</span>);</span><br><span class="line">      IOUtils.copy(inputStream, outputStream);</span><br><span class="line">      outputStream.flush();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异步处理RESTful服务"><a href="#异步处理RESTful服务" class="headerlink" title="异步处理RESTful服务"></a>异步处理RESTful服务</h4><p><img src="images/asynhandlerestful.png" alt=""></p><h5 id="使用Callable异步处理RESTful服务"><a href="#使用Callable异步处理RESTful服务" class="headerlink" title="使用Callable异步处理RESTful服务"></a>使用Callable异步处理RESTful服务</h5><p>副线程由主线程唤起</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Callable&lt;String&gt; <span class="title">order</span><span class="params">()</span></span>&#123;</span><br><span class="line">   logger.info(<span class="string">"主线程开始"</span>);</span><br><span class="line">Callable&lt;String&gt; result = <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">logger.info(<span class="string">"副线程开始"</span>);</span><br><span class="line">Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">logger.info(<span class="string">"副线程返回"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">logger.info(<span class="string">"执行其他事情 模拟  1 "</span>);</span><br><span class="line"><span class="comment">//Thread.sleep(1000);</span></span><br><span class="line">logger.info(<span class="string">"执行其他事情 模拟  2 "</span>);</span><br><span class="line"><span class="comment">//Thread.sleep(1000);</span></span><br><span class="line">logger.info(<span class="string">"主线程结束"</span>);</span><br><span class="line"><span class="comment">//Thread.sleep(1000);</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充：Callable与Runnable区别</p><ol><li>Callable中的call方法有返回值，而Runnable中的run方法无返回值；</li><li>Callable接口的call()方法允许抛出异常；而Runnable接口的run()方法的异常只能在内部消化，不能继续上抛；</li></ol><p>测试：开两个浏览器客户端同时发起请求，得到的结果是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">2018-03-16 20:45:06.860  INFO 8276 --- [p-nio-80-exec-1] vic.tjs.web.async.AsyncController        : 主线程开始</span><br><span class="line">2018-03-16 20:45:06.860  INFO 8276 --- [p-nio-80-exec-1] vic.tjs.web.async.AsyncController        : 执行其他事情 模拟  1 </span><br><span class="line">2018-03-16 20:45:06.860  INFO 8276 --- [p-nio-80-exec-1] vic.tjs.web.async.AsyncController        : 执行其他事情 模拟  2 </span><br><span class="line">2018-03-16 20:45:06.860  INFO 8276 --- [p-nio-80-exec-1] vic.tjs.web.async.AsyncController        : 主线程结束</span><br><span class="line">2018-03-16 20:45:06.860  INFO 8276 --- [      MvcAsync4] vic.tjs.web.async.AsyncController        : 副线程开始</span><br><span class="line">2018-03-16 20:45:07.848  INFO 8276 --- [p-nio-80-exec-2] vic.tjs.web.async.AsyncController        : 主线程开始</span><br><span class="line">2018-03-16 20:45:07.848  INFO 8276 --- [p-nio-80-exec-2] vic.tjs.web.async.AsyncController        : 执行其他事情 模拟  1 </span><br><span class="line">2018-03-16 20:45:07.848  INFO 8276 --- [p-nio-80-exec-2] vic.tjs.web.async.AsyncController        : 执行其他事情 模拟  2 </span><br><span class="line">2018-03-16 20:45:07.848  INFO 8276 --- [p-nio-80-exec-2] vic.tjs.web.async.AsyncController        : 主线程结束</span><br><span class="line">2018-03-16 20:45:07.850  INFO 8276 --- [      MvcAsync5] vic.tjs.web.async.AsyncController        : 副线程开始</span><br><span class="line">2018-03-16 20:45:11.860  INFO 8276 --- [      MvcAsync4] vic.tjs.web.async.AsyncController        : 副线程返回</span><br><span class="line">2018-03-16 20:45:12.852  INFO 8276 --- [      MvcAsync5] vic.tjs.web.async.AsyncController        : 副线程返回</span><br></pre></td></tr></table></figure><p>疑问：副线程的执行都是在return时返回结果？测试一下将服务中的的返回结果改为<code>return null;</code>得到如下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2018-03-16 20:51:01.144  INFO 7668 --- [p-nio-80-exec-2] vic.tjs.web.async.AsyncController        : 主线程开始</span><br><span class="line">2018-03-16 20:51:01.144  INFO 7668 --- [p-nio-80-exec-2] vic.tjs.web.async.AsyncController        : 执行其他事情 模拟  1 </span><br><span class="line">2018-03-16 20:51:01.144  INFO 7668 --- [p-nio-80-exec-2] vic.tjs.web.async.AsyncController        : 执行其他事情 模拟  2 </span><br><span class="line">2018-03-16 20:51:01.144  INFO 7668 --- [p-nio-80-exec-2] vic.tjs.web.async.AsyncController        : 主线程结束</span><br></pre></td></tr></table></figure><p>从上面的结果，可以清楚的看到，Callable线程就是在return时启动执行的。<strong>也就是说，主线程并未结束，而是唤起了副线程，并且副线程执行返回的结果还是交给主线程，并由主线程将结果返回</strong>.</p><h5 id="使用DefferredResult异步处理RESTful服务"><a href="#使用DefferredResult异步处理RESTful服务" class="headerlink" title="使用DefferredResult异步处理RESTful服务"></a>使用DefferredResult异步处理RESTful服务</h5><p><img src="images/defferredresult.png" alt=""></p><ol><li>模拟下单队列</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模拟下单队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockQueue</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String placeOrder;</span><br><span class="line">   <span class="keyword">private</span> String completeOrder;</span><br><span class="line">   <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getPlaceOrder</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> placeOrder; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPlaceOrder</span><span class="params">(String placeOrder)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">         logger.info(<span class="string">"接到下单请求, "</span> + placeOrder);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">this</span>.completeOrder = placeOrder;</span><br><span class="line">         logger.info(<span class="string">"下单请求处理完毕,"</span> + placeOrder);</span><br><span class="line">      &#125;).start();</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getCompleteOrder</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> completeOrder; &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCompleteOrder</span><span class="params">(String completeOrder)</span> </span>&#123;<span class="keyword">this</span>.completeOrder = completeOrder; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在线程间传递DefferredResult</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeferredResultHolder</span> </span>&#123;</span><br><span class="line"><span class="comment">//key:订单号,value:订单处理结果</span></span><br><span class="line">   <span class="keyword">private</span> Map&lt;String, DeferredResult&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;String, DeferredResult&lt;String&gt;&gt;();</span><br><span class="line">   <span class="keyword">public</span> Map&lt;String, DeferredResult&lt;String&gt;&gt; getMap() &#123;</span><br><span class="line">      <span class="keyword">return</span> map;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, DeferredResult&lt;String&gt;&gt; map)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.map = map;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>生成服务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> MockQueue mockQueue;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> DeferredResultHolder deferredResultHolder;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">   </span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> DeferredResult&lt;String&gt; <span class="title">order</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      logger.info(<span class="string">"主线程开始"</span>);</span><br><span class="line">      <span class="comment">//随机生成订单号</span></span><br><span class="line">      String orderNumber = RandomStringUtils.randomNumeric(<span class="number">8</span>);</span><br><span class="line">      mockQueue.setPlaceOrder(orderNumber);<span class="comment">//设置订单号</span></span><br><span class="line"></span><br><span class="line">      DeferredResult&lt;String&gt; result = <span class="keyword">new</span> DeferredResult&lt;&gt;();</span><br><span class="line">      deferredResultHolder.getMap().put(orderNumber, result);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>设置监听器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听下单，返回Result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueListener</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">ContextRefreshedEvent</span>&gt; </span>&#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> MockQueue mockQueue;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> DeferredResultHolder deferredResultHolder;</span><br><span class="line">   <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(ContextRefreshedEvent event)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">         <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isNotBlank(mockQueue.getCompleteOrder())) &#123;</span><br><span class="line">               </span><br><span class="line">               String orderNumber = mockQueue.getCompleteOrder();</span><br><span class="line">               logger.info(<span class="string">"返回订单处理结果:"</span>+orderNumber);</span><br><span class="line">               deferredResultHolder.getMap().get(orderNumber).setResult(<span class="string">"place order success"</span>);<span class="comment">//当DeferredResult.setResult被执行，就意味着异步执行完毕需要向浏览器返回向信息</span></span><br><span class="line">               mockQueue.setCompleteOrder(<span class="keyword">null</span>);</span><br><span class="line">               </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  Thread.sleep(<span class="number">100</span>);</span><br><span class="line">               &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>调用服务，后台输出信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2017-10-04 14:00:44.512  INFO 6976 --- [nio-8080-exec-1] vic.tjs.web.async.AsyncController        : 主线程开始</span><br><span class="line">2017-10-04 14:00:44.516  INFO 6976 --- [      Thread-10] vic.tjs.web.async.MockQueue              : 接到下单请求, 75192809</span><br><span class="line">2017-10-04 14:00:45.517  INFO 6976 --- [      Thread-10] vic.tjs.web.async.MockQueue              : 下单请求处理完毕,75192809</span><br><span class="line">2017-10-04 14:00:45.597  INFO 6976 --- [       Thread-7] vic.tjs.web.async.QueueListener          : 返回订单处理结果:75192809</span><br></pre></td></tr></table></figure><ol start="6"><li>页面输出信息</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">place order success</span><br></pre></td></tr></table></figure><h5 id="异步服务的相关配置"><a href="#异步服务的相关配置" class="headerlink" title="异步服务的相关配置"></a>异步服务的相关配置</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 配置异步支持</span></span><br><span class="line"><span class="comment">    * 需要支持异步的拦截器都需要配在这里，支持异步的拦截器和addInterceptors不一样</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> configurer</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configureAsyncSupport</span><span class="params">(AsyncSupportConfigurer configurer)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//super.configureAsyncSupport(configurer);</span></span><br><span class="line">      configurer.registerCallableInterceptors(...); <span class="comment">//支持Callable的拦截器</span></span><br><span class="line">      configurer.registerDeferredResultInterceptors(..);<span class="comment">//支持DeferredResult的拦截器</span></span><br><span class="line">      configurer.setDefaultTimeout(..);<span class="comment">//异步请求的默认超时时间</span></span><br><span class="line">      configurer.setTaskExecutor(..);<span class="comment">//设置可重用的线程池</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Swagger自动生成文档"><a href="#Swagger自动生成文档" class="headerlink" title="Swagger自动生成文档"></a>Swagger自动生成文档</h4><p>​    目前很多项目都是前后端分离，并且前后端开发并行工作，后端人员手动编写文档，效率低而且难度大，并且在修改代码的同时，也需要修改文档。使用文档自动生成可以解决以上这些缺点，并且很好的使前端开发人员容易的调用所有的RESTful服务</p><ol><li><code>pom.xml</code>中添加依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 核心包：扫描文档，生成数据 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 生成格式化界面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>启动器中开启注解</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartApplication</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>访问文档地址<code>/swagger-ui.html</code></li><li>页面效果</li></ol><p><img src="images/swagger-1.png" alt=""></p><p><img src="images/swagger-2.png" alt=""></p><ol start="5"><li>自定义文档显示</li></ol><p><code>@ApiOperation</code>注解声明在方法中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"创建用户"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">create</span><span class="params">(@Valid @RequestBody User user,BindingResult errors)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="images/apioperation.png" alt=""></p><p><code>@ApiParam</code>注解声明在方法参数中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(@ApiParam(value = <span class="string">"用户id"</span>)</span> @PathVariable String id)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p><img src="images/apiparam.png" alt=""></p><p><code>@ApiModelProperty</code>注解声明在对象属性中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户名"</span>)</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="images/apimodelproperty.png" alt=""></p><h4 id="WireMock"><a href="#WireMock" class="headerlink" title="WireMock"></a>WireMock</h4><p>​    一般开发项目都会分模块进行，比如都会把前端和后端分开，在前端和后端里面也通常是分模块开发的。当开发进度不一致时，可以对依赖接口构建Mock Service，模拟不同输入/数据/场景，这样不至于影响本模块的开发进度。</p><ol><li>进入WireMock官网，进行服务器下载</li></ol><p><code>http://wiremock.org/docs/running-standalone/</code></p><ol start="2"><li><p>将下载后的<code>wiremock-standalone-2.14.0.jar</code>运行，可以参考官方文档进行参数设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">该文件目录下执行命令: java -jar wiremock-standalone-2.8.0.jar  - -port 8020</span><br><span class="line"># 其他参数 - - verbose 开启日志</span><br></pre></td></tr></table></figure></li><li><p>项目中使用</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.tomakehurst<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wiremock<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">!—</span> <span class="attr">wiremock</span>需要依赖<span class="attr">http</span>工具类 <span class="attr">--</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpmime<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>搭建服务</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * WireMock 服务器搭建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用静态引入WireMock，直接调用方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      configureFor(<span class="number">8020</span>);</span><br><span class="line">      removeAllMappings();</span><br><span class="line"></span><br><span class="line">      mock(<span class="string">"/order/1"</span>, <span class="string">"01"</span>);</span><br><span class="line">      mock(<span class="string">"/order/2"</span>, <span class="string">"02"</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mock</span><span class="params">(String url, String file)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">      ClassPathResource resource = <span class="keyword">new</span> ClassPathResource(<span class="string">"vic/response/"</span> + file + <span class="string">".txt"</span>);</span><br><span class="line">      String content = StringUtils.join(FileUtils.readLines(resource.getFile(), <span class="string">"UTF-8"</span>).toArray(), <span class="string">"\n"</span>);</span><br><span class="line">      stubFor(get(urlPathEqualTo(url)).willReturn(aResponse().withBody(content).withStatus(<span class="number">200</span>)));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>资源创建</li></ol><p>在资源目录下创建文件:vic/response/01.txt</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"id"</span>:<span class="number">1</span>,</span><br><span class="line">   <span class="attr">"type"</span>:<span class="string">"C"</span></span><br><span class="line">   <span class="string">"data"</span> : &#123;</span><br><span class="line">        <span class="attr">"name"</span> : <span class="string">"victorys"</span>,</span><br><span class="line">        <span class="attr">"age"</span> : <span class="number">22</span>,</span><br><span class="line">        <span class="attr">"sex"</span> : <span class="number">0</span></span><br><span class="line">        <span class="string">"interest"</span> : &#123;</span><br><span class="line">            <span class="attr">"0"</span> : <span class="string">"basketball"</span>,</span><br><span class="line">            <span class="attr">"1"</span> : <span class="string">"swingming"</span></span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过访问/order/1或得返回结果</p><h3 id="Slf4j"><a href="#Slf4j" class="headerlink" title="@Slf4j"></a>@Slf4j</h3><h4 id="slf4j"><a href="#slf4j" class="headerlink" title="slf4j"></a>slf4j</h4><p>对于一个maven项目。首先要在pom.xml中加入以下依赖项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>slf4j就是众多接口的集合，它不负责具体的日志实现，只在编译时负责寻找合适的日志系统进行绑定。具体有哪些接口，全部都定义在slf4j-api中。</li><li>slf4j-log4j12是链接slf4j-api和log4j中间的适配器。它实现了slf4j-apiz中StaticLoggerBinder接口，从而使得在编译时绑定的是slf4j-log4j12的getSingleton()方法</li><li>log4j是具体的日志系统。通过slf4j-log4j12初始化Log4j，达到最终日志的输出。</li><li>lombok：一个插件，封装了log的get和set，可以直接使用log来输出日志信息。</li></ol><h4 id="slf4j-1"><a href="#slf4j-1" class="headerlink" title="@slf4j"></a>@slf4j</h4><p>如果不想每次都写<code>private  final Logger logger = LoggerFactory.getLogger(XXX.class);</code> 可以用注解<code>@Slf4j</code></p><p>引入依赖，使用方式如上场景举例中代码示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="解决IDEA使用-Slf4j注入后找不到变量log"><a href="#解决IDEA使用-Slf4j注入后找不到变量log" class="headerlink" title="解决IDEA使用@Slf4j注入后找不到变量log"></a>解决IDEA使用@Slf4j注入后找不到变量log</h4><p>方式一：</p><p>idea中File –&gt; settings –&gt; Plugins –&gt; 点击”Browse repositories” –&gt; 搜索lombok –&gt; Install Lombok Plugins</p><p>若插件安装失败，则可以进行以下安装方式</p><p>方式二：</p><p>去idea官网下载插件 <a href="http://plugins.jetbrains.com/plugin/6317-lombok-plugin" target="_blank" rel="noopener">Lombok Plugin</a> ，到下载区，选择合适的版本下载，我的idea版本为2017.1.4，因此选择插件的版本号为<code>0.16-2017.1.4</code> 下载到文件为<code>lombok-plugin-0.16.zip</code></p><p>注：idea任何插件的版本都需要跟idea版本对应，否则会提示安装失败(本人踩过的坑)</p><p>安装步骤：解压下载到的zip文件，拷贝解压文件到idea安装目录下的<code>plugins</code>文件下，打开idea中的 plugins &gt; 选择 install plugin from disk &gt; 选择刚刚拷贝进去的文件夹中的jar，即可进行安装，安装完成后需要进行重启。</p><h3 id="Lombox"><a href="#Lombox" class="headerlink" title="Lombox"></a>Lombox</h3><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p><a href="https://projectlombok.org/" target="_blank" rel="noopener">Lombok</a>项目是一个java库，可以自动插入到您的编辑器和构建工具中，让您的java变得更加精彩。切勿再次写入另一个getter或equals方法。提前访问未来的Java功能<code>val</code>，等等。</p><p>除了官方介绍中，并不多相关文章，特意挑了<a href="https://blog.csdn.net/l_blackeagle/article/details/62041873" target="_blank" rel="noopener">一篇文章中相关内容</a></p><blockquote><p>lombok 提供了简单的注解的形式来帮助我们简化消除一些必须有但显得很臃肿的 java 代码。特别是相对于 POJO。<br>简单来说，比如我们新建了一个类，然后在其中写了几个字段，然后通常情况下我们需要手动去建立getter和setter方法啊，构造函数啊之类的，lombok的作用就是为了省去我们手动创建这些代码的麻烦，它能够在我们编译源码的时候自动帮我们生成这些方法。</p><p>lombok能够达到的效果就是在源码中不需要写一些通用的方法，但是在编译生成的字节码文件中会帮我们生成这些方法，这就是lombok的神奇作用。</p><p>虽然有人可能会说IDE里面都自带自动生成这些方法的功能，但是使用lombok会使你的代码看起来更加简洁，写起来也更加方便。</p></blockquote><h4 id="常用的注解"><a href="#常用的注解" class="headerlink" title="常用的注解"></a>常用的注解</h4><p>@slf4j、@Setter、@Getter、@NoArgsConstructor(注解在类上：为类提供一个无参的构造方法)、@AllArgsConstructor(注解在类上；为类提供一个全参的构造方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//注解在类上：为类提供一个无参的构造方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span><span class="comment">//注解在类上；为类提供一个全参的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Getter @Setter 注解在属性上；为属性提供 setting 方法 getting方法</span></span><br><span class="line">    <span class="meta">@Setter</span> <span class="meta">@Getter</span> <span class="keyword">private</span> <span class="keyword">int</span> pid;</span><br><span class="line">    <span class="meta">@Setter</span> <span class="meta">@Getter</span> <span class="keyword">private</span> String pname;</span><br><span class="line">    <span class="meta">@Setter</span> <span class="meta">@Getter</span> <span class="keyword">private</span> <span class="keyword">int</span> sage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>docker  一台虚拟机安装部署分布式web 前后端分离集群</title>
      <link href="/2018/06/26/docker/docker_dbe_/"/>
      <url>/2018/06/26/docker/docker_dbe_/</url>
      <content type="html"><![CDATA[<h1 id="docker-安装部署分布式web-前后端分离集群"><a href="#docker-安装部署分布式web-前后端分离集群" class="headerlink" title="docker  安装部署分布式web 前后端分离集群"></a>docker  安装部署分布式web 前后端分离集群</h1><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">作者</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">2018.06.29</td><td style="text-align:center">huangzuo</td><td style="text-align:center">首次发布</td></tr></tbody></table><h3 id="学习内容简介"><a href="#学习内容简介" class="headerlink" title="学习内容简介"></a>学习内容简介</h3><p>   相关课程指令脚本可以在百度云下载<br><a href="https://pan.baidu.com/s/15aVny_MRi0AQBQJE7myUOg" target="_blank" rel="noopener">https://pan.baidu.com/s/15aVny_MRi0AQBQJE7myUOg</a> 密码：j413</p><pre><code>本章节主要大概介绍如何使用docker虚拟机，部署分布式web 前后端分离集群，包过1、人人网开源前后端分离项目2、配置docker加载器3、安装mysql pxc集群4、安装redis 集群5、部署后端的项目6、安装ngxin 集群7、前端项目部署与负载均衡8、多台虚拟机安装docker sware 集群9、界面安装</code></pre><h3 id="人人网开源前后端分离项目"><a href="#人人网开源前后端分离项目" class="headerlink" title="人人网开源前后端分离项目"></a>人人网开源前后端分离项目</h3><p>地址: <a href="http://www.renren.io/,项目renren-fast" target="_blank" rel="noopener">http://www.renren.io/,项目renren-fast</a> </p><p>功能:<br><img src="images/renren.jpg" alt=""></p><h3 id="配置docker加载器"><a href="#配置docker加载器" class="headerlink" title="配置docker加载器"></a>配置docker加载器</h3><p>由于docker仓库在国外，需要配置国内远程镜像加速下载速度<br>访问地址:<a href="https://www.daocloud.io/" target="_blank" rel="noopener">https://www.daocloud.io/</a> 注册账号<br>执行对应的语句<br><img src="images/docker1.jpg" alt=""></p><h3 id="几个重要的docker指令"><a href="#几个重要的docker指令" class="headerlink" title="几个重要的docker指令"></a>几个重要的docker指令</h3><h4 id="查看容器运行日志"><a href="#查看容器运行日志" class="headerlink" title="查看容器运行日志"></a>查看容器运行日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker logs -f -t --tail 10 h1</span><br><span class="line"></span><br><span class="line">docker logs h1</span><br></pre></td></tr></table></figure><p>h1:容器名称</p><p>10:最近10行</p><h4 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it h1 bash</span><br></pre></td></tr></table></figure><h3 id="mysql-pxc集群安装"><a href="#mysql-pxc集群安装" class="headerlink" title="mysql pxc集群安装"></a>mysql pxc集群安装</h3><h4 id="下载pxc"><a href="#下载pxc" class="headerlink" title="下载pxc"></a>下载pxc</h4><p>访问网站<a href="https://hub.docker.com/r/percona/percona-xtradb-cluster/" target="_blank" rel="noopener">https://hub.docker.com/r/percona/percona-xtradb-cluster/</a> 里面有关percona/percona-xtradb-cluster集群安装相关描述<br>xshell 执行下面代码，下载镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull percona/percona-xtradb-cluster</span><br></pre></td></tr></table></figure></p><p>修改容器名称，删除原来的容器</p><p>修改<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag docker.io/percona-xtradb-cluster pxc</span><br></pre></td></tr></table></figure></p><p>删除<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm docker.io/percona-xtradb-cluster</span><br></pre></td></tr></table></figure></p><h4 id="安装mysql集群"><a href="#安装mysql集群" class="headerlink" title="安装mysql集群"></a>安装mysql集群</h4><p>在一台服务器安装5个pxc容器，即5台数据库，修改其中一台数据库的信息，其他四台也会同步修改</p><h5 id="设置网段"><a href="#设置网段" class="headerlink" title="设置网段"></a>设置网段</h5><p>处于安全考虑，需要给PXC集群实例创建docker内部网络<br>创建<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create net1</span><br></pre></td></tr></table></figure></p><p>查看<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network inspect net1</span><br></pre></td></tr></table></figure></p><p>删除<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network rm net1</span><br></pre></td></tr></table></figure></p><p>默认的网段是172.17.0.0 ，可以设置自己的网段<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --subnet=172.18.0.0/24 net1</span><br></pre></td></tr></table></figure></p><h5 id="创建docker卷"><a href="#创建docker卷" class="headerlink" title="创建docker卷"></a>创建docker卷</h5><p>容器是一个独立的空间，可编辑、删除等操作，为了保存容器的数据，需要把数据的路径映射到宿主机目录下。即把容器中的数据保存在宿主机中，就算容器被删数据还是保留下来</p><p>创建docker卷语句<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume create v1</span><br></pre></td></tr></table></figure></p><p>查看docker卷，可知道在宿主机的目录<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect v1</span><br></pre></td></tr></table></figure></p><p><img src="images/docker2.jpg" alt=""><br>删除docker卷<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume rm v1</span><br></pre></td></tr></table></figure></p><h5 id="创建pxc容器集群"><a href="#创建pxc容器集群" class="headerlink" title="创建pxc容器集群"></a>创建pxc容器集群</h5><p>创建pxc容器集群：第一个pxc容器和其他容器不一样</p><h6 id="创建第一个pxc容器"><a href="#创建第一个pxc容器" class="headerlink" title="创建第一个pxc容器"></a>创建第一个pxc容器</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root -v v1:/var/lib/mysql -v backup:/data --privileged --name=node1 --net=net1 --ip 172.18.0.2 pxc</span><br></pre></td></tr></table></figure><p>3307:3306:3307是宿主机端口，3306为容器mysql端口，为了在外面能访问到容器mysql，需要把端口映射到宿主机上</p><p>1、MYSQL_ROOT_PASSWORD=root：设置mysql 的root账户密码</p><p>2、CLUSTER_NAME=PXC:集群名称</p><p>3、XTRABACKUP_PASSWORD=root:mysql 之间通讯的密码</p><p>4、-v v1:/var/lib/mysql -v backup:/data :v1是docker卷,映射宿主机docker卷和容器的目录，每一个容器一个docker卷</p><p>5、–privileged:赋予容器修改宿主机目录文件的权限</p><p>6、–name=node1:容器名称</p><p>7、–net=net1 –ip 172.18.0.2:网络ip地址</p><p>8、pxc:镜像名称</p><h6 id="创建其他pxc容器"><a href="#创建其他pxc容器" class="headerlink" title="创建其他pxc容器"></a>创建其他pxc容器</h6><p>创建其他容器和第一个容器有所不同，主要添加CLUSTER_JOIN=node1 ，意思是和node1（第一个容器）容器同步数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root  -e  CLUSTER_JOIN=node1 -v v2:/var/lib/mysql -v backup:/data --privileged --name=node2 --net=net1 --ip 172.18.0.3 pxc</span><br><span class="line"></span><br><span class="line">docker run -d -p 3309:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root  -e  CLUSTER_JOIN=node1 -v v3:/var/lib/mysql -v backup:/data --privileged --name=node3 --net=net1 --ip 172.18.0.4 pxc</span><br><span class="line"></span><br><span class="line">docker run -d -p 3310:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root  -e  CLUSTER_JOIN=node1 -v v4:/var/lib/mysql -v backup:/data --privileged --name=node4 --net=net1 --ip 172.18.0.5 pxc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d -p 3311:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root  -e  CLUSTER_JOIN=node1 -v v5:/var/lib/mysql -v backup:/data --privileged --name=node5 --net=net1 --ip 172.18.0.6 pxc</span><br></pre></td></tr></table></figure><p>注意事项<br>1、3308:3306:3308宿主机的端口不能相同，每台映射到宿主机的端口都不一样</p><p>2、 CLUSTER_JOIN=node1:添加关联第一台容器</p><p>3、 -v v2:/var/lib/mysql：v2是docker卷,每台容器docker卷都不一样</p><p>4、–name=node2:每台容器名称都不一样</p><p>5、–net=net1 –ip 172.18.0.3:每台容器ip地址不一样</p><h5 id="测试集群"><a href="#测试集群" class="headerlink" title="测试集群"></a>测试集群</h5><p>pxc集群安装完，使用navicat连接数据库测试，注意连接对应的映射宿主机端口号，只要修改其中一台数据库的数据，其他数据库也会同步发生变化<br><img src="images/docker4.jpg" alt=""></p><h3 id="数据库负载均衡"><a href="#数据库负载均衡" class="headerlink" title="数据库负载均衡"></a>数据库负载均衡</h3><h4 id="负载均衡的必要性"><a href="#负载均衡的必要性" class="headerlink" title="负载均衡的必要性"></a>负载均衡的必要性</h4><p>pxc集群有多台数据库，如何能做到用户均匀访问不同数据库，提高网站访问并发量和性能、高可用？？</p><p><img src="images/docker5.jpg" alt=""></p><h4 id="Haproxy中间件做负载均衡"><a href="#Haproxy中间件做负载均衡" class="headerlink" title="Haproxy中间件做负载均衡"></a>Haproxy中间件做负载均衡</h4><p>haproxy 只做转发，均匀转发访问到不同数据库</p><p><img src="images/docker6.jpg" alt=""></p><h4 id="中间件比较"><a href="#中间件比较" class="headerlink" title="中间件比较"></a>中间件比较</h4><p><img src="images/docker7.jpg" alt=""></p><h4 id="docker安装Haproxy镜像"><a href="#docker安装Haproxy镜像" class="headerlink" title="docker安装Haproxy镜像"></a>docker安装Haproxy镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull haproxy</span><br></pre></td></tr></table></figure><h4 id="设置Haproxy配置文件"><a href="#设置Haproxy配置文件" class="headerlink" title="设置Haproxy配置文件"></a>设置Haproxy配置文件</h4><p>在宿主机上创建Haproxy 配置文件，haproxy.cfg文件在百度云相关指令上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /home/soft/haproxy.cfg</span><br></pre></td></tr></table></figure><p>通过映射方式到haproxy容器目录中，haproxy.cfg详情需要参考网站<a href="https://zhangge.net/5125.html" target="_blank" rel="noopener">https://zhangge.net/5125.html</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line"><span class="comment">#工作目录</span></span><br><span class="line">chroot /usr/<span class="built_in">local</span>/etc/haproxy</span><br><span class="line"><span class="comment">#日志文件，使用rsyslog服务中local5日志设备（/var/log/local5），等级info</span></span><br><span class="line"><span class="built_in">log</span> 127.0.0.1 local5 info</span><br><span class="line"><span class="comment">#守护进程运行</span></span><br><span class="line">daemon</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line"><span class="built_in">log</span>global</span><br><span class="line">modehttp</span><br><span class="line"><span class="comment">#日志格式</span></span><br><span class="line">optionhttplog</span><br><span class="line"><span class="comment">#日志中不记录负载均衡的心跳检测记录</span></span><br><span class="line">optiondontlognull</span><br><span class="line">    <span class="comment">#连接超时（毫秒）</span></span><br><span class="line">timeout connect 5000</span><br><span class="line">    <span class="comment">#客户端超时（毫秒）</span></span><br><span class="line">timeout client  50000</span><br><span class="line"><span class="comment">#服务器超时（毫秒）</span></span><br><span class="line">    timeout server  50000</span><br><span class="line"></span><br><span class="line"><span class="comment">#监控界面</span></span><br><span class="line">listen  admin_stats</span><br><span class="line"><span class="comment">#监控界面的访问的IP和端口</span></span><br><span class="line"><span class="built_in">bind</span>  0.0.0.0:8888</span><br><span class="line"><span class="comment">#访问协议</span></span><br><span class="line">    mode        http</span><br><span class="line"><span class="comment">#URI相对地址</span></span><br><span class="line">    stats uri   /dbs</span><br><span class="line"><span class="comment">#统计报告格式</span></span><br><span class="line">    stats realm     Global\ statistics</span><br><span class="line"><span class="comment">#登陆帐户信息</span></span><br><span class="line">    stats auth  admin:admin</span><br><span class="line"><span class="comment">#数据库负载均衡</span></span><br><span class="line">listen  proxy-mysql</span><br><span class="line"><span class="comment">#访问的IP和端口</span></span><br><span class="line"><span class="built_in">bind</span>  0.0.0.0:3306  </span><br><span class="line">    <span class="comment">#网络协议</span></span><br><span class="line">mode  tcp</span><br><span class="line"><span class="comment">#负载均衡算法（轮询算法）</span></span><br><span class="line"><span class="comment">#轮询算法：roundrobin</span></span><br><span class="line"><span class="comment">#权重算法：static-rr</span></span><br><span class="line"><span class="comment">#最少连接算法：leastconn</span></span><br><span class="line"><span class="comment">#请求源IP算法：source </span></span><br><span class="line">    balance  roundrobin</span><br><span class="line"><span class="comment">#日志格式</span></span><br><span class="line">    option  tcplog</span><br><span class="line"><span class="comment">#在MySQL中创建一个没有权限的haproxy用户，密码为空。Haproxy使用这个账户对MySQL数据库心跳检测</span></span><br><span class="line">    option  mysql-check user haproxy</span><br><span class="line">    server  MySQL_1 172.18.0.2:3306 check weight 1 maxconn 2000  </span><br><span class="line">    server  MySQL_2 172.18.0.3:3306 check weight 1 maxconn 2000  </span><br><span class="line">server  MySQL_3 172.18.0.4:3306 check weight 1 maxconn 2000 </span><br><span class="line">server  MySQL_4 172.18.0.5:3306 check weight 1 maxconn 2000</span><br><span class="line">server  MySQL_5 172.18.0.6:3306 check weight 1 maxconn 2000</span><br><span class="line"><span class="comment">#使用keepalive检测死链</span></span><br><span class="line">    option  tcpka</span><br></pre></td></tr></table></figure></p><p>主要是关注下面和数据库有关的配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">listen  proxy-mysql</span><br><span class="line"><span class="comment">#访问的IP和端口</span></span><br><span class="line"><span class="built_in">bind</span>  0.0.0.0:3306  </span><br><span class="line">    <span class="comment">#网络协议</span></span><br><span class="line">mode  tcp</span><br><span class="line"><span class="comment">#负载均衡算法（轮询算法）</span></span><br><span class="line"><span class="comment">#轮询算法：roundrobin</span></span><br><span class="line"><span class="comment">#权重算法：static-rr</span></span><br><span class="line"><span class="comment">#最少连接算法：leastconn</span></span><br><span class="line"><span class="comment">#请求源IP算法：source </span></span><br><span class="line">    balance  roundrobin</span><br><span class="line"><span class="comment">#日志格式</span></span><br><span class="line">    option  tcplog</span><br><span class="line"><span class="comment">#在MySQL中创建一个没有权限的haproxy用户，密码为空。Haproxy使用这个账户对MySQL数据库心跳检测</span></span><br><span class="line">    option  mysql-check user haproxy</span><br><span class="line">    server  MySQL_1 172.18.0.2:3306 check weight 1 maxconn 2000  </span><br><span class="line">    server  MySQL_2 172.18.0.3:3306 check weight 1 maxconn 2000  </span><br><span class="line">server  MySQL_3 172.18.0.4:3306 check weight 1 maxconn 2000 </span><br><span class="line">server  MySQL_4 172.18.0.5:3306 check weight 1 maxconn 2000</span><br><span class="line">server  MySQL_5 172.18.0.6:3306 check weight 1 maxconn 2000</span><br><span class="line"><span class="comment">#使用keepalive检测死链</span></span><br></pre></td></tr></table></figure></p><p>bind  0.0.0.0:3306:表示所有的ip地址都能访问数据库的3306端口</p><p>balance  roundrobin:负载均衡分发的请求算法</p><p>option  mysql-check user haproxy:需要检测haproxy 和数据库直接的连接，在MySQL中创建一个没有权限的haproxy用户，密码为空。Haproxy使用这个账户对MySQL数据库心跳检测</p><p>server  MySQL_1 172.18.0.2:3306 check weight 1 maxconn 2000  :MySQL数据库心跳检测</p><h4 id="创建mysql没有权限的haproxy用户，密码为空"><a href="#创建mysql没有权限的haproxy用户，密码为空" class="headerlink" title="创建mysql没有权限的haproxy用户，密码为空"></a>创建mysql没有权限的haproxy用户，密码为空</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user <span class="string">'haproxy'</span>@<span class="string">'%'</span> IDENTIFIED BY <span class="string">''</span>;</span><br></pre></td></tr></table></figure><h4 id="创建Haproxy容器"><a href="#创建Haproxy容器" class="headerlink" title="创建Haproxy容器"></a>创建Haproxy容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建第1个Haproxy负载均衡服务器</span></span><br><span class="line">docker run -it -d -p 4001:8888 -p 4002:3306 -v /home/soft/haproxy:/usr/<span class="built_in">local</span>/etc/haproxy --name h1 --privileged --net=net1 --ip 172.18.0.7 haproxy</span><br><span class="line"><span class="comment">#进入h1容器，启动Haproxy</span></span><br><span class="line">docker <span class="built_in">exec</span> -it h1 bash</span><br><span class="line">haproxy -f /usr/<span class="built_in">local</span>/etc/haproxy/haproxy.cfg</span><br><span class="line"><span class="comment">#创建第2个Haproxy负载均衡服务器</span></span><br><span class="line">docker run -it -d -p 4003:8888 -p 4004:3306 -v /home/soft/haproxy:/usr/<span class="built_in">local</span>/etc/haproxy --name h2 --privileged --net=net1 --ip 172.18.0.8 haproxy</span><br><span class="line"><span class="comment">#进入h2容器，启动Haproxy</span></span><br><span class="line">docker <span class="built_in">exec</span> -it h2 bash</span><br><span class="line">haproxy -f /usr/<span class="built_in">local</span>/etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure><p>访问haproxy 第一个容器页面，账户密码在haproxy.cfg里面-登陆帐户信息<br>stats auth  admin:admin，我设置了admin/admin<br><a href="http://192.168.157.129:4001/dbs" target="_blank" rel="noopener">http://192.168.157.129:4001/dbs</a></p><p><img src="images/docker8.jpg" alt=""></p><p>在 navicat新建数据库连接h1， 端口号是上面对应的宿主机端口(h1是4002)和ip地址，账号密码是数据库账号密码，新增数据可以看到在node1到node5都有了数据，说明配置成功</p><p><img src="images/docker9.jpg" alt=""></p><h4 id="Haproxy高可用，创建多个haproxy"><a href="#Haproxy高可用，创建多个haproxy" class="headerlink" title="Haproxy高可用，创建多个haproxy"></a>Haproxy高可用，创建多个haproxy</h4><p>  单节点的haproxy没有高可用性能，单个haproxy挂了，整个服务就挂了<br>  <img src="images/docker10.jpg" alt=""><br>  多节点haproxy安装需要用到Keepalived，多节点会争抢虚拟ip，抢到的节点作为主节点运行，其他节点作为备份，节点之间发送心跳检测，当主节点挂了，其他备份节点会争抢成为主节点，实现高可用<br>    <img src="images/docker11.jpg" alt=""><br>  多节点haproxy方案<br>    <img src="images/docker12.jpg" alt=""></p><h4 id="Haproxy容器内安装Keepalived，设置虚拟IP"><a href="#Haproxy容器内安装Keepalived，设置虚拟IP" class="headerlink" title="Haproxy容器内安装Keepalived，设置虚拟IP"></a>Haproxy容器内安装Keepalived，设置虚拟IP</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入h1容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it h1 bash</span><br><span class="line"><span class="comment">#更新软件包</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment">#安装VIM</span></span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="comment">#安装Keepalived</span></span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="comment">#编辑Keepalived配置文件（参考下方配置文件）</span></span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="comment">#启动Keepalived</span></span><br><span class="line">service keepalived start</span><br><span class="line"><span class="comment">#宿主机执行ping命令</span></span><br><span class="line">ping 172.18.0.201</span><br></pre></td></tr></table></figure><p>keepalived.conf 配置文件 争抢虚拟IP<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance  VI_1 &#123;</span><br><span class="line">    state  MASTER</span><br><span class="line">    interface  eth0</span><br><span class="line">    virtual_router_id  51</span><br><span class="line">    priority  100</span><br><span class="line">    advert_int  1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type  PASS</span><br><span class="line">        auth_pass  123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        172.18.0.201</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置文件解析<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">VI_1:配置信息的名字，可以修改</span><br><span class="line"></span><br><span class="line">state  MASTER:Keepalived节点身份信息-MASTER主服务（可以多个），BACKUP备服务器（可以多个），节点启动时主服务抢占虚拟IP,备用服务器不会抢占IP</span><br><span class="line"></span><br><span class="line">interface  eth0:网卡设置，定义的虚拟IP要设置在那个网卡里面，eth0是docker虚拟机的网卡，宿主机能访问，局域网不能访问，局域网要想访问，需要在宿主机上把eth0网卡映射到局域网上某个虚拟ip上，所以宿主机也需要安装keepalived</span><br><span class="line"></span><br><span class="line">virtual_router_id  51:给Keepalived集群组起ID-虚拟路由标识，MASTER和BACKUPB的虚拟路由标识必须一致，标识可以是2~255</span><br><span class="line"></span><br><span class="line">priority  100:权重，值越大争抢到虚拟IP几率越大</span><br><span class="line"></span><br><span class="line">advert_int  1:心跳检测，MASTER和BACKUPB节点之间同步检测时间间隔，单位秒，1每一秒检测一次，主备之间必须一致</span><br><span class="line"></span><br><span class="line">authentication &#123; auth_type  PASS  auth_pass  123456 &#125;:心跳检测需要开放的账户密码</span><br><span class="line"></span><br><span class="line">virtual_ipaddress &#123;  172.18.0.201 &#125;:eth0定义的虚拟IP,可以设置多个虚拟IP地址，每行一个，只在docker内部能看得见</span><br></pre></td></tr></table></figure></p><p><font color="#660000">注意问题:</font><br><br>1、在执行apt-get update，发现docker 机无法解析dns，需要修改/etc/resolv.conf的nameserver 值为主机的值</p><p> <img src="images/docker13.jpg" alt=""></p><p> 主机DNS值<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmcli dev show | grep IP4.DNS</span><br></pre></td></tr></table></figure></p><p> 发现在ubuntu不能使用命令vi ，前提是要apt-get update，直接使用touch，echo</p><p> 备份<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv resolv.conf resolv.conf-bak</span><br></pre></td></tr></table></figure></p><p>  创建<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch resolv.conf</span><br></pre></td></tr></table></figure></p><p> 添加数据<br>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> nameserver 192.168.157.2 &gt; resolv.conf</span><br><span class="line"><span class="built_in">echo</span> options ndots:0 &gt;&gt;resolv.conf</span><br></pre></td></tr></table></figure></p><p> 2、apt-get镜像在国外，下载速度比较慢，添加阿里云镜像，修改vim /etc/apt/sources.list 文件，如果不能使用vim，可以先使用echo &gt;&gt; sources.list<br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ xenial-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure></p><h4 id="宿主机安装Keepalived"><a href="#宿主机安装Keepalived" class="headerlink" title="宿主机安装Keepalived"></a>宿主机安装Keepalived</h4><p>安装Keepalived<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#宿主机执行安装Keepalived</span></span><br><span class="line">yum -y install keepalived</span><br><span class="line"><span class="comment">#修改Keepalived配置文件</span></span><br><span class="line">vi /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="comment">#启动Keepalived</span></span><br><span class="line">service keepalived start</span><br></pre></td></tr></table></figure></p><p>Keepalived配置文件如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 1111</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">       192.168.157.135</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.157.135 8888 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr </span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 172.18.0.201 8888 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">virtual_server 192.168.157.135 3306 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr </span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line"></span><br><span class="line">    real_server 172.18.0.201 3306 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>配置文件解析<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">192.168.157.135：宿主机局域网的IP地址</span><br><span class="line"></span><br><span class="line">8888:对应容器Haproxy服务端口</span><br><span class="line"></span><br><span class="line">3306:对应容器Haproxy数据库端口</span><br><span class="line"></span><br><span class="line">172.18.0.201:keepalived争抢的IP地址</span><br></pre></td></tr></table></figure></p><h4 id="检测Keepalived高可用"><a href="#检测Keepalived高可用" class="headerlink" title="检测Keepalived高可用"></a>检测Keepalived高可用</h4><p>1、访问 Haproxy服务，ip地址是192.168.157.135，端口号上面设置8888<br> <img src="images/docker14.jpg" alt=""></p><p>2、使用navicat 登录 ，ip地址是192.168.157.135，端口号3306，账号密码自己设置的数据库账户密码<br> <img src="images/docker15.jpg" alt=""><br> <img src="images/docker16.jpg" alt=""></p><p>3、暂停其中的一个haproxy容器，查看是否还能使用</p><p>暂停容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pause h1</span><br></pre></td></tr></table></figure></p><p>运行暂停的容器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker unpause h1</span><br></pre></td></tr></table></figure></p><p>可见集群还是能使用</p><h3 id="暂停-pxc集群方法"><a href="#暂停-pxc集群方法" class="headerlink" title="暂停 pxc集群方法"></a>暂停 pxc集群方法</h3><p>当要关闭Linux虚拟机，pxc如何关闭并如何保存，这些是有顺序的。最好是直接挂起虚拟机，而不是直接关闭虚拟机。挂起虚拟机，重新开启虚拟机，容器会直接恢复启动，但docker虚拟机得不到网络。从挂起状态恢复运行状态，为内部进程虚拟机分配网络，宿主机需要修改下面配置<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysctl.conf</span><br><span class="line"><span class="comment">#文件中添加 net.ipv4.ip_forward=1 这个配置</span></span><br><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure></p><h3 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h3><p>1、冷备份-暂停数据库运行<br> <img src="images/docker17.jpg" alt=""></p><p>2、热备份-数据库运行中<br><img src="images/docker18.jpg" alt=""></p><p>IVM :linux 自带的备份方式，分区里面的数据，可以备份多种数据库，备份要加锁，只读，不能写</p><p>XtraBackup :能读能写<br><img src="images/docker20.jpg" alt=""></p><p>热备份数据</p><p><img src="images/docker19.jpg" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#宿主机</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it node1 bash</span><br><span class="line"><span class="comment">#更新软件包</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment">#安装热备工具</span></span><br><span class="line">apt-get install percona-xtrabackup-24</span><br><span class="line"><span class="comment">#全量热备到backup</span></span><br><span class="line">innobackupex --user=root --password=root /data/backup/full</span><br></pre></td></tr></table></figure></p><h3 id="数据库还原-只有冷还原"><a href="#数据库还原-只有冷还原" class="headerlink" title="数据库还原-只有冷还原"></a>数据库还原-只有冷还原</h3><p><img src="images/docker21.jpg" alt=""><br>冷还原数据 停止其余4个节点，并删除节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker stop node2</span><br><span class="line">docker stop node3</span><br><span class="line">docker stop node4</span><br><span class="line">docker stop node5</span><br><span class="line">docker rm node2</span><br><span class="line">docker rm node3</span><br><span class="line">docker rm node4</span><br><span class="line">docker rm node5</span><br></pre></td></tr></table></figure><p>node1容器中删除MySQL的数据<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除数据</span></span><br><span class="line">rm -rf /var/lib/mysql/*</span><br><span class="line"><span class="comment">#清空事务</span></span><br><span class="line">innobackupex --user=root --password=abc123456 --apply-back /data/backup/full/2018-04-15_05-09-07/</span><br><span class="line"><span class="comment">#还原数据</span></span><br><span class="line">innobackupex --user=root --password=abc123456 --copy-back  /data/backup/full/2018-04-15_05-09-07/</span><br></pre></td></tr></table></figure></p><p>重新创建其余4个节点，组件PXC集群</p><h3 id="安装redis-集群"><a href="#安装redis-集群" class="headerlink" title="安装redis 集群"></a>安装redis 集群</h3><h4 id="高速缓存结束"><a href="#高速缓存结束" class="headerlink" title="高速缓存结束"></a>高速缓存结束</h4><p><img src="images/redis1.jpg" alt=""></p><h4 id="redis介绍"><a href="#redis介绍" class="headerlink" title="redis介绍"></a>redis介绍</h4><p><img src="images/redis2.jpg" alt=""></p><h4 id="redis集群介绍"><a href="#redis集群介绍" class="headerlink" title="redis集群介绍"></a>redis集群介绍</h4><p>主要使用RedisCluster方案<br><img src="images/redis3.jpg" alt=""></p><h4 id="RedisCluster方案介绍"><a href="#RedisCluster方案介绍" class="headerlink" title="RedisCluster方案介绍"></a>RedisCluster方案介绍</h4><p><img src="images/redis4.jpg" alt=""><br>主从同步</p><p><img src="images/redis5.jpg" alt=""></p><p>RedisCluster集群的高可用<br><img src="images/redis6.jpg" alt=""></p><h4 id="安装redis镜像，配置RedisCluster集群"><a href="#安装redis镜像，配置RedisCluster集群" class="headerlink" title="安装redis镜像，配置RedisCluster集群"></a>安装redis镜像，配置RedisCluster集群</h4><h5 id="安装Redis镜像"><a href="#安装Redis镜像" class="headerlink" title="安装Redis镜像"></a>安装Redis镜像</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull yyyyttttwwww/redis</span><br></pre></td></tr></table></figure><h5 id="创建net2网段"><a href="#创建net2网段" class="headerlink" title="创建net2网段"></a>创建net2网段</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create --subnet=172.19.0.0/16 net2</span><br></pre></td></tr></table></figure><h5 id="创建6节点Redis容器"><a href="#创建6节点Redis容器" class="headerlink" title="创建6节点Redis容器"></a>创建6节点Redis容器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name r1 -p 5001:6379 --net=net2 --ip 172.19.0.2 redis bash</span><br><span class="line">docker run -it -d --name r2 -p 5002:6379 --net=net2 --ip 172.19.0.3 redis bash</span><br><span class="line">docker run -it -d --name r3 -p 5003:6379 --net=net2 --ip 172.19.0.4 redis bash</span><br><span class="line">docker run -it -d --name r4 -p 5004:6379 --net=net2 --ip 172.19.0.5 redis bash</span><br><span class="line">docker run -it -d --name r5 -p 5005:6379 --net=net2 --ip 172.19.0.6 redis bash</span><br><span class="line">docker run -it -d --name r6 -p 5006:6379 --net=net2 --ip 172.19.0.7 redis bash</span><br></pre></td></tr></table></figure><h5 id="启动6节点Redis服务器"><a href="#启动6节点Redis服务器" class="headerlink" title="启动6节点Redis服务器"></a>启动6节点Redis服务器</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入r1节点</span></span><br><span class="line">docker <span class="built_in">exec</span> -it r1 bash</span><br><span class="line">vi /usr/redis/redis.conf</span><br><span class="line"><span class="built_in">cd</span> /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="comment">#进入r2节点</span></span><br><span class="line">docker <span class="built_in">exec</span> -it r2 bash</span><br><span class="line">vi /usr/redis/redis.conf</span><br><span class="line"><span class="built_in">cd</span> /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="comment">#进入r3节点</span></span><br><span class="line">docker <span class="built_in">exec</span> -it r3 bash</span><br><span class="line">vi /usr/redis/redis.conf</span><br><span class="line"><span class="built_in">cd</span> /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="comment">#进入r4节点</span></span><br><span class="line">docker <span class="built_in">exec</span> -it r4 bash</span><br><span class="line">vi /usr/redis/redis.conf</span><br><span class="line"><span class="built_in">cd</span> /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="comment">#进入r5节点</span></span><br><span class="line">docker <span class="built_in">exec</span> -it r5 bash</span><br><span class="line">vi /usr/redis/redis.conf</span><br><span class="line"><span class="built_in">cd</span> /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br><span class="line"><span class="comment">#进入r6节点</span></span><br><span class="line">docker <span class="built_in">exec</span> -it r6 bash</span><br><span class="line">vi /usr/redis/redis.conf</span><br><span class="line"><span class="built_in">cd</span> /usr/redis/src</span><br><span class="line">./redis-server ../redis.conf</span><br></pre></td></tr></table></figure><p>redis.conf配置文件修改的地方<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">daemonize yes</span><br><span class="line">cluster-enabled yes</span><br><span class="line">cluster-config-file nodes.conf</span><br><span class="line">cluster-node-timeout 15000</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0  <span class="comment">#设置其他IP地址能访问，Cluster集群中的redis需要互相访问</span></span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure></p><p><img src="images/redis8.jpg" alt=""></p><h5 id="创建Cluster集群"><a href="#创建Cluster集群" class="headerlink" title="创建Cluster集群"></a>创建Cluster集群</h5><p>cluster是ruby写的，需要安装ruby环境，但上面方式安装的redis已经集成了，不再需要安装<br><img src="images/redis7.jpg" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在r1节点上执行下面的指令</span></span><br><span class="line"><span class="built_in">cd</span> /usr/redis/src</span><br><span class="line">mkdir -p ../cluster</span><br><span class="line">cp redis-trib.rb ../cluster/</span><br><span class="line"><span class="built_in">cd</span> ../cluster</span><br><span class="line"><span class="comment">#创建Cluster集群</span></span><br><span class="line">./redis-trib.rb create --replicas 1 172.19.0.2:6379 172.19.0.3:6379 172.19.0.4:6379 172.19.0.5:6379 172.19.0.6:6379 172.19.0.7:6379</span><br></pre></td></tr></table></figure></p><h5 id="重启redis"><a href="#重启redis" class="headerlink" title="重启redis"></a>重启redis</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep redis <span class="comment">#查看进程</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">kill</span> -9 进程id  <span class="comment">#杀死进程</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /usr/redis/src</span><br><span class="line"></span><br><span class="line">./redis-server ../redis.conf</span><br></pre></td></tr></table></figure><h3 id="部署后端的项目"><a href="#部署后端的项目" class="headerlink" title="部署后端的项目"></a>部署后端的项目</h3><h4 id="修改数据源配置"><a href="#修改数据源配置" class="headerlink" title="修改数据源配置"></a>修改数据源配置</h4><p>application_dev.yml</p><h4 id="修改redis配置"><a href="#修改redis配置" class="headerlink" title="修改redis配置"></a>修改redis配置</h4><p>application.yml<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#host: localhost</span></span><br><span class="line">  <span class="comment">#port: 6379</span></span><br><span class="line">  <span class="comment">#password:    # 密码（默认为空）</span></span><br><span class="line">  timeout: 6000ms  <span class="comment"># 连接超时时长（毫秒）</span></span><br><span class="line">  cluster:</span><br><span class="line">    nodes:</span><br><span class="line">    - 172.19.0.2:6379</span><br><span class="line">    - 172.19.0.3:6379</span><br><span class="line">    - 172.19.0.4:6379</span><br><span class="line">    - 172.19.0.5:6379</span><br><span class="line">    - 172.19.0.6:6379</span><br><span class="line">    - 172.19.0.7:6379</span><br><span class="line">  jedis:</span><br></pre></td></tr></table></figure></p><h4 id="进入人人开源后端项目，执行打包（修改配置文件，更改端口，打包三次生成三个JAR文件）"><a href="#进入人人开源后端项目，执行打包（修改配置文件，更改端口，打包三次生成三个JAR文件）" class="headerlink" title="进入人人开源后端项目，执行打包（修改配置文件，更改端口，打包三次生成三个JAR文件）"></a>进入人人开源后端项目，执行打包（修改配置文件，更改端口，打包三次生成三个JAR文件）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean install -Dmaven.test.skip=<span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="安装Java镜像"><a href="#安装Java镜像" class="headerlink" title="安装Java镜像"></a>安装Java镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull java</span><br></pre></td></tr></table></figure><h4 id="创建3节点Java容器"><a href="#创建3节点Java容器" class="headerlink" title="创建3节点Java容器"></a>创建3节点Java容器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#创建数据卷，上传JAR文件</span></span><br><span class="line">docker volume create j1</span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">docker run -it -d --name j1 -v j1:/home/soft --net=host java</span><br><span class="line"><span class="comment">#进入j1容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it j1 bash</span><br><span class="line"><span class="comment">#启动Java项目</span></span><br><span class="line">nohup java -jar /home/soft/renren-fast.jar</span><br><span class="line"><span class="comment">#查看日志</span></span><br><span class="line">tail -fn 50 nohup.out</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据卷，上传JAR文件</span></span><br><span class="line">docker volume create j2</span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">docker run -it -d --name j2 -v j2:/home/soft --net=host java</span><br><span class="line"><span class="comment">#进入j1容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it j2 bash</span><br><span class="line"><span class="comment">#启动Java项目</span></span><br><span class="line">nohup java -jar /home/soft/renren-fast.jar</span><br><span class="line"><span class="comment">#查看日志</span></span><br><span class="line">tail -fn 50 nohup.out</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建数据卷，上传JAR文件</span></span><br><span class="line">docker volume create j3</span><br><span class="line"><span class="comment">#启动容器</span></span><br><span class="line">docker run -it -d --name j3 -v j3:/home/soft --net=host java</span><br><span class="line"><span class="comment">#进入j1容器</span></span><br><span class="line">docker <span class="built_in">exec</span> -it j3 bash</span><br><span class="line"><span class="comment">#启动Java项目</span></span><br><span class="line">nohup java -jar /home/soft/renren-fast.jar</span><br><span class="line"><span class="comment">#查看日志</span></span><br><span class="line">tail -fn 50 nohup.out</span><br></pre></td></tr></table></figure><h4 id="访问网站"><a href="#访问网站" class="headerlink" title="访问网站"></a>访问网站</h4><p><a href="http://192.168.157.129:6001/renren-fast/swagger/index.html" target="_blank" rel="noopener">http://192.168.157.129:6001/renren-fast/swagger/index.html</a><br><img src="images/renren1.jpg" alt=""></p><h3 id="nginx-负载均衡"><a href="#nginx-负载均衡" class="headerlink" title="nginx 负载均衡"></a>nginx 负载均衡</h3><h4 id="安装Nginx镜像"><a href="#安装Nginx镜像" class="headerlink" title="安装Nginx镜像"></a>安装Nginx镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br></pre></td></tr></table></figure><h4 id="创建Nginx容器，配置负载均衡"><a href="#创建Nginx容器，配置负载均衡" class="headerlink" title="创建Nginx容器，配置负载均衡"></a>创建Nginx容器，配置负载均衡</h4><p><img src="images/renren3.jpg" alt=""></p><h5 id="宿主机上-home-n1-nginx-conf配置文件内容如下："><a href="#宿主机上-home-n1-nginx-conf配置文件内容如下：" class="headerlink" title="宿主机上/home/n1/nginx.conf配置文件内容如下："></a>宿主机上/home/n1/nginx.conf配置文件内容如下：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header        X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">upstream tomcat &#123;</span><br><span class="line">server 192.168.99.104:6001;</span><br><span class="line">server 192.168.99.104:6002;</span><br><span class="line">server 192.168.99.104:6003;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       6101;</span><br><span class="line">        server_name  192.168.99.104; </span><br><span class="line">        location / &#123;  </span><br><span class="line">            proxy_pass   http://tomcat;</span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建第1个Nginx节点"><a href="#创建第1个Nginx节点" class="headerlink" title="创建第1个Nginx节点"></a>创建第1个Nginx节点</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name n1 -v /home/n1/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</span><br></pre></td></tr></table></figure><h5 id="宿主机上-home-n2-nginx-conf配置文件内容如下："><a href="#宿主机上-home-n2-nginx-conf配置文件内容如下：" class="headerlink" title="宿主机上/home/n2/nginx.conf配置文件内容如下："></a>宿主机上/home/n2/nginx.conf配置文件内容如下：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header        X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">upstream tomcat &#123;</span><br><span class="line">server 192.168.99.104:6001;</span><br><span class="line">server 192.168.99.104:6002;</span><br><span class="line">server 192.168.99.104:6003;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       6102;</span><br><span class="line">        server_name  192.168.99.104; </span><br><span class="line">        location / &#123;  </span><br><span class="line">            proxy_pass   http://tomcat;</span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="创建第2个Nginx节点"><a href="#创建第2个Nginx节点" class="headerlink" title="创建第2个Nginx节点"></a>创建第2个Nginx节点</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it -d --name n2 -v /home/n2/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</span><br></pre></td></tr></table></figure><h3 id="后端项目双机热备负载均衡"><a href="#后端项目双机热备负载均衡" class="headerlink" title="后端项目双机热备负载均衡"></a>后端项目双机热备负载均衡</h3><p><img src="images/renren2.jpg" alt=""></p><h4 id="在Nginx容器安装Keepalived"><a href="#在Nginx容器安装Keepalived" class="headerlink" title="在Nginx容器安装Keepalived"></a>在Nginx容器安装Keepalived</h4><h5 id="n1节点keepalived"><a href="#n1节点keepalived" class="headerlink" title="n1节点keepalived"></a>n1节点keepalived</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入n1节点</span></span><br><span class="line">docker <span class="built_in">exec</span> -it n1 bash</span><br><span class="line"><span class="comment">#更新软件包</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment">#安装VIM</span></span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="comment">#安装Keepalived</span></span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="comment">#编辑Keepalived配置文件(如下)</span></span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="comment">#启动Keepalived</span></span><br><span class="line">service keepalived start</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.151</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.99.151 6201 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.99.104 6101 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="n2节点keepalived"><a href="#n2节点keepalived" class="headerlink" title="n2节点keepalived"></a>n2节点keepalived</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入n2节点</span></span><br><span class="line">docker <span class="built_in">exec</span> -it n2 bash</span><br><span class="line"><span class="comment">#更新软件包</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment">#安装VIM</span></span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="comment">#安装Keepalived</span></span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="comment">#编辑Keepalived配置文件(如下)</span></span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="comment">#启动Keepalived</span></span><br><span class="line">service keepalived start</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 51</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.151</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.99.151 6201 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.99.104 6102 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端项目部署与负载均衡"><a href="#前端项目部署与负载均衡" class="headerlink" title="前端项目部署与负载均衡"></a>前端项目部署与负载均衡</h3><p><img src="images/docker22.jpg" alt=""></p><h4 id="设置前端连接后端的ip地址"><a href="#设置前端连接后端的ip地址" class="headerlink" title="设置前端连接后端的ip地址"></a>设置前端连接后端的ip地址</h4><p>比如<a href="http://192.168.157.129:6101/renren-fast" target="_blank" rel="noopener">http://192.168.157.129:6101/renren-fast</a><br><img src="images/renren4.jpg" alt=""></p><h4 id="打包部署前端项目"><a href="#打包部署前端项目" class="headerlink" title="打包部署前端项目"></a>打包部署前端项目</h4><h4 id="使用淘宝镜像-加速下载速度"><a href="#使用淘宝镜像-加速下载速度" class="headerlink" title="使用淘宝镜像,加速下载速度"></a>使用淘宝镜像,加速下载速度</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h4 id="在前端项目路径下执行打包指令"><a href="#在前端项目路径下执行打包指令" class="headerlink" title="在前端项目路径下执行打包指令"></a>在前端项目路径下执行打包指令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br><span class="line"><span class="comment">#安装了淘宝镜像</span></span><br><span class="line">cnpm run build</span><br></pre></td></tr></table></figure><p>dish（build）目录的文件拷贝到宿主机的/home/fn1/renren-vue、/home/fn2/renren-vue、/home/fn3/renren-vue的目录下面</p><h4 id="创建3节点的Nginx，部署前端项目"><a href="#创建3节点的Nginx，部署前端项目" class="headerlink" title="创建3节点的Nginx，部署前端项目"></a>创建3节点的Nginx，部署前端项目</h4><h5 id="nginx-第一个节点"><a href="#nginx-第一个节点" class="headerlink" title="nginx 第一个节点"></a>nginx 第一个节点</h5><p>宿主机/home/fn1/nginx.conf的配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header        X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 6501;</span><br><span class="line">server_name  192.168.99.104;</span><br><span class="line">location  /  &#123;</span><br><span class="line">root  /home/fn1/renren-vue;</span><br><span class="line">index  index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#启动第fn1节点</span></span><br><span class="line">docker run -it -d --name fn1 -v /home/fn1/nginx.conf:/etc/nginx/nginx.conf -v /home/fn1/renren-vue:/home/fn1/renren-vue --privileged --net=host nginx</span><br></pre></td></tr></table></figure></p><h5 id="nginx-第二个节点"><a href="#nginx-第二个节点" class="headerlink" title="nginx 第二个节点"></a>nginx 第二个节点</h5><p>宿主机/home/fn2/nginx.conf的配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header        X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 6502;</span><br><span class="line">server_name  192.168.99.104;</span><br><span class="line">location  /  &#123;</span><br><span class="line">root  /home/fn2/renren-vue;</span><br><span class="line">index  index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#启动第fn2节点</span></span><br><span class="line">docker run -it -d --name fn2 -v /home/fn2/nginx.conf:/etc/nginx/nginx.conf -v /home/fn2/renren-vue:/home/fn2/renren-vue --privileged --net=host nginx</span><br></pre></td></tr></table></figure></p><h5 id="nginx-第三个节点"><a href="#nginx-第三个节点" class="headerlink" title="nginx 第三个节点"></a>nginx 第三个节点</h5><p>宿主机/home/fn3/nginx.conf的配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header        X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen 6503;</span><br><span class="line">server_name  192.168.99.104;</span><br><span class="line">location  /  &#123;</span><br><span class="line">root  /home/fn3/renren-vue;</span><br><span class="line">index  index.html;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">启动fn3节点</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动第fn3节点</span></span><br><span class="line">docker run -it -d --name fn3 -v /home/fn3/nginx.conf:/etc/nginx/nginx.conf -v /home/fn3/renren-vue:/home/fn3/renren-vue --privileged --net=host nginx</span><br></pre></td></tr></table></figure></p><h5 id="利用keepalived配置负载均衡"><a href="#利用keepalived配置负载均衡" class="headerlink" title="利用keepalived配置负载均衡"></a>利用keepalived配置负载均衡</h5><h6 id="ff1-keepalived-nginx节点"><a href="#ff1-keepalived-nginx节点" class="headerlink" title="ff1  keepalived-nginx节点"></a>ff1  keepalived-nginx节点</h6><p>宿主机/home/ff1/nginx.conf配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header        X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">upstream fn &#123;</span><br><span class="line">server 192.168.99.104:6501;</span><br><span class="line">server 192.168.99.104:6502;</span><br><span class="line">server 192.168.99.104:6503;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       6601;</span><br><span class="line">        server_name  192.168.99.104; </span><br><span class="line">        location / &#123;  </span><br><span class="line">            proxy_pass   http://fn;</span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#启动ff1节点</span></span><br><span class="line">docker run -it -d --name ff1 -v /home/ff1/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</span><br></pre></td></tr></table></figure></p><h6 id="ff2-keepalived-nginx节点"><a href="#ff2-keepalived-nginx节点" class="headerlink" title="ff2  keepalived-nginx节点"></a>ff2  keepalived-nginx节点</h6><p>宿主机/home/ff2/nginx.conf配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line">error_log  /var/<span class="built_in">log</span>/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/<span class="built_in">log</span>/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">proxy_redirect          off;</span><br><span class="line">proxy_set_header        Host <span class="variable">$host</span>;</span><br><span class="line">proxy_set_header        X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">proxy_set_header        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">client_max_body_size    10m;</span><br><span class="line">client_body_buffer_size   128k;</span><br><span class="line">proxy_connect_timeout   5s;</span><br><span class="line">proxy_send_timeout      5s;</span><br><span class="line">proxy_read_timeout      5s;</span><br><span class="line">proxy_buffer_size        4k;</span><br><span class="line">proxy_buffers           4 32k;</span><br><span class="line">proxy_busy_buffers_size  64k;</span><br><span class="line">proxy_temp_file_write_size 64k;</span><br><span class="line"></span><br><span class="line">upstream fn &#123;</span><br><span class="line">server 192.168.99.104:6501;</span><br><span class="line">server 192.168.99.104:6502;</span><br><span class="line">server 192.168.99.104:6503;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">        listen       6602;</span><br><span class="line">        server_name  192.168.99.104; </span><br><span class="line">        location / &#123;  </span><br><span class="line">            proxy_pass   http://fn;</span><br><span class="line">            index  index.html index.htm;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#启动ff2节点</span></span><br><span class="line">docker run -it -d --name ff2 -v /home/ff2/nginx.conf:/etc/nginx/nginx.conf --net=host --privileged nginx</span><br></pre></td></tr></table></figure></p><h5 id="配置双机热备"><a href="#配置双机热备" class="headerlink" title="配置双机热备"></a>配置双机热备</h5><h6 id="ff1节点安装keepalived"><a href="#ff1节点安装keepalived" class="headerlink" title="ff1节点安装keepalived"></a>ff1节点安装keepalived</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入ff1节点</span></span><br><span class="line">docker <span class="built_in">exec</span> -it ff1 bash</span><br><span class="line"><span class="comment">#更新软件包</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment">#安装VIM</span></span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="comment">#安装Keepalived</span></span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="comment">#编辑Keepalived配置文件(如下)</span></span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="comment">#启动Keepalived</span></span><br><span class="line">service keepalived start</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.152</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.99.151 6701 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.99.104 6601 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="ff2节点安装keepalived"><a href="#ff2节点安装keepalived" class="headerlink" title="ff2节点安装keepalived"></a>ff2节点安装keepalived</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#进入ff2节点</span></span><br><span class="line">docker <span class="built_in">exec</span> -it ff2 bash</span><br><span class="line"><span class="comment">#更新软件包</span></span><br><span class="line">apt-get update</span><br><span class="line"><span class="comment">#安装VIM</span></span><br><span class="line">apt-get install vim</span><br><span class="line"><span class="comment">#安装Keepalived</span></span><br><span class="line">apt-get install keepalived</span><br><span class="line"><span class="comment">#编辑Keepalived配置文件(如下)</span></span><br><span class="line">vim /etc/keepalived/keepalived.conf</span><br><span class="line"><span class="comment">#启动Keepalived</span></span><br><span class="line">service keepalived start</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">    state MASTER</span><br><span class="line">    interface ens33</span><br><span class="line">    virtual_router_id 52</span><br><span class="line">    priority 100</span><br><span class="line">    advert_int 1</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456</span><br><span class="line">    &#125;</span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">        192.168.99.152</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">virtual_server 192.168.99.151 6701 &#123;</span><br><span class="line">    delay_loop 3</span><br><span class="line">    lb_algo rr</span><br><span class="line">    lb_kind NAT</span><br><span class="line">    persistence_timeout 50</span><br><span class="line">    protocol TCP</span><br><span class="line">    real_server 192.168.99.104 6602 &#123;</span><br><span class="line">        weight 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="多台虚拟机安装docker-swarm-集群"><a href="#多台虚拟机安装docker-swarm-集群" class="headerlink" title="多台虚拟机安装docker swarm 集群"></a>多台虚拟机安装docker swarm 集群</h3><p>上面只是在一台虚拟机安装集群，不过实际应用上，是在多台虚拟机安装集群，<br>docker有三服务:</p><p>docker-machine：容器服务</p><p>docker-compose:脚本执行服务，简化脚本编写</p><p>docker-swarm：容器集群技术</p><h4 id="docker-swarm-去中心化的设计"><a href="#docker-swarm-去中心化的设计" class="headerlink" title="docker-swarm 去中心化的设计"></a>docker-swarm 去中心化的设计</h4><p>docker-swarm 集群节点有俩种节点：</p><p>1、manager节点管理集群的，本身承担worker节点工作，可以有多个manager节点，但同时只有一个manager节点工作，一个manager节点挂掉，会选择新的manager节点工作</p><p>2、work节点:工作节点，部署容器项目，有多个work节点</p><h4 id="创建swarm集群"><a href="#创建swarm集群" class="headerlink" title="创建swarm集群"></a>创建swarm集群</h4><p>命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init</span><br></pre></td></tr></table></figure></p><p>后面添加的参数，可加-可不加:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--listen-addr ip:port <span class="comment">#管理者节点，一个swarm必须有管理者节点，可以选择多个管理者节点ip</span></span><br><span class="line"></span><br><span class="line">--advertise-addr <span class="comment">#广播地址，其他节点通过ip加入到集群</span></span><br></pre></td></tr></table></figure></p><h4 id="加入swarm集群"><a href="#加入swarm集群" class="headerlink" title="加入swarm集群"></a>加入swarm集群</h4><p>在主机器上执行下面命令，会输出加入manager，work 命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker swarm join-token manager <span class="comment"># 以manager身份加入</span></span><br><span class="line"></span><br><span class="line">docker swarm join-token manager <span class="comment"># 以work身份加入</span></span><br></pre></td></tr></table></figure></p><p>比如:第一个命令 docker swarm join .…. 是以work身份加入集群，<br>第二个命令 docker swarm join .…. 是以manager身份加入集群，<br><img src="images/docker24.jpg" alt=""></p><h4 id="查看swarm集群节点"><a href="#查看swarm集群节点" class="headerlink" title="查看swarm集群节点"></a>查看swarm集群节点</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker node ls <span class="comment">#只能在manager节点执行</span></span><br></pre></td></tr></table></figure><h4 id="查看swarm集群网络"><a href="#查看swarm集群网络" class="headerlink" title="查看swarm集群网络"></a>查看swarm集群网络</h4><p>创建集群时，集群会生成一个共享网络，这个只是manag节点管理集群的网络，ingress<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network ls</span><br></pre></td></tr></table></figure></p><p><img src="images/docker25.jpg" alt=""></p><h4 id="创建swarm集群容器通讯共享网络"><a href="#创建swarm集群容器通讯共享网络" class="headerlink" title="创建swarm集群容器通讯共享网络"></a>创建swarm集群容器通讯共享网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create -d overlay --attachable swarm_test</span><br></pre></td></tr></table></figure><p><img src="images/docker26.jpg" alt=""></p><h4 id="创建pxc集群"><a href="#创建pxc集群" class="headerlink" title="创建pxc集群"></a>创建pxc集群</h4><p>下载安装pxc镜像<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull percona/percona-xtradb-cluster</span><br></pre></td></tr></table></figure></p><p>假如5个mysql数据库，分布安装在四台虚拟主机，俩台manager，俩台work，一台manager主机安装俩个数据库，其他每台机器安装一个数据库</p><h5 id="创建第一个pxc容器-1"><a href="#创建第一个pxc容器-1" class="headerlink" title="创建第一个pxc容器"></a>创建第一个pxc容器</h5><p>主要是设置共享网络–net=swarm_test<br><img src="images/docker27.jpg" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root -v v1:/var/lib/mysql -v backup:/data --privileged --name=node1 --net=swarm_test  pxc</span><br></pre></td></tr></table></figure><p>3306:3306:3307是宿主机端口，3306为容器mysql端口，为了在外面能访问到容器mysql，需要把端口映射到宿主机上</p><p>1、MYSQL_ROOT_PASSWORD=root：设置mysql 的root账户密码</p><p>2、CLUSTER_NAME=PXC:集群名称</p><p>3、XTRABACKUP_PASSWORD=root:mysql 之间通讯的密码</p><p>4、-v v1:/var/lib/mysql -v backup:/data :v1是docker卷,映射宿主机docker卷和容器的目录，每一个容器一个docker卷</p><p>5、–privileged:赋予容器修改宿主机目录文件的权限</p><p>6、–name=node1:容器名称</p><p>7、–net=swarm_test:共享网络ip地址</p><p>8、pxc:镜像名称</p><h5 id="创建其他pxc容器-1"><a href="#创建其他pxc容器-1" class="headerlink" title="创建其他pxc容器"></a>创建其他pxc容器</h5><p>创建其他容器和第一个容器有所不同，主要添加CLUSTER_JOIN=node1 ，意思是和node1（第一个容器）容器同步数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3307:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root  -e  CLUSTER_JOIN=node1 -v v2:/var/lib/mysql -v backup:/data --privileged --name=node2 --net=swarm_test  pxc</span><br><span class="line"></span><br><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root  -e  CLUSTER_JOIN=node1 -v v3:/var/lib/mysql -v backup:/data --privileged --name=node3 --net=swarm_test  pxc</span><br><span class="line"></span><br><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root  -e  CLUSTER_JOIN=node1 -v v4:/var/lib/mysql -v backup:/data --privileged --name=node4 --net=swarm_test  pxc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root -e CLUSTER_NAME=PXC -e XTRABACKUP_PASSWORD=root  -e  CLUSTER_JOIN=node1 -v v5:/var/lib/mysql -v backup:/data --privileged --name=node5 --net=swarm_test  pxc</span><br></pre></td></tr></table></figure><p>注意事项<br>1、3306:3306:3308，因为宿主机的不同，每台映射到宿主机的端口可以一样</p><p>2、 CLUSTER_JOIN=node1:添加关联第一台容器</p><p>3、 -v v2:/var/lib/mysql：v2是docker卷</p><p>4、–name=node2:每台容器名称都不一样</p><p>5、–net=swarm_test:共享网络ip地址</p><h5 id="查看节点容器swarm-test共享网络ip"><a href="#查看节点容器swarm-test共享网络ip" class="headerlink" title="查看节点容器swarm_test共享网络ip"></a>查看节点容器swarm_test共享网络ip</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect node1</span><br></pre></td></tr></table></figure><p>“IPAdress”:”10.0.0.2”-共享swarm_test共享网络容器ip</p><h4 id="删除集群节点"><a href="#删除集群节点" class="headerlink" title="删除集群节点"></a>删除集群节点</h4><p>1、删除虚拟机上的容器</p><p>2、退出集群</p><p>3、删除集群<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker stop</span><br></pre></td></tr></table></figure></p><h5 id="主动退出集群，"><a href="#主动退出集群，" class="headerlink" title="主动退出集群，"></a>主动退出集群，</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker swarm leave --force <span class="comment"># manager 退出集群必须使用--force 参数</span></span><br></pre></td></tr></table></figure><h5 id="被动退出集群"><a href="#被动退出集群" class="headerlink" title="被动退出集群"></a>被动退出集群</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker  node demote 9v8gylom..... <span class="comment"># manager节点先降级成work</span></span><br><span class="line"></span><br><span class="line">docker node rm 9v8gylom..... <span class="comment"># 删除节点</span></span><br><span class="line"></span><br><span class="line">docker node ls <span class="comment"># 查看当前集群有多少节点，节点情况</span></span><br></pre></td></tr></table></figure><p><img src="images/docker28.jpg" alt=""></p><h3 id="docker图形界面"><a href="#docker图形界面" class="headerlink" title="docker图形界面"></a>docker图形界面</h3><p>portainer管理集群，网络，容器</p><h4 id="下载portainer镜像"><a href="#下载portainer镜像" class="headerlink" title="下载portainer镜像"></a>下载portainer镜像</h4><p><img src="images/docker29.jpg" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull portainer/portainer</span><br></pre></td></tr></table></figure></p><h4 id="开放docker网络管理端口，所有主机都修改"><a href="#开放docker网络管理端口，所有主机都修改" class="headerlink" title="开放docker网络管理端口，所有主机都修改"></a>开放docker网络管理端口，所有主机都修改</h4><p><img src="images/docker30.jpg" alt=""><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/docker</span><br><span class="line">添加如下内容,开放2375端口</span><br><span class="line">OPTIONS=<span class="string">'-Htcp://0.0.0.0:2375 -H unix:///var/run/docker.sock'</span></span><br><span class="line">重启docker service</span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure></p><p>启动portainer 容器，所有主机都要执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 portainer/portainer -H tcp:192.168.157.196:2375</span><br></pre></td></tr></table></figure></p><p> tcp:192.168.157.196:2375：portainer安装在那台宿主机上，宿主机的ip,管理虚拟机</p><p> 访问地址端口9000，注册账号密码192.168.157.196:9000: 管理镜像、容器、网络、数据卷等<br> <img src="images/docker31.jpg" alt=""></p><h4 id="虚拟机创建"><a href="#虚拟机创建" class="headerlink" title="虚拟机创建"></a>虚拟机创建</h4><p>默认创建了192.168.157.196还要创建其他虚拟机</p><p>点击左侧菜单:Endpoints 添加其他虚拟机，点左侧上面CHANCE ENVIRONMENT,切换虚拟机<br> <img src="images/docker32.jpg" alt=""></p><h4 id="swarm创建"><a href="#swarm创建" class="headerlink" title="swarm创建"></a>swarm创建</h4><p>在portainaer无法创建swarm，具体步骤查看上面创建swarm集群，在shell里面执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker swarm init</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>查看页面左侧菜单swarm</p><p> <img src="images/docker33.jpg" alt=""></p><p>创建共享网络swarm_test</p><p> <img src="images/docker34.jpg" alt=""></p><h4 id="容器创建"><a href="#容器创建" class="headerlink" title="容器创建"></a>容器创建</h4><p>1、创建数据卷<br> <img src="images/docker37.jpg" alt=""><br>2、创建容器<br>容器界面<br> <img src="images/docker35.jpg" alt=""><br> 参数:volume:数据卷，network：网络，env:-e 参数，runtime&amp;resources：权限–privileged ，点击Deploy the container 创建容器<br> <img src="images/docker36.jpg" alt=""></p><p> 注意work节点 看不到swarm-test网络，需要在命令行执行创建</p><p> 部署方案haproxy ,keepalived<br>  <img src="images/docker39.jpg" alt=""></p><h3 id="云平台部署"><a href="#云平台部署" class="headerlink" title="云平台部署"></a>云平台部署</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>JAVA并发编程与高并发解决方案 - 高并发解决方案</title>
      <link href="/2018/06/26/concurrencyPlan/concurrency_plan/"/>
      <url>/2018/06/26/concurrencyPlan/concurrency_plan/</url>
      <content type="html"><![CDATA[<h1 id="JAVA并发编程与高并发解决方案-高并发解决方案"><a href="#JAVA并发编程与高并发解决方案-高并发解决方案" class="headerlink" title="JAVA并发编程与高并发解决方案 - 高并发解决方案"></a>JAVA并发编程与高并发解决方案 - 高并发解决方案</h1><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">作者</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">2018.06.26</td><td style="text-align:center">huangzuo</td><td style="text-align:center">首次发布</td></tr></tbody></table><h2 id="学习内容简介"><a href="#学习内容简介" class="headerlink" title="学习内容简介"></a>学习内容简介</h2><pre><code>本章节主要大概介绍了高并发环境下主要处理思路和手段，能够应对何种高并发环境使用什么样的思路和手段方法。主要思路和手段方法有下面几种:1.扩容、2.缓存、3.队列、4.拆分、5.服务降级与熔断、6.数据库切库、7.分库分表 etc.</code></pre><p><em>Jimin</em> <a href="https://www.imooc.com/t/5980627#Article" target="_blank" rel="noopener">https://www.imooc.com/t/5980627#Article</a>  手记</p><hr><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>  垂直扩容(纵向扩展):提高系统部件能力。对单个服务器，提高cpu速度或者增加内存、存储空间等。但单个服务器扩容能力是有限</p><p>  水平扩容(横向扩容)：增加服务器</p><hr><h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>服务器和数据库的资源是有限的，如何使用有限的资源支持更多的吞吐量，一个有效的方法是使用缓存，下面四个环节都可以使用缓存中的数据，从而减少对服务器的访问和计算量，提高并发量</p><p>用户通过浏览器访问网站，主要路径有:下面图四个节点，每个节点都有缓存，这里只是描述服务端和数据库的缓存<br><img src="images/19.jpg" alt=""></p><h4 id="缓存特征"><a href="#缓存特征" class="headerlink" title="缓存特征"></a>缓存特征</h4><p>缓存数据是从数据库中取的部分数据，缓存中的数据是有限，并有时间等限制，还要保持缓存中的数据和数据库中数据的一致性，所以不得不关注缓存中的一些特征</p><p>1、命中数:在缓存中能查到数据，不用到数据库查找</p><p>2、没有命中数:在缓存中查不到到数据，要到数据库查找，可能是因为缓存中根本不存在或者过期等</p><p>3、命中率:命中数/(命中数+没有命中数)</p><p>  命中率越高表示使用缓存的收益越高， 应用性能越好，响应的时间越短，吞吐量会变得越高，抗并发的能力也越强，在高并发的互联网环境中，缓存命中率至关重要</p><p>4、最大元素(空间):代表着缓存可以存放最大元素的数量，一旦缓存中元素数量超过这个值，缓存中的数据超过了支持最大的空间，将会触发缓存清空策略，根据不同的场景设置合理的最大值，能提高缓存命中率</p><p>当最大空间值用满，如何保证在稳定服务同时，提高命中率</p><p>5、清空策略</p><pre><code>FIFO:先进先出,在缓存最大空间值用满，根据创建时间，最先创建的缓存，会被清出去，在数据保持实时性环境下可以使用LFU:最少使用策略，无论是否过期，根据最少用次数的数据被清空，在高频数据场景下使用LRU:最近最少策略，无论是否过期，最近时间，最少用的被清空，在热点的时间环境下使用，保存热点的缓存过期时间：设置过期时间清空策略随机：随机策略etc</code></pre><p>一般缓存清空策略使用LRU</p><h4 id="缓存命中率影响因素"><a href="#缓存命中率影响因素" class="headerlink" title="缓存命中率影响因素"></a>缓存命中率影响因素</h4><pre><code>1、业务场景和业务需求：写少读多业务场景，实时性要求越低，越适合缓存，缓存时间越长，命中率越高，互联网大多数应用都适合缓存2、缓存的设计(粒度和策略):粒度越小缓存命中率越高，粒度:数据类型-单个对象或者集合，缓存单个对象命中率比集合高，缓存的更新策略影响命中率，当数据发生变化时，直接更新数据比移徐和让缓存过期命中率更高，系统复杂度会变得更高3、缓存容量和基础设施:缓存容量越高，命中率越高，分布式缓存比单个应用内置缓存命中率高，考虑系统容量规划、是否扩展，不同中间件和框架效率和稳定性存在差异4、当缓存发生故障时，需要避免缓存失效，并最大程度降低影响，通过一致性hash算法或者节点冗余提高高可用避免这个问题4、并发越高，缓存的命中率就越高</code></pre><h4 id="提高缓存命中率"><a href="#提高缓存命中率" class="headerlink" title="提高缓存命中率"></a>提高缓存命中率</h4><p>  从架构师的角度，应用尽可能通过缓存获取数据，并避免缓存失效，需要从业务需求，缓存粒度，缓存策略，技术选型各个方面综合考虑权衡。尽可能高频访问，时效要求不高的热点任务</p><h4 id="缓存分类和应用场景"><a href="#缓存分类和应用场景" class="headerlink" title="缓存分类和应用场景"></a>缓存分类和应用场景</h4><pre><code>本地缓存:应用中的缓存组件，编程实现(成员变量，局部变量，静态变量) Guava Cache      优点：应用和cache在同一个进程内部，请求缓存非常快速，没有过多的网络开销，在单应用中不需要集群支持下、无需互相通知情况下，使用本地缓存比较合适      缺点：多个应用无法共享缓存，各节点都需要维护单独的缓存，对内存是一种浪费分布式缓存：Memcache 、redis</code></pre><h4 id="高并发场景下缓存常见的问题"><a href="#高并发场景下缓存常见的问题" class="headerlink" title="高并发场景下缓存常见的问题"></a>高并发场景下缓存常见的问题</h4><h5 id="缓存一致性"><a href="#缓存一致性" class="headerlink" title="缓存一致性"></a>缓存一致性</h5><p>   当数据时效很高的场景下，需要保证缓存中的数据和数据库的数据一致性、缓存节点和副本保持一致性，不能出现差异现象，比较依赖缓存的过期和更新策略，数据库数据发生更改主动更新缓存中的数，或者移徐对应的缓存，这时候可能出现缓存问题<br><img src="images/24.png" alt=""></p><h5 id="缓存并发问题"><a href="#缓存并发问题" class="headerlink" title="缓存并发问题"></a>缓存并发问题</h5><p>缓存过期后，将尝试从后台数据库获取数据，在高并发场景下有可能多个请求并发去从数据库获取数据，对数据库造成极大的冲击，甚至导致雪崩的现象。当缓存某个key在被更新时，同时也可能大量被获取，导致数据一致性</p><p>解决方式:锁的机制，在缓存更新或过期的场景下，先尝试获取锁，获取数据库的数据，其他的请求只需要等待一点时间<br><img src="images/25.png" alt=""></p><h5 id="缓存穿透-击穿-问题"><a href="#缓存穿透-击穿-问题" class="headerlink" title="缓存穿透(击穿)问题"></a>缓存穿透(击穿)问题</h5><p>在高并发场景下，如果缓存中的某个key，被高并发的访问，没有命中，出于对容错性考虑，会尝试从后端数据库获取数据，导致大量的请求到达数据库，而当该key对应的数据为空的情况下，导致数据库产生很多不必要的查询操作，从而导致了巨大的冲击和压力</p><p>避免这种情况:</p><pre><code>1、缓存空对象、或者空集合，避免请求穿透到后台，同时也要保持时效性，这个适合命中率不高，但可能被频繁访问的数据2、单独过滤处理，对所有可能对应数据为空的key进行统一的存放，在请求前统一拦截，这样避免请求穿透到后台数据库，比较适合命中率不高，但是更新不频繁的数据</code></pre><p><img src="images/26.png" alt=""></p><h5 id="缓存的雪崩现象"><a href="#缓存的雪崩现象" class="headerlink" title="缓存的雪崩现象"></a>缓存的雪崩现象</h5><p>缓存颠簸问题：比雪崩更轻微的故障，但是在一段时间内，对系统也会造成冲击和性能影响，一般由于缓存节点故障导致，解决方法：通过一致性hash算法</p><p>缓存雪崩现象:由于缓存原因，导致大量请求到达后台数据库，从而导致数据库发生崩溃、系统发生崩溃</p><p>原因：缓存并发、缓存穿透、恶意攻击等。某个时间点内，系统预加载的缓存，周期性集中失效也有可能导致雪崩</p><p>解决方式:要设置不同的缓存过期时间，避免缓存集中失效。通过限流，降级，熔断等手段降低影响，通过多级缓存避免这种雪崩灾难，多加强压力测试，尽早发现问题</p><p><img src="images/27.png" alt=""></p><hr><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><p>高并发之消息队列，企业IT系统内部通讯手段<br><img src="images/plan2.jpg" alt=""></p><p>短信发送场景：开始发送短信请求流程A-发送消息A1到队列-消息A1被处理-反馈消息A1处理结果到数据库。消息队列中可以设置发送短信速度和发送失败重发机制等,</p><p>好处:</p><pre><code>* 异步解耦，短信发送过程不需要关注，直接执行发送短信之后的事情* 保持最终一致性，保证最终发送给用户，只是不是那么及时* 假如发送完成短信还要发送邮件。有消息队列,不需要同步等待，直接并行处理，让核心流程更快结束,增强业务系统异步处理能力，减少甚至机乎不可能出现的并发现象</code></pre><p><img src="images/plan1.jpg" alt=""></p><h4 id="消息队列的特性"><a href="#消息队列的特性" class="headerlink" title="消息队列的特性"></a>消息队列的特性</h4><ul><li><p>业务无关：不需要考虑上层业务模型，只做消息分发，上层不同业务模块反而要依赖消息队列定义的规范进行通信</p></li><li><p>FIFO:先投递先到达</p></li><li><p>容灾：节点的动态增删和消息的持久化</p></li><li><p>性能方面：吞吐量提升，系统内部通讯效率提高</p></li></ul><h4 id="为什么需要消息队列"><a href="#为什么需要消息队列" class="headerlink" title="为什么需要消息队列"></a>为什么需要消息队列</h4><ul><li>生成和消费的速度或稳定性等因素不一致。例如:业务系统触发发送短信的申请，但是短信发送模块速度跟不上，需要将来不及处理的消息暂存在队列里面，缓存压力，，消息发送模块就可以慢慢从消息队列里获取消息进行处理</li></ul><h4 id="消息队列的好处"><a href="#消息队列的好处" class="headerlink" title="消息队列的好处"></a>消息队列的好处</h4><ul><li><p>业务解耦：最本质问题，一个事物只关心核心流程，需要依赖其他系统但不是那么重要事情，有通知即可，不需要等待结果。基于消息模型关心通知，不是处理</p></li><li><p>最终一致性：俩个系统状态保持最终一致性，要么成功，要么失败，一定的延迟达到最终一致性。成功、失败、不确定</p></li><li><p>广播:只关心把消息发送到队列，每当有新的业务方接入，只需要接入到队列，不需要重新调试，接入方自己处理即可</p></li><li><p>错峰与流控: 转储俩个系统之间通讯的内容，等下游系统有能力处理这些消息，再处理消息，比如:大量用户访问网站请求，数据库一时处理不来那么多请求，可先把数据缓存在消息队列</p></li></ul><h4 id="消息队列场景"><a href="#消息队列场景" class="headerlink" title="消息队列场景"></a>消息队列场景</h4><ul><li><p>消息队列不是万能的，对于需要强事物保证、而且延迟很敏感的，RPC远程调用优于消息队列</p></li><li><p>对于一些无关痛痒，对于别人很重要，对自己不是那么关心的事情，可以使用消息队列</p></li><li><p>支持最终一致性的消息队列能够用来处理延迟不那么敏感的分布式事物场景</p></li><li><p>上下游系统处理能力存在差距的时候，利用消息队列做通用的漏斗，在下游有能力处理的时候，再进行分发，同时如果下游有很多系统关心上游发出的消息,使用消息队列的广播</p></li></ul><h4 id="队列-kafka"><a href="#队列-kafka" class="headerlink" title="队列-kafka"></a>队列-kafka</h4><p><img src="images/28.png" alt="kafka"><br>kafka：高性能、跨语言、分布式发布订阅消息队列系统</p><p>特性:</p><ul><li>快速持久化</li><li>高吞吐</li><li>分布式</li></ul><p>定义</p><pre><code>broker：集群上一个或者多个服务器，服务器称为brokertopic:每条发布到kafka集群消息都有一个类别，这个类别就是topic，物理上不同topic消息是分开存储，一个topic逻辑上保存在一个或多个broker上，但用户只需指定topic就可以生产消费数据，不关心数据存储在那里partition:物理上的概念，每一个topic包含一个或者多个partitionproducer:负责向kafka集群发送消息comsumer:负责消费kafka集群的消息comsumer-group:多个comsumer属于一个comsumer-group</code></pre><p>流程：producer 根据partition算法，将消息发布到指定的partition上面，kafka集群接受到producer发过来的消息之后，将消息持久化到硬盘，并保留消息指定时长，producer不关心消息是否消费，comsumer从kafka集群获取数据，并控制消息的offset(0,1,2) ，comsumer每消费一个消息offset加一，comsumer能控制offset，消息的状态是由comsumer控制，comsumer可以跟踪、重设offset值,comsumer可以任意读取不同offset位置的值</p><h4 id="队列-RabbitMQ"><a href="#队列-RabbitMQ" class="headerlink" title="队列-RabbitMQ"></a>队列-RabbitMQ</h4><p><img src="images/plan3.jpg" alt="RabbitMQ"><br>定义</p><pre><code>l、Exchange:消息先发到Exchange，处理完决定怎样，发送到Queue，Exchange和Queue是多对多关系2、Client(producer)发送消息到Exchange3、Queue:消息队列，Exchange发送消息到Queue4、Client(cosumer)从Queue消费消息</code></pre><hr><h3 id="应用拆分"><a href="#应用拆分" class="headerlink" title="应用拆分"></a>应用拆分</h3><p>单个服务器再优化，处理能力是有上限的，将一个应用拆分成多个系统应用，多部署几台服务器</p><p>比如股票系统：用户信息、开户、股票、行情、交易、订单…用户不同时间段访问的功能频率差别很大，拆分如下几个系统-交易中心、账户中心、用户中心、行情中心、通知中心</p><p><img src="images/plan4.jpg" alt="应用拆分"></p><h4 id="应用拆分基本原则"><a href="#应用拆分基本原则" class="headerlink" title="应用拆分基本原则"></a>应用拆分基本原则</h4><pre><code>业务优先:每个系统都会安装业务分成多个模块，每个模块有包含多个业务相关的功能，在系统拆分时，优先考虑按照业务边界拆分循序渐进:边拆分边测试兼顾技术：重构、分层可靠测试</code></pre><h4 id="应用拆分思考"><a href="#应用拆分思考" class="headerlink" title="应用拆分思考"></a>应用拆分思考</h4><pre><code>1、应用之间的通信:RPC（dubbo等）、消息队列、restful2、应用之间数据库设计:每个应用都有独立的数据库，共同的数据可以放到common数据库中3、避免事务操作跨应用，分布式事务消耗资源，尽量避免事务操作，降低应用之间的耦合度，应用之间要互不影响</code></pre><h4 id="应用拆分组件"><a href="#应用拆分组件" class="headerlink" title="应用拆分组件"></a>应用拆分组件</h4><h5 id="服务化Dubbo"><a href="#服务化Dubbo" class="headerlink" title="服务化Dubbo"></a>服务化Dubbo</h5><p><img src="images/29.png" alt="Dubbo"></p><pre><code>流程:1、初始化:provider-start启动，通过register向registry注册服务(zookeeper)，consumer -subscribe向registry中心订阅服务，不断尝试订阅直到订阅到服务，provider对于consumer是透明的，consumer多次请求相同的服务，可能由不同的provider提供,实现了软负载2、producer 注册了新的服务，通过notify通知到consumer3、monitor:通过异步监控，可选，需要单独配置，不影响服务调用4、consumer通过invoke调用producer接口</code></pre><h5 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h5><p><img src="images/plan5.jpg" alt="微服务"></p><pre><code>微服务是架构概念，将功能分解在各个离散的服务中，以实现对解决方案的解耦，并提供更加灵活服务支持，微服务把一个大型单个应用程序和服务拆分成数个甚至数十个支持的微服务，可扩展单个组件，而不是整个应用程序堆栈从而满足服务等级协议，微服务是围绕业务领域组件创建应用，这些应用可以独立开发、管理、迭代，在分摊的组件中使用云架构和平台部署和管理服务，使产品交付变得更加简单，微服务使用功能比较明确、业务比较精炼的服务解决更大更实际的问题</code></pre><p><img src="images/30.png" alt="微服务"></p><pre><code>微服务:独立的服务共同组成整个系统，每个服务单独部署，每个服务跑在自己的进程中，每个服务为独立业务开发，分布式管理，非常强调隔离性</code></pre><h5 id="微服务标准"><a href="#微服务标准" class="headerlink" title="微服务标准"></a>微服务标准</h5><pre><code>1、分布式服务组成的系统2、按照业务而不是技术划分组织3、有生命的产品而不是项目4、强服务个体，弱通信5、自动化运维6、高度容错7、可以快速演化、迭代</code></pre><h5 id="微服务要解决的问题"><a href="#微服务要解决的问题" class="headerlink" title="微服务要解决的问题"></a>微服务要解决的问题</h5><pre><code>1、客户端如何访问不同的服务？按功能拆分成独立服务，跑在独立的虚拟机上，是独立的java进程，客户端如何去访问，后台n多个服务?API Gateway 代理统一提供服务入口,让微服务对前台透明，同时可以聚合后台服务，提供安全、过滤、流控api等管理功能2、每个服务之间如何通信？  异步:消息队列(kafka)  同步:一致性强，容易出现一些调用问题，特别是调用层次多的时候，有俩种同步方法：RPC、rest  RPC-比如dubbo，传输协议更高效，安全更可控，特别在一个公司内部，如果有统一的开发规范和统一的服务框架，开发效率就会更加明显  rest-比如spring boot,一般rest基于http更容易实现也更容易被接受，服务端实现技术也更灵活些，各个语言也能支持，同时能跨客户端，对客户端没有特殊要求，主要封装了http的apk就能调用，所以使用相对广些3、如此多的服务如何实现？在微服务架构中，一般每个服务都是有多个拷贝作为负载均衡，一个服务可能随时下线，也可能应对临时增加访问的压力，临时增加新的服务节点，服务之间如何感知，如何管理，这是服务发现的问题，基本上是通过zookeeper等类似技术做注册等信息分布式管理，服务上线时，将自己的信息注册到zookeeper上，通过心跳维持常连接，实时更新那些信息，服务调用者通过zookeeper寻址，根据定制的算法，找到服务，还可以将服务的信息缓存在本地，提高性能，当服务发现时，zookeeper会通知服务客户端4、服务挂了，怎么办？分布式网络是不可靠的，通过微服务拆分能降低风险，不过没有特别的保证，结局是很惨，相关手段:重试机制、应用的限流、熔断机制、负载均衡、系统降级等</code></pre><hr><h3 id="应用限流"><a href="#应用限流" class="headerlink" title="应用限流"></a>应用限流</h3><p><img src="images/31.png" alt="应用限流"><br>限制一段时间内的应用流量，控制某段时间内某段代码被执行的次数</p><p>比如某段时间突然有130w~140w 的数据插入到数据库导致的后果</p><pre><code>1、网络的开销，很可能直接把带宽打满，导致其他请求无法正常传输和处理2、数据库负载突然增高，导致无法处理某些数据库操作，也可能出现没有足够的连接，导致某些数据插入失败或者查询失败3、数据库做了主从设计，插入到主库的数据还要同步到从库数据，这时瞬间插入大量的数据，会导致主库和从库延迟特别大，这时通过从库查询到的数据不准确的概率也会跟着提升</code></pre><p>通过特殊的手段限流放慢插入数据库的手段，会怎么样？？<br>比如：以恒定的速率，每秒400条速率插入主库，正常同步</p><h4 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h4><pre><code>1、限制总并发数2、限制瞬时的并发数3、限制时间窗口内的平均速率etc</code></pre><h4 id="限流的算法"><a href="#限流的算法" class="headerlink" title="限流的算法:"></a>限流的算法:</h4><ul><li>计算器法<br>对应A接口，每一分钟访问的次数不能超过100次</li></ul><p><img src="images/32.png" alt="应用限流"></p><p>问题:只是限制0~1、1~2访问100次，出现了边界问题，比如0:59~1:01之间次数出现可能超过100次</p><p><img src="images/plan6.jpg" alt="限流"></p><ul><li><p>滑动窗口法</p><p>滑动窗口法是计算器法进化，0~1分为小6格，每格10秒钟，每过完一格，0~1向前滑动一小格，每次都会计算当前格和已经执行的5格次数总数是否超过100次，一直在向前面滑动。当前的10秒钟的访问的次数和已经访问的50秒钟的访问的次数加起来不能超过100次<br><img src="images/33.png" alt="应用限流"></p></li><li><p>漏桶算法<br><img src="images/34.png" alt="应用限流"><br>无法预计桶留进来的水有多少，也不法预计留进来的水速度有多快，但是可以控制流出去的水的速率，桶满以后多余的水会溢出去，漏桶算法限制了请求的速度，使用漏桶算法，可以保证接口会以一个恒定的速率来处理请求</p></li><li><p>令牌桶算法<br><img src="images/35.png" alt="应用限流"></p></li></ul><p>固定容量的桶，桶里面放着令牌，桶一开始是空的，令牌以一定的速率往桶里面填充，知道达到桶的容量，多余的令牌会被丢弃掉，当一个请求过来，会从桶里面移除一个令牌，如果没有令牌请求无法通过，有令牌请求就可以继续执行。允许流量的突发，下次突发，需要填充满桶</p><hr><h3 id="服务降级与熔断"><a href="#服务降级与熔断" class="headerlink" title="服务降级与熔断"></a>服务降级与熔断</h3><h4 id="服务降级"><a href="#服务降级" class="headerlink" title="服务降级"></a>服务降级</h4><pre><code>比如:12306抢票，在抢票高峰的时候，明明票还有，但是查询出来的列表确是空的，等高峰过后，再来查询列表恢复正常。高峰查询过程中出现的问题，要么超时、要么网络问题导致查询失败，这里很可能采用了服务降级处理，呈现给用户的并不是系统内部出错提示而是空的列表服务降级含义:当服务器压力巨增的时候，根据当前业务情况及流量，对一些服务、页面有策略的降级，以处缓解服务器资源的压力，以保障核心任务正常运行，同时也保障了部分甚至大部分客户得到正确的响应。服务降级技术上来说是：如果当前请求处理不了或者出错，给一个默认的返回。整体资源不够了，忍痛将某些服务关闭，等度过高峰期再开启</code></pre><p>服务降级分类</p><ul><li><p>自动降级:超时、失败数次、故障、限流</p><pre><code>超时:配置好超时时间和超时重制次数机制，并使用异步机制探测恢复情况失败次数：一些不稳定的API，当失败调用的次数达到一定的值之后，自动降级，同样使用异步机制探测恢复情况故障:比如远程服务挂掉了，可能是网络故障、DNS故障、http服务返回错误状态码，RPC返回抛出异常等，这时服务直接降级限流：当访问量达到限制点的时候，后续访问会被降级，返回的信息可以是,排队页面\无货、错误页等等</code></pre></li></ul><ul><li><p>人工降级:秒杀、双11大促等</p><pre><code>手动设置，将某些服务降级，以保障在某段时间内系统核心服务的正常运行，通常在代码里面做开关控制</code></pre></li></ul><p>服务降级的处理方案:</p><pre><code>默认值：比如库存服务挂了，返回默认现货兜底数据：广告挂了，返回提前准备的静态页面缓存:一般使用之前暂时缓存的数据</code></pre><h4 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h4><pre><code>软件系统由于某些原因，使得服务出现过载的现象，为了防止造成整个系统故障，从而采用一种保护策施，可称为过载保护   </code></pre><h4 id="服务降级和服务熔断"><a href="#服务降级和服务熔断" class="headerlink" title="服务降级和服务熔断"></a>服务降级和服务熔断</h4><p>共性:目的、最终表现、粒度、自治</p><p>区别:</p><pre><code>触发原因:服务熔断-指某个服务特别是下游服务发生故障引起的。服务降级-整体负荷考虑的管理目标层次:熔断-框架级别的处理，每个微服务都需要，降级-需要对业务有层级之分，都是从最外围开始的实现方式:服务熔断是服务降级的一种实现</code></pre><h4 id="服务降级要考虑的问题"><a href="#服务降级要考虑的问题" class="headerlink" title="服务降级要考虑的问题"></a>服务降级要考虑的问题</h4><ul><li><p>那些服务是核心服务，那些服务是非核心服务</p></li><li><p>那些服务是否支持降级、降级策略</p></li><li><p>业务放通场景、策略</p></li></ul><h4 id="Hystric-类帮助服务降级、熔断"><a href="#Hystric-类帮助服务降级、熔断" class="headerlink" title="Hystric 类帮助服务降级、熔断"></a>Hystric 类帮助服务降级、熔断</h4><ul><li><p>提供失败回退(Fallback)和优雅的服务降级机制</p></li><li><p>提供近实时的监控、报警和运维控制手段</p></li></ul><p><img src="images/plan7.jpg" alt="应用限流"></p><p> 在分布式系统中，外部用户发起请求访问服务器，服务依赖第三方资源，由于第三方发生故障，导致请求发生问题，我们避免不了导致调用第三方失败的原因，但我们尽可能避免调用第三方依赖失败造成的影响，提前做好应急措施，遇到问题可以及时启动应急预案，让系统自我调节。如果不能及时有效隔离有问题第三方依赖，因为这个单点故障而阻塞，产生雪崩的效益，整个应用服务器将不能正常对外提供服务</p><hr><h3 id="数据库切库、分库、分表"><a href="#数据库切库、分库、分表" class="headerlink" title="数据库切库、分库、分表"></a>数据库切库、分库、分表</h3><p>数据库瓶颈</p><pre><code>1、单个库数据量太大(1T~2T)：多个库2、单个数据库服务器压力过大、读写速度瓶颈：多个库、读写分离3、单个表数据量过大：分表，大表拆分多个小表</code></pre><h4 id="数据库切库"><a href="#数据库切库" class="headerlink" title="数据库切库"></a>数据库切库</h4><pre><code>大多数采用读写分离技术，一个主库多个从库，主库负责数据更新、实时查询，从库负责非实时数据查询，实际数据库都是读多、写少，读取数据通常耗时比较长，占用CPU比较多,多个从库采取负载均衡，有效减轻主库的压力，把数据分发到从库可保持系统的健壮性</code></pre><h5 id="如何方便使读写分离"><a href="#如何方便使读写分离" class="headerlink" title="如何方便使读写分离"></a>如何方便使读写分离</h5><p>直接定义多个数据库连接</p><pre><code>1、动态数据源切换-切库，在程序运行时，把数据源植入到程序中，让指定的程序选择连接主库还是从库操作，主要技术：spring aop 、注解等2、自定义注解完成数据库切库-代码实现，网址 https://www.imooc.com/article/22556</code></pre><h5 id="数据库支持多个数据源与分库"><a href="#数据库支持多个数据源与分库" class="headerlink" title="数据库支持多个数据源与分库"></a>数据库支持多个数据源与分库</h5><p>共同点:底层多个数据库提供服务</p><p>不同点：</p><pre><code>分库：在应用拆分时，每个应用对应一个数据库多个数据源:一个应用对应多个数据库</code></pre><p>多个数据源的轻松支持手记:<a href="https://www.imooc.com/article/22609" target="_blank" rel="noopener">https://www.imooc.com/article/22609</a></p><hr><h3 id="数据库分表"><a href="#数据库分表" class="headerlink" title="数据库分表"></a>数据库分表</h3><p>什么时候考虑分表：当一个表数据量很大，大到我们做了sql优化、索引，基本的操作速度慢到影响使用，要预先考虑分表</p><p>分表好处:</p><pre><code>1、分表后，单表的并发能力提高了，磁盘IO性能也提高了，写操作效率也会跟着提高2、查询一次时间变短，数据发布在不同文件，磁盘IO性能会跟着提高，同时读写锁影响的数据量变少，，插入数据库数据需要重新建立的索引的数据变少</code></pre><h4 id="分表策略"><a href="#分表策略" class="headerlink" title="分表策略"></a>分表策略</h4><p> 横向(水平)分表与纵向（垂直）分表</p><ul><li><p>横向(水平)分表</p><p>  把大的表结构横向切割为同样结构的不同的表，表结构是完成一样根据某些规则划分表的数据，比如根据id\表数量 取模把数据平均划分到不同的表上</p></li></ul><ul><li><p>纵向（垂直）分表</p><pre><code>将本来可以在一张表的内容，人为划分为多个不同的表，通常根据数据的活跃度进行分离，因为不同活跃的数据，处理方式是不同的</code></pre></li></ul><h4 id="数据库分表-mybatis-分表插件-shardbatis2-0-手记"><a href="#数据库分表-mybatis-分表插件-shardbatis2-0-手记" class="headerlink" title="数据库分表:mybatis 分表插件 shardbatis2.0-手记"></a>数据库分表:mybatis 分表插件 shardbatis2.0-手记</h4><h3 id="高可用一些手段"><a href="#高可用一些手段" class="headerlink" title="高可用一些手段"></a>高可用一些手段</h3><ul><li><p>任务调度系统分布式：elastic-job+zookeeper,无中心化的分布式定时调度框架，基于数据库高可用方案，数据库没有分布式协调功能</p></li><li><p>主备切换：apache curator+zookeeper 分布式锁实现</p></li><li><p>监控报警机制-看手记</p></li></ul>]]></content>
      
      
    </entry>
    
    <entry>
      <title>JAVA并发编程与高并发解决方案 - 并发编程 六</title>
      <link href="/2018/06/21/concurrency/concurrency-6/"/>
      <url>/2018/06/21/concurrency/concurrency-6/</url>
      <content type="html"><![CDATA[<h1 id="JAVA并发编程与高并发解决方案-并发编程-六"><a href="#JAVA并发编程与高并发解决方案-并发编程-六" class="headerlink" title="JAVA并发编程与高并发解决方案 - 并发编程 六"></a>JAVA并发编程与高并发解决方案 - 并发编程 六</h1><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">作者</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">2018.5.8</td><td style="text-align:center">huangz</td><td style="text-align:center">线程池</td></tr></tbody></table><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>&emsp;&emsp;在前面使用的例子用，我们已经使用过线程池，基本上就是初始化线程池实例之后，把任务丢进去，等待调度执行就可以了，使用起来非常简单、方便。虽然使用很简单，但线程池涉及到的知识点非常多。需要分析其实现。  </p><p>&emsp;&emsp;JAVA中<code>Thread</code>这个类是线程类，在JAVA基础时，对于线程的认识是基于此类，为什么不使用<code>Thread</code>直接执行线程例子呢，而要使用线程池？可以试想，当并发数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。而线程池可以达到这样的效果：线程可以复用，就是执行完一个任务，并不被销毁，而是可以继续执行其他的任务。  </p><p><strong>Thread的弊端：</strong></p><ol><li>每次 <code>new Thread()</code> 新建对象，性能差；  </li><li>线程缺乏统一管理，可能无限制的新建线程，相互竞争，有可能占用过多系统资源导致死机或OOM；  </li><li>缺少更多的功能，如更多执行、定期执行、线程中断；  </li></ol><p><strong>线程池的好处</strong></p><ol><li>重用存在的线程，减少对象创建、消亡的开销，性能佳，降低资源消耗；  </li><li>可有效控制最大并发线程数，提高系统资源利用率，同时可以避免过多资源竞争，避免阻塞，提高响应速度；</li><li>提供定时执行、定期执行、单线程、并发数控制等功能，以达到提高线程的可管理性。  </li></ol><p>&emsp;&emsp;阿里发布的 Java 开发手册中强制线程池不允许使用 <code>Executors</code> 去创建，而是通过 <code>ThreadPoolExecutor</code> 的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。<br>&emsp;&emsp; <code>Executors</code>利用工厂模式向我们提供了4种线程池实现方式，但是并不推荐使用，原因是使用<code>Executors</code>创建线程池不会传入相关参数而使用默认值所以我们常常忽略了那些重要的参数（线程池大小、缓冲队列的类型等），而且默认使用的参数会导致资源浪费，不可取。</p><h4 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h4><h5 id="Constructor-And-Parameters"><a href="#Constructor-And-Parameters" class="headerlink" title="Constructor And Parameters"></a>Constructor And Parameters</h5><p>&emsp;&emsp; <code>java.uitl.concurrent.ThreadPoolExecutor</code> 类是线程池中最核心的一个类，因此如果要透彻地了解Java中的线程池，必须先了解这个类，因此我们直接上源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 构造函数 1 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue)</span> </span>&#123;&#125;</span><br><span class="line">                              </span><br><span class="line">    <span class="comment">/** 构造函数 2 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory)</span> </span>&#123;&#125;</span><br><span class="line">                              </span><br><span class="line">    <span class="comment">/** 构造函数 3 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;&#125;</span><br><span class="line">                              </span><br><span class="line">    <span class="comment">/** 构造函数 4 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="function"><span class="params">                              ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="function"><span class="params">                              RejectedExecutionHandler handler)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp; <code>ThreadPoolExecutor</code> 类继承结构是： <code>Executor(I) &lt;- ExecutorService(I) &lt;- AbstractExecutorService(C) &lt;- TreadPoolExecutor</code>  </p><p>&emsp;&emsp; <code>ThreadPoolExecutor</code>类中提供了四个构造方法，在构造函数4中，参数最多，通过观察其他3个构造函数，发现前面三个构造器都是调用的第四个构造器进行的初始化工作。</p><p>&emsp;&emsp;构造器中各个参数的含义：</p><ul><li><p><strong>corePoolSize</strong>： 核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了预创建线程的方法，即在没有任务到来之前就创建 corePoolSize 个线程或者 一个线程：</p><ul><li><code>prestartCoreThread()</code> :  预创建一个核心线程，使其闲置等待工作。</li><li><code>prestartAllCoreThreads()</code> : 启动所有核心线程，导致它们空闲地等待工作。</li></ul><p>默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中；  </p></li><li><p><strong>maximumPoolSize</strong>：线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；  </p></li><li><p><strong>keepAliveTime</strong>：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于<code>corePoolSize</code>时，<code>keepAliveTime</code>才会起作用，直到线程池中的线程数不大于<code>corePoolSiz</code>e，即当线程池中的线程数大于<code>corePoolSize</code>时，如果一个线程空闲的时间达到<code>keepAliveTime</code>，则会终止，直到线程池中的线程数不超过<code>corePoolSize</code>。但是如果调用了<code>allowCoreThreadTimeOut(boolean)</code>方法，在线程池中的线程数不大于<code>corePoolSize</code>时，<code>keepAliveTime</code>参数也会起作用，直到线程池中的线程数为0；  </p></li><li><p><strong>unit</strong>：参数<code>keepAliveTime</code>的时间单位，有7种取值，在<code>TimeUnit</code>类中有7种静态属性：  </p><ul><li><code>TimeUnit.DAYS</code> : 以 天 为单位 ；  </li><li><code>TimeUnit.HOURS</code> : 以 小时 为单位 ；  </li><li><code>TimeUnit.MINUTES</code> : 以 分钟 为单位 ；  </li><li><code>TimeUnit.SECONDS</code> : 以 秒 为单位 ；   </li><li><code>TimeUnit.MILLISECONDS</code> : 以 毫秒 为单位 ；   </li><li><code>TimeUnit.MICROSECONDS</code> : 以 微秒 为单位 ；   </li><li><code>TimeUnit.NANOSECONDS</code> : 以 纳秒 为单位 ；   </li></ul></li><li><p><strong>workQueue</strong>： 一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：  </p><ul><li><code>ArrayBlockingQueue</code>：基于数组的先进先出队列，此队列创建时必须指定大小；  </li><li><code>LinkedBlockingQueue</code>：基于链表的先进先出队列，如果创建时没有指定此队列大小，则默认为Integer.MAX_VALUE；</li><li><code>SynchronousQueue</code> ：这个队列比较特殊，它不会保存提交的任务，而是将直接新建一个线程来执行新来的任务。</li></ul><p>一般使用<code>LinkedBlockingQueue</code>和<code>SynchronousQueue</code>  </p></li><li><p><strong>threadFactory</strong>：线程工厂，主要用来创建线程。 线程池最主要的一项工作，就是在满足某些条件的情况下创建线程。而在<code>ThreadPoolExecutor</code>线程池中，创建线程的工作交给<code>ThreadFactory</code>来完成。要使用线程池，就必须要指定<code>ThreadFactory</code>。 如果我们使用的构造函数时并没有指定使用的<code>ThreadFactory</code>，这个时候<code>ThreadPoolExecutor</code>会使用一个默认的<code>ThreadFactory：DefaultThreadFactory</code>（这个类在Executors工具类中）;</p></li><li><p><strong>handler</strong>：在<code>ThreadPoolExecutor</code>线程池中还有一个重要的接口：<code>RejectedExecutionHandler</code>。当提交给线程池的某一个新任务无法直接被线程池中“核心线程”直接处理，又无法加入等待队列，也无法创建新的线程执行；又或者线程池已经调用<code>shutdown()</code>方法停止了工作；又或者线程池不是处于正常的工作状态；这时候<code>ThreadPoolExecutor</code>线程池会拒绝处理这个任务，触发创建<code>ThreadPoolExecutor</code>线程池时定义的<code>RejectedExecutionHandler</code>接口的实现，</p><p>表示当拒绝处理任务时的策略，有以下四种取值，四种值都为其静态内部类：</p><ul><li><code>ThreadPoolExecutor.AbortPolicy</code>：丢弃任务并抛出<code>RejectedExecutionException</code>异常。  </li><li><code>ThreadPoolExecutor.DiscardPolicy</code>：也是丢弃任务，但是不抛出异常。 </li><li><code>ThreadPoolExecutor.DiscardOldestPolicy</code>：丢弃队列最前面的任务，然后重新尝试执行新提交的任务。</li></ul></li></ul><h5 id="Operating-principle"><a href="#Operating-principle" class="headerlink" title="Operating principle"></a>Operating principle</h5><p>&emsp;&emsp;介绍完上面的构造函数以及其参数之后，介绍一下<code>ThreadPoolExecutor</code>的运行原理，在网上浏览到一篇相关文章，因此将它直接引用过来</p><blockquote><p><a href="https://blog.csdn.net/u010723709/article/details/50372322" target="_blank" rel="noopener">深入理解java线程池—ThreadPoolExecutor</a>，以下内容引用此文章，并且增加了自己的一点理解</p></blockquote><h6 id="ThreadPoolExecutor-execute"><a href="#ThreadPoolExecutor-execute" class="headerlink" title="ThreadPoolExecutor.execute()"></a>ThreadPoolExecutor.execute()</h6><p>&emsp;&emsp; 向线程池中提交一个不需要返回结果的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//任务为null,则抛出异常  </span></span><br><span class="line">        <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="comment">//取出记录着runState和workerCount 的 ctl的当前值  </span></span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1.第一步：</span></span><br><span class="line"><span class="comment">         * 通过workerCountOf方法从ctl所表示的int值中提取出低29位的值,也就是当前活动的线程数。</span></span><br><span class="line"><span class="comment">         * 如果当前活动的线程数少于corePoolSize,则通过addWorker(command, true)新建一个线程,并将任务(command)添加到该线程中 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.get();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 2.第二步：</span></span><br><span class="line"><span class="comment">         * 2.1 isRunning(c) 当前线程池是否处于运行状态。源代码是通过判断c &lt; SHUTDOWN 来确定返回值。由于RUNNING才会接收新任务，且只有这个值-1才小于SHUTDOWN</span></span><br><span class="line"><span class="comment">         * 2.2 workQueue.offer(command) 任务添加到缓冲队列 </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果 线程池已经处于非运行状态,则从缓冲队列中移除任务然后采用线程池指定的策略拒绝任务 </span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 如果 线程池中任务数量为0,则通过addWorker(null, false)尝试新建一个线程,新建线程对应的任务为null</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 3.第三步，也就是以上两个步骤都不满足：</span></span><br><span class="line"><span class="comment">         * 3.1 当前线程池并不处于Running状态</span></span><br><span class="line"><span class="comment">         * 3.2 当前线程池处于Running状态,但是缓冲队列已经满了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>从上面<code>execute()</code>方法中，出现了<code>ctl</code>，跟踪源码分析起作用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将整型的32位分为高3位和低29位，高3位表示线程池的状态,低29位表示活动的线程数  </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"><span class="comment">//获得高三位</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"><span class="comment">//29位能表示的最大二进制整数，也就是活动线程数 </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行状态是存储在高三位中</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br></pre></td></tr></table></figure></p><p>线程池是通过Integer类型的高3位表述当前线程池的状态RUNNING，SHUTDOWN，STOP，TIDYING，TERMINATED 。低29位表示当前线程的运行任务数量。然后通过位运算来计算运行状态和任务的数量。  </p><p><img src="images/threadpoolexecutor-excute.jpg" alt="execute方法处理流程"></p><p>&emsp;&emsp;线程池在执行<code>execute(Runnable)</code>，执行流程如下（对应图中的流程）</p><ol><li>如果当前运行的线程少于<code>corePoolSize</code>，则创建新线程来执行任务（需要获得全局锁）</li><li>如果运行的线程等于或多于<code>corePoolSize</code> ,则将任务加入<code>BlockingQueue</code></li><li>如果无法将任务加入<code>BlockingQueue</code>(队列已满)，则创建新的线程来处理任务（需要获得全局锁）</li><li>如果创建新线程将使当前运行的线程超出<code>maxiumPoolSize</code>，任务将被拒绝，并调用<code>RejectedExecutionHandler.rejectedExecution()</code>方法。 </li></ol><p>线程池采取上述的流程进行设计是为了减少获取全局锁的次数。在线程池完成预热（当前运行的线程数大于或等于<code>corePoolSize</code>）之后，几乎所有的<code>execute</code>方法调用都执行步骤2。</p><h6 id="ThreadPoolExecutor-addWorker"><a href="#ThreadPoolExecutor-addWorker" class="headerlink" title="ThreadPoolExecutor.addWorker()"></a>ThreadPoolExecutor.addWorker()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get(); <span class="comment">//获取运行状态和工作数量</span></span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c); <span class="comment">//获取当前线程池运行的状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="comment">//条件代表着以下几个场景，直接返回false说明当前工作线程创建失败</span></span><br><span class="line">        <span class="comment">//1.rs&gt;SHUTDOWN 此时不再接收新任务，且所有的任务已经执行完毕</span></span><br><span class="line">        <span class="comment">//2.rs=SHUTDOWN 此时不再接收新任务，但是会执行队列中的任务</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">               firstTask == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">               ! workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">            <span class="comment">//先判断当前活动的线程数是否大于最大值，如果超过了就直接返回false说明线程创建失败</span></span><br><span class="line">            <span class="comment">//如果没有超过再根据core的值再进行以下判断</span></span><br><span class="line">            <span class="comment">//1. core为true，则判断当前活动的线程数是否大于corePoolSize </span></span><br><span class="line">            <span class="comment">//2. core为false，则判断当前活动线程数是否大于maximumPoolSize</span></span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">//比较当前值是否和c相同，如果相同，则改为c+1，并且跳出大循环，直接执行Worker进行线程创建</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="comment">//检查下当前线程池的状态是否已经发生改变</span></span><br><span class="line">            <span class="comment">//如果已经改变了，则进行外层retry大循环，否则只进行内层的循环</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">    Worker w = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//Worker的也是Runnable的实现类</span></span><br><span class="line">        w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">        <span class="comment">//因为不可以直接在Worker的构造方法中进行线程创建  </span></span><br><span class="line">        <span class="comment">//所以要把它的引用赋给t方便后面进行线程创建</span></span><br><span class="line">        <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">        <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//上锁</span></span><br><span class="line">            <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">            mainLock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                    workers.add(w);<span class="comment">//将创建的线程添加到workers容器中  </span></span><br><span class="line">                    <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                    <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                        largestPoolSize = s;</span><br><span class="line">                    workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                mainLock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                t.start();</span><br><span class="line">                workerStarted = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">            addWorkerFailed(w);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> workerStarted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Worker"><a href="#Worker" class="headerlink" title="Worker"></a>Worker</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Worker</span></span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">/** Thread this worker is running in.  Null if factory fails. */</span></span><br><span class="line">    <span class="keyword">final</span> Thread thread;</span><br><span class="line">    <span class="comment">/** Initial task to run.  Possibly null. */</span></span><br><span class="line">    Runnable firstTask;</span><br><span class="line">        </span><br><span class="line">    Worker(Runnable firstTask) &#123;</span><br><span class="line">        setState(-<span class="number">1</span>); <span class="comment">// inhibit interrupts until runWorker</span></span><br><span class="line">        <span class="keyword">this</span>.firstTask = firstTask;</span><br><span class="line">        <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Worker</code>在<code>ThreadPoolExecutor</code>为一个内部类实现了<code>Runnable</code>接口。只有一个构造方法，在上面的<code>addWorker()</code>中<code>final Thread t = w.thread;</code>知道其实是获取了线程的对象，因为在构造方法中，线程的引用即是它自己。<br>因此在调用<code>t.start()</code>执行的是（Worker类中的方法）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** Delegates main run loop to outer runWorker  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里执行的是ThreadPoolExecutor中的runWorker</span></span><br><span class="line">    runWorker(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="ThreadPoolExecutor-runWorker"><a href="#ThreadPoolExecutor-runWorker" class="headerlink" title="ThreadPoolExecutor.runWorker()"></a>ThreadPoolExecutor.runWorker()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">runWorker</span><span class="params">(Worker w)</span> </span>&#123;</span><br><span class="line">    Thread wt = Thread.currentThread();</span><br><span class="line">    Runnable task = w.firstTask;<span class="comment">//获取Worker中的任务</span></span><br><span class="line">    w.firstTask = <span class="keyword">null</span>; <span class="comment">//将Woeker中的任务置空</span></span><br><span class="line">    w.unlock(); <span class="comment">// allow interrupts</span></span><br><span class="line">    <span class="keyword">boolean</span> completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//如果当前任务为空  那么就从getTask中获得任务</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 如果task不为空，执行完task后则将task置空</span></span><br><span class="line"><span class="comment">         * 继续进入循环，则从getTask中获取任务</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            w.lock();</span><br><span class="line">            <span class="comment">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class="line">            <span class="comment">// if not, ensure thread is not interrupted.  This</span></span><br><span class="line">            <span class="comment">// requires a recheck in second case to deal with</span></span><br><span class="line">            <span class="comment">// shutdownNow race while clearing interrupt</span></span><br><span class="line">            <span class="keyword">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class="line">                 (Thread.interrupted() &amp;&amp;</span><br><span class="line">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class="line">                !wt.isInterrupted())</span><br><span class="line">                wt.interrupt();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//任务执行前调用的方法</span></span><br><span class="line">                beforeExecute(wt, task);</span><br><span class="line">                Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                    thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//任务结束后调用的方法</span></span><br><span class="line">                    afterExecute(task, thrown);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                task = <span class="keyword">null</span>;</span><br><span class="line">                w.completedTasks++;</span><br><span class="line">                w.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        processWorkerExit(w, completedAbruptly);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以简单理解，就是执行任务，只是执行任务需要进行处理，包括获得任务、任务开始前处理、任务执行、任务执行后处理。但是，关键代码还是里面所调用的一个方法<strong><code>getTask()</code></strong>  。</p><p><code>beforeExecute(Thread t, Runnable r)</code>与<code>afterExecute(Runnable r, Throwable t)</code>并未在类中有处理业务的逻辑，即可以通过继承线程池的方式来重写这两个方法，这样就能够对任务的执行进行监控。</p><p><strong>这里我有两个疑问？</strong></p><ul><li>怎么退出这个While循环，也就是进入到<code>processWorkerExit()</code><ol><li>从While循环体中可以知道，当线程运行时出现异常，那么都会退出循环，进入到<code>processWorkerExit()</code>  </li><li>从<code>getTask()</code>获得结果为null，则也会进到<code>processWorkerExit()</code> </li></ol></li></ul><ul><li>getTask()方法为什么是最关键的？分析其执行代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Runnable <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line">    <span class="comment">//死循环</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">        <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Are workers subject to culling?</span></span><br><span class="line">        <span class="comment">//如果设置了allowCoreThreadTimeOut(true)</span></span><br><span class="line">        <span class="comment">//或者当前运行的任务数大于设置的核心线程数</span></span><br><span class="line">        <span class="comment">// timed = true</span></span><br><span class="line">        <span class="keyword">boolean</span> timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ((wc &gt; maximumPoolSize || (timed &amp;&amp; timedOut))</span><br><span class="line">            &amp;&amp; (wc &gt; <span class="number">1</span> || workQueue.isEmpty())) &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** ------------------------以上的操作跟之前类似----------------------- */</span></span><br><span class="line">        <span class="comment">/** ------------------------关键在于下面的代码------------------------- */</span></span><br><span class="line">        <span class="comment">/** ------------------------从阻塞队列中获取任务----------------------- */</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runnable r = timed ?</span><br><span class="line">                <span class="comment">//对于阻塞队列，poll(long timeout, TimeUnit unit) 将会在规定的时间内去任务</span></span><br><span class="line">                <span class="comment">//如果没取到就返回null</span></span><br><span class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                <span class="comment">//take会一直阻塞，等待任务的添加</span></span><br><span class="line">                workQueue.take();</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            timedOut = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">            timedOut = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>到此，终于发现为什么线程池能够保证一直等待任务而不被销毁，其实就是进入了阻塞状态。</strong></p><h6 id="ThreadPoolExecutor-processWorkerExit"><a href="#ThreadPoolExecutor-processWorkerExit" class="headerlink" title="ThreadPoolExecutor.processWorkerExit()"></a>ThreadPoolExecutor.processWorkerExit()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> completedAbruptly 工作线程是否死与执行任务出现的异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">processWorkerExit</span><span class="params">(Worker w, <span class="keyword">boolean</span> completedAbruptly)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (completedAbruptly) <span class="comment">//如果突然被打断，工作线程数不会被减少</span></span><br><span class="line">        decrementWorkerCount();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        completedTaskCount += w.completedTasks;</span><br><span class="line">        workers.remove(w);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tryTerminate();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">    <span class="comment">//判断运行状态是否在STOP之前</span></span><br><span class="line">    <span class="keyword">if</span> (runStateLessThan(c, STOP)) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!completedAbruptly) &#123;<span class="comment">//正常退出，也就是task == null</span></span><br><span class="line">            <span class="keyword">int</span> min = allowCoreThreadTimeOut ? <span class="number">0</span> : corePoolSize;</span><br><span class="line">            <span class="keyword">if</span> (min == <span class="number">0</span> &amp;&amp; ! workQueue.isEmpty())</span><br><span class="line">                min = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (workerCountOf(c) &gt;= min)</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// replacement not needed</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//新增一个工作线程，代替原来的工作线程</span></span><br><span class="line">        addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="AbstractExecutorService-submit"><a href="#AbstractExecutorService-submit" class="headerlink" title="AbstractExecutorService.submit()"></a>AbstractExecutorService.submit()</h6><p>&emsp;&emsp; 向线程池中提交一个需要返回结果的任务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Future&lt;?&gt; submit(Runnable task) &#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    RunnableFuture&lt;Void&gt; ftask = newTaskFor(task, <span class="keyword">null</span>);</span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    RunnableFuture&lt;T&gt; ftask = newTaskFor(task, result);</span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (task == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    RunnableFuture&lt;T&gt; ftask = newTaskFor(task);</span><br><span class="line">    execute(ftask);</span><br><span class="line">    <span class="keyword">return</span> ftask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>ThreadPoolExecutor</code>中并未发现<code>submit()</code>，因此从父类，即抽象类<code>AbstractExecutorService</code>中找到<code>submit()</code>的方法实现，从方法实现中，可知：</p><ol><li><code>submit()</code>接收任务参数，并将参数封装为<code>FutureTask</code>任务类  </li><li>将封装好的<code>FutureTask</code>提交到<code>execute()</code>中  </li></ol><p><strong>结论：</strong><code>submit()</code>真正实现的任务处理流程跟<code>execute()</code>一样，也可以说<code>submit()</code>就是调用了<code>execute()</code></p><p><img src="images/threadpoolexecutor-1.jpg" alt="线程池的处理流程"></p><p>&emsp;&emsp;从上面的流程图可以知道，向线程池提交一个任务后，共经历以下流程：</p><ol><li>提交任务到线程池；  </li><li>线程池判断核心线程池里是的线程是否都在执行任务，如果不是，则创建一个新的工作线程来执行任务。如果核心线程池里的线程都在执行任务，则进入下一个流程。  </li><li>线程池判断工作队列是否已满。如果工作队列没有满，则将新提交的任务储存在这个工作队列里。如果工作队列满了，则进入下一个流程。</li><li>线程池判断其内部线程是否都处于工作状态。如果没有，则创建一个新的工作线程来执行任务。如果已满了，则交给饱和策略来处理这个任务。</li></ol><h6 id="ThreadPoolExecutor-shutdown"><a href="#ThreadPoolExecutor-shutdown" class="headerlink" title="ThreadPoolExecutor.shutdown()"></a>ThreadPoolExecutor.shutdown()</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        checkShutdownAccess();<span class="comment">//检查终止线程池的线程是否有权限。  </span></span><br><span class="line">        advanceRunState(SHUTDOWN);<span class="comment">// 设置线程池的状态为关闭状态。  </span></span><br><span class="line">        interruptIdleWorkers();<span class="comment">// 中断线程池中空闲的线程</span></span><br><span class="line">        onShutdown(); <span class="comment">// 钩子函数，在ThreadPoolExecutor中没有任何动作 </span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    tryTerminate();<span class="comment">// 尝试终止线程池  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>JAVA并发编程与高并发解决方案 - 并发编程 五</title>
      <link href="/2018/06/21/concurrency/concurrency-5/"/>
      <url>/2018/06/21/concurrency/concurrency-5/</url>
      <content type="html"><![CDATA[<h1 id="JAVA并发编程与高并发解决方案-并发编程-五"><a href="#JAVA并发编程与高并发解决方案-并发编程-五" class="headerlink" title="JAVA并发编程与高并发解决方案 - 并发编程 五"></a>JAVA并发编程与高并发解决方案 - 并发编程 五</h1><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">作者</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">2018.5.8</td><td style="text-align:center">huangz</td><td style="text-align:center">J.U.C组件拓展</td></tr></tbody></table><h3 id="J-U-C-组件拓展"><a href="#J-U-C-组件拓展" class="headerlink" title="J.U.C 组件拓展"></a>J.U.C 组件拓展</h3><h4 id="FutureTask"><a href="#FutureTask" class="headerlink" title="FutureTask"></a>FutureTask</h4><h5 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h5><p>&emsp;&emsp;<code>FutureTask</code>这个组件是J.U.C里面的，但不是AQS的子类，但是这个类对线程处理的结果很值得我们学习和在项目中使用。<br>&emsp;&emsp;在Java中一般通过继承Thread类或者实现Runnable接口这两种方式来创建多线程，但是这两种方式都有个缺陷，就是不能在执行完成后获取执行的结果，在Java 1.5之后提供了Callable和Future接口，通过它们就可以在任务执行完毕之后得到任务的执行结果。  </p><h5 id="Callable-与-Runnable"><a href="#Callable-与-Runnable" class="headerlink" title="Callable 与 Runnable"></a>Callable 与 Runnable</h5><p><code>Callable</code>接口定义，运行<code>Callable</code>任务可以拿到一个Future对象，表示异步计算的结果。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算结果或失败时扔出异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.5</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 计算结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> 计算失败扔出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>Runnable</code>接口定义，由于<code>run()</code>方法返回值为<code>void</code>类型，所以在执行完任务之后无法返回任何结果。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当一个对象实现&lt;code&gt;Runnable&lt;/code&gt;接口创建一个线程，这个对象通过覆写</span></span><br><span class="line"><span class="comment">     * run方法处理线程逻辑，并且Thread类启动该线程，执行Runnable处理线程逻辑</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&amp;emsp可以看到<code>Callable</code>是个泛型接口，泛型V就是要call()方法返回的类型。<code>Callable</code>接口和<code>Runnable</code>接口很像，都可以被另外一个线程执行，<code>Callable</code>功能更强大些，正如前面所说的，<code>Runnable</code>不会返回数据也不能抛出异常，而<code>Callable</code>可以有返回值与可以抛出异常。  </p><h5 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h5><p>&emsp;&emsp;<code>Future</code>接口代表异步计算的结果，通过Future接口提供的方法可以查看异步计算是否执行完成，或者等待执行结果并获取执行结果，同时还可以取消执行。也就是说<code>Future</code>就是对于具体的<code>Runnable</code>或者<code>Callable</code>任务的执行结果进行取消、查询是否完成、获取结果。通常不能从线程中获得方法的返回值，这时<code>Future</code>就出场了，<code>Future</code>可以监控目标线程调用<code>call()</code>的情况。总结来说，<code>Future</code>可以得到线程任务方法的返回值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 取消异步任务的执行。</span></span><br><span class="line"><span class="comment">     * 如果异步任务已经完成或者已经被取消，或者由于某些原因不能取消，则会返回false；</span></span><br><span class="line"><span class="comment">     * 如果任务还没有被执行，则会返回true并且异步任务不会被执行；</span></span><br><span class="line"><span class="comment">     * 如果任务已经开始执行了但是还没有执行完成：</span></span><br><span class="line"><span class="comment">     * 若mayInterruptIfRunning为true，则会立即中断执行任务的线程并返回true</span></span><br><span class="line"><span class="comment">     * 若mayInterruptIfRunning为false，则会返回true且不会中断任务执行线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 判断任务是否被取消，如果任务在结束(正常执行结束或者执行异常结束)前被取消则返回true，否则返回false。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 判断任务是否已经完成，如果完成则返回true，否则返回false。需要注意的是：任务执行过程中发生异常、任务被取消也属于任务已完成，也会返回true。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 获取任务执行结果:</span></span><br><span class="line"><span class="comment">     * 如果任务还没完成则会阻塞等待直到任务执行完成</span></span><br><span class="line"><span class="comment">     * 如果任务被取消则会抛出CancellationException异常</span></span><br><span class="line"><span class="comment">     * 如果任务执行过程发生异常则会抛出ExecutionException异常</span></span><br><span class="line"><span class="comment">     * 如果阻塞等待过程中被中断则会抛出InterruptedException异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 带超时时间的get()版本，如果阻塞等待过程中超时则会抛出TimeoutException异常。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;因为Future只是一个接口，所以是无法直接用来创建对象使用的，因此就有了下面的<code>FutureTask</code>。  </p><h5 id="FutureTask-1"><a href="#FutureTask-1" class="headerlink" title="FutureTask"></a>FutureTask</h5><p>&emsp;&emsp;<code>Future</code>只是一个接口，不能直接用来创建对象，<code>FutureTask</code>是<code>Future</code>的实现类。  </p><p><code>public interface RunnableFuture&lt;V&gt; extends Runnable, Future&lt;V&gt; {}</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Callable&lt;V&gt; callable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (callable == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.callable = callable;</span><br><span class="line">        <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FutureTask</span><span class="params">(Runnable runnable, V result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.callable = Executors.callable(runnable, result);</span><br><span class="line">        <span class="keyword">this</span>.state = NEW;       <span class="comment">// ensure visibility of callable</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;从上面两个类结构，可以得知<code>FutureTask</code>最终还是执行<code>Callable</code>类型的任务。如果在<code>FutureTask</code>构造函数中传入<code>Runnable</code>，会转换成<code>Callable</code>类型。  </p><p>&emsp;&emsp;<code>FutureTask</code>实际上实现了<code>Runnable</code>与<code>Future</code>接口，所以它既可以作为<code>Runnable</code>被线程执行，又可以作为<code>Future</code>得到<code>Callable</code>的返回值。好处：假设有个很费时的逻辑需要计算，并且返回这个计算值，同时这个值又不是马上需要，那么就可以使用这个组合，用另外一个线程计算返回值，而当前线程在使用这个返回值之前，可以做其他的操作，等到需要这个返回值时，才通过<code>Future</code>得到。  </p><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Callable任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            log.info(<span class="string">"do something in callable"</span>);</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Done"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//1.生成线程池</span></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">//线程池提交Callable任务，并且得到Future</span></span><br><span class="line">        Future&lt;String&gt; future = executorService.submit(<span class="keyword">new</span> MyCallable());</span><br><span class="line">        log.info(<span class="string">"do something in main"</span>);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">//调用Future.get()时，如果任务线程还未执行完毕，则会一直阻塞在此，等待线程任务完成，然后拿到结果</span></span><br><span class="line">        String result = future.get();</span><br><span class="line">        log.info(<span class="string">"result：&#123;&#125;"</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上<code>Future</code>与以下<code>FutureTask</code>要实现的效果是一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTaskExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                log.info(<span class="string">"do something in callable"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"Done"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">        log.info(<span class="string">"do something in main"</span>);</span><br><span class="line">        <span class="comment">// 1. 调用isDone()判断任务是否结束</span></span><br><span class="line">        <span class="keyword">if</span>(!futureTask.isDone()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Task is not done"</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//阻塞主线程一秒钟</span></span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String result = futureTask.get();</span><br><span class="line">        log.info(<span class="string">"result：&#123;&#125;"</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>参考<a href="http://www.importnew.com/25286.html" target="_blank" rel="noopener">深入学习 FutureTask</a></p></blockquote><h4 id="Fork-Join"><a href="#Fork-Join" class="headerlink" title="Fork/Join"></a>Fork/Join</h4><h5 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h5><p>&emsp;&emsp;Fork/Join框架是Java7提供了的一个用于并行执行任务的框架， 是一个把大任务分割成若干个小任务，最终汇总每个小任务结果后得到大任务结果的框架。它的思想与<code>MapReduce</code>类似，从字面上理解，Fork即把一个大任务，切割成若干个子任务并行执行，Join即把若干个子任务结果进行合并，最后得到大任务的结果，主要采取工作窃取算法。<br>&emsp;&emsp;工作窃取（work-stealing）算法是指某个线程从其他队列里窃取任务来执行。<br><img src="images/forkjoin-1.png" alt="Fork/Join框架流程图"><br>&emsp;&emsp;假如我们需要做一个比较大的任务，我们可以把这个任务分割为若干互不依赖的子任务，为了减少线程间的竞争，于是把这些子任务分别放到不同的队列里，并为每个队列创建一个单独的线程来执行队列里的任务，线程和队列一一对应，比如A线程负责处理A队列里的任务。但是有的线程会先把自己队列里的任务干完，而其他线程对应的队列里还有任务等待处理。干完活的线程与其等着，不如去帮其他线程干活，于是它就去其他线程的队列里窃取一个任务来执行。而在这时它们会访问同一个队列，所以为了减少窃取任务线程和被窃取任务线程之间的竞争，通常会使用双端队列，被窃取任务线程永远从双端队列的头部拿任务执行，而窃取任务的线程永远从双端队列的尾部拿任务执行。  </p><p>&emsp;&emsp;工作窃取算法的优点是充分利用线程进行并行计算，并减少了线程间的竞争，其缺点是在某些情况下还是存在竞争，比如双端队列里只有一个任务时。并且消耗了更多的系统资源，比如创建多个线程和多个双端队列。  </p><p>&emsp;&emsp;对于Fork/Join框架而言，当一个任务正在等待它使用Join操作创建的子任务结束时，执行这个任务的工作线程，寻找其他并未被执行的任务，并开始执行，通过这种方式，线程充分利用它们的运行时间，来提高应用程序的性能。为了实现这个目标，Fork/Join框架执行的任务有一些<strong>局限性：</strong></p><ol><li>任务只能使用Fork、Join操作来作为同步机制，如果使用了其他同步机制，那他们在同步操作时，工作线程则不能执行其他任务。如：在框架的操作中，使任务进入睡眠，那么在这个睡眠期间内，正在执行这个任务的工作线程，将不会执行其他任务</li><li>所执行的任务，不应该执行IO操作，如读和写数据文件</li><li>任务不能抛出检查型异常，必须通过必要的代码处理它们</li></ol><p>核心是两个类：<code>ForkJoinTask</code>与<code>ForkJoinPool</code>。Pool主要负责实现，包括上面所介绍的工作窃取算法，管理工作线程和提供关于任务的状态以及它们的执行信息；Task主要提供在任务中，执行Fork与Join操作的机制。  </p><blockquote><p>引用[<a href="https://www.cnblogs.com/zhaobingqing/p/7217781.html" target="_blank" rel="noopener">并行流与串行流 Fork/Join框架</a>的一张图来说明过程</p></blockquote><p><img src="images/forkjoin-2.png" alt="fork/join过程图"></p><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><p>我们先来看一下Fork/Join框架的演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="comment">//Recursive递归的意思,把大任务不断的拆分成小任务，即是一个递归拆分任务的一个过程</span></span><br><span class="line"><span class="comment">//RecursiveTask&lt;T&gt;,T表示任务的返回值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinTaskExample</span> <span class="keyword">extends</span> <span class="title">RecursiveTask</span>&lt;<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"><span class="comment">//设置分割的阈值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> threshold = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> start;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> end;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinTaskExample</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.start = start;</span><br><span class="line">        <span class="keyword">this</span>.end = end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//任务</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Integer <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果任务足够小就计算任务</span></span><br><span class="line">        <span class="keyword">boolean</span> canCompute = (end - start) &lt;= threshold;</span><br><span class="line">        <span class="keyword">if</span> (canCompute) &#123;</span><br><span class="line">            <span class="comment">//任务足够小的时候，直接计算，不进行分裂计算</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 如果任务大于阈值，就分裂成两个子任务计算</span></span><br><span class="line">            <span class="keyword">int</span> middle = (start + end) / <span class="number">2</span>;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 下面可能会产生递归操作</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">//继续分裂任务</span></span><br><span class="line">            ForkJoinTaskExample leftTask = <span class="keyword">new</span> ForkJoinTaskExample(start, middle);</span><br><span class="line">            ForkJoinTaskExample rightTask = <span class="keyword">new</span> ForkJoinTaskExample(middle + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 执行子任务</span></span><br><span class="line">            leftTask.fork();</span><br><span class="line">            rightTask.fork();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待任务执行结束合并其结果</span></span><br><span class="line">            <span class="keyword">int</span> leftResult = leftTask.join();</span><br><span class="line">            <span class="keyword">int</span> rightResult = rightTask.join();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 合并子任务</span></span><br><span class="line">            sum = leftResult + rightResult;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回结果</span></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//生成一个池</span></span><br><span class="line">        ForkJoinPool forkjoinPool = <span class="keyword">new</span> ForkJoinPool();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成一个计算任务，计算1+2+3+4</span></span><br><span class="line">        ForkJoinTaskExample task = <span class="keyword">new</span> ForkJoinTaskExample(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行一个任务，将任务放入池中，并开始执行，并用Future接收</span></span><br><span class="line">        Future&lt;Integer&gt; result = forkjoinPool.submit(task);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">"result:&#123;&#125;"</span>, result.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过这个例子让我们再来进一步了解<code>ForkJoinTask</code>，任务类继承<code>RecursiveTask</code>，<code>ForkJoinTask</code>与一般的任务的主要区别在于它需要实现<code>compute()</code>方法，在这个方法里，首先需要判断任务是否足够小，如果足够小就直接执行任务。如果不足够小，就必须分割成两个子任务，每个子任务在调用<code>fork()</code>方法时，又会进入<code>compute()</code>方法，看看当前子任务是否需要继续分割成孙任务，如果不需要继续分割，则执行当前子任务并返回结果。使用<code>join()</code>方法会等待子任务执行完并得到其结果。  </p><h5 id="Main-Class"><a href="#Main-Class" class="headerlink" title="Main Class"></a>Main Class</h5><p>&emsp;&emsp;上面提到，Fork/Join框架中的两个核心类<code>ForkJoinTask</code>与<code>ForkJoinPool</code>，并且从上面的例子可以知道，声明<code>ForkJoinTask</code>后，将其加入到<code>ForkJoinPool</code>中，并返回一个<code>Future</code>对象。  </p><ul><li><code>ForkJoinPool</code> ：<code>ForkJoinTask</code>需要通过<code>ForkJoinPool</code>来执行，任务分割出的子任务会添加到当前工作线程所维护的双端队列中，进入队列的头部。当一个工作线程的队列里暂时没有任务时，它会随机从其他工作线程的队列的尾部获取一个任务。</li><li><code>ForkJoinTask</code>：我们要使用<code>ForkJoin</code>框架，必须首先创建一个<code>ForkJoin</code>任务。它提供在任务中执行<code>fork()</code>和<code>join()</code>操作的机制，通常情况下我们不需要直接继承<code>ForkJoinTask</code>类，而只需要继承它的子类，<code>Fork/Join</code>框架提供了以下两个子类：<ul><li><code>RecursiveAction</code>：用于没有返回结果的任务。</li><li><code>RecursiveTask</code> ：用于有返回结果的任务。</li></ul></li></ul><p><img src="images/forkjoin-4.png" alt="ForkJoin相关类"></p><h5 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h5><p>&emsp;&emsp;<code>ForkJoinTask</code>在执行的时候可能会抛出异常，但是我们没办法在主线程里直接捕获异常，所以<code>ForkJoinTask</code>提供了<code>isCompletedAbnormally()</code>方法来检查任务是否已经抛出异常或已经被取消了，并且可以通过<code>ForkJoinTask</code>的<code>getException()</code>方法获取异常。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** ForkJoinTask运行状态 */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> status; <span class="comment">// 直接被ForkJoin池和工作线程访问</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DONE_MASK   = <span class="number">0xf0000000</span>;  <span class="comment">// mask out non-completion bits</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NORMAL      = <span class="number">0xf0000000</span>;  <span class="comment">// must be negative</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED   = <span class="number">0xc0000000</span>;  <span class="comment">// must be &lt; NORMAL</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> EXCEPTIONAL = <span class="number">0x80000000</span>;  <span class="comment">// must be &lt; CANCELLED</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL      = <span class="number">0x00010000</span>;  <span class="comment">// must be &gt;= 1 &lt;&lt; 16</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SMASK       = <span class="number">0x0000ffff</span>;  <span class="comment">// short bits for tags</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Ruturn</span> 任务是否扔出异常或被取消</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isCompletedAbnormally</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> status &lt; NORMAL;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果计算扔出异常，则返回异常</span></span><br><span class="line"><span class="comment">     * 如果任务被取消了则返回CancellationException。如果任务没有完成或者没有抛出异常则返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Throwable <span class="title">getException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s = status &amp; DONE_MASK;</span><br><span class="line">        <span class="keyword">return</span> ((s &gt;= NORMAL)    ? <span class="keyword">null</span> :</span><br><span class="line">                (s == CANCELLED) ? <span class="keyword">new</span> CancellationException() :</span><br><span class="line">                getThrowableException());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h5><h6 id="ForkJoinPool"><a href="#ForkJoinPool" class="headerlink" title="ForkJoinPool"></a>ForkJoinPool</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinPool</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ForkJoinPool，它同ThreadPoolExecutor一样，也实现了Executor和ExecutorService接口。它使用了</span></span><br><span class="line"><span class="comment">     * 一个无限队列来保存需要执行的任务，而线程的数量则是通过构造函数传入，如果没有向构造函数中传入希</span></span><br><span class="line"><span class="comment">     * 望的线程数量，那么当前计算机可用的CPU数量会被设置为线程数量作为默认值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Math.min(MAX_CAP,Runtime.getRuntime().availableProcessors()),</span><br><span class="line">             defaultForkJoinWorkerThreadFactory, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ForkJoinPool</span><span class="params">(<span class="keyword">int</span> parallelism)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(parallelism, defaultForkJoinWorkerThreadFactory, <span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有多个构造器，这里省略</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">volatile</span> WorkQueue[] workQueues;     <span class="comment">// main registry</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WorkQueue</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ForkJoinWorkerThread owner; <span class="comment">// 工作线程</span></span><br><span class="line">        ForkJoinTask&lt;?&gt;[] array;   <span class="comment">// 任务</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//传入的是ForkJoinPool与指定的一个工作线程</span></span><br><span class="line">        WorkQueue(ForkJoinPool pool, ForkJoinWorkerThread owner) &#123;</span><br><span class="line">            <span class="keyword">this</span>.pool = pool;</span><br><span class="line">            <span class="keyword">this</span>.owner = owner;</span><br><span class="line">            <span class="comment">// Place indices in the center of array (that is not yet allocated)</span></span><br><span class="line">            base = top = INITIAL_QUEUE_CAPACITY &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>ForkJoinPool</code>中源码挺强大的，我只抽取了重要的部分进行分析。</p><ul><li><code>ForkJoinPool</code>中维护了一组<code>WorkQueue</code>，也就是工作队列，工作队列中又维护了一个工作线程<code>ForkJoinWorkerThread</code>与一组工作任务<code>ForkJoinTask</code>  </li><li><code>WorkQueue</code>是一个双端队列（Deque），即 Double Ended Queue ，Deque是一种具有队列和栈的性质的数据结构，双端队列中的元素可以从两端弹出，其限定插入和删除操作在表的两端进行。  </li><li>每个工作线程在运行中产生新的任务（通常是因为调用了<code>fork()</code>）时，会放入工作队列的队尾，并且工作线程在处理自己的工作队列时，使用的是<code>LIFO</code> 方式，也就是说每次从队尾取出任务来执行。  </li><li>每个工作线程在处理自己的工作队列同时，会尝试窃取一个任务（或是来自于刚刚提交到 pool 的任务，或是来自于其他工作线程的工作队列），窃取的任务位于其他线程的工作队列的队首，也就是说工作线程在窃取其他工作线程的任务时，使用的是 FIFO 方式。  </li><li>在遇到 join() 时，如果需要 join 的任务尚未完成，则会先处理其他任务，并等待其完成。</li><li>在既没有自己的任务，也没有可以窃取的任务时，进入休眠。  </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinPool</span> <span class="keyword">extends</span> <span class="title">AbstractExecutorService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">ForkJoinTask&lt;T&gt; <span class="title">submit</span><span class="params">(ForkJoinTask&lt;T&gt; task)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">ForkJoinTask&lt;T&gt; <span class="title">submit</span><span class="params">(Callable&lt;T&gt; task)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">ForkJoinTask&lt;T&gt; <span class="title">submit</span><span class="params">(Runnable task, T result)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> ForkJoinTask&lt;?&gt; submit(Runnable task) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面来看，<code>ForkJoinPool</code>所提供的<code>submit()</code>方法中，有几个重载。</p><p><code>ForkJoinPool</code>自身也拥有工作队列，这些工作队列的作用是用来接收由外部线程（非 <code>ForkJoinThread</code> 线程）提交过来的任务，而这些工作队列被称为 <code>submitting queue</code> 。</p><h6 id="ForkJoinTask"><a href="#ForkJoinTask" class="headerlink" title="ForkJoinTask"></a>ForkJoinTask</h6><p>&emsp;&emsp;从上面的例子，我们可以知道，任务的操作，重要的是<code>fork()</code> 和  <code>join()</code>，我们可以假设这两个的作用：  </p><ul><li><code>fork()</code>：开启一个新线程（或是重用线程池内的空闲线程），将任务交给该线程处理。  </li><li><code>join()</code>：等待该任务的处理线程处理完毕，获得返回值。</li></ul><p>&emsp;&emsp;但对我的这个假设，很明显就不对的，当任务分解得越来越细时，所需要的线程数就会越来越多，而且大部分线程处于等待状态。从<code>ForkJoinPool</code>的构造函数中，可以知道，工作线程的数量是指定的，或者说是按照系统默认的。<br>&emsp;&emsp;可以得出，我的假设是错误的，因此，并不是每个 fork() 都会促成一个新线程被创建，而每个 join() 也不是一定会造成线程被阻塞。这一点可以体现出<code>work stealing 算法</code>的优势。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ForkJoinTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在当前任务正在运行的池中异步执行此任务（如果适用）</span></span><br><span class="line"><span class="comment">     * 或使用ForkJoinPool.commonPool()（如果不是ForkJoinWorkerThread实例）进行异步执行 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> ForkJoinTask&lt;V&gt; <span class="title">fork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t;</span><br><span class="line">        <span class="keyword">if</span> ((t = Thread.currentThread()) <span class="keyword">instanceof</span> ForkJoinWorkerThread)</span><br><span class="line">            ((ForkJoinWorkerThread)t).workQueue.push(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            ForkJoinPool.common.externalPush(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">join</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s;</span><br><span class="line">        <span class="keyword">if</span> ((s = doJoin() &amp; DONE_MASK) != NORMAL)</span><br><span class="line">            reportException(s);</span><br><span class="line">        <span class="keyword">return</span> getRawResult();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">doJoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> s; Thread t; ForkJoinWorkerThread wt; ForkJoinPool.WorkQueue w;</span><br><span class="line">        <span class="keyword">return</span> (s = status) &lt; <span class="number">0</span> ? s :</span><br><span class="line">            ((t = Thread.currentThread()) <span class="keyword">instanceof</span> ForkJoinWorkerThread) ?</span><br><span class="line">            (w = (wt = (ForkJoinWorkerThread)t).workQueue).</span><br><span class="line">            tryUnpush(<span class="keyword">this</span>) &amp;&amp; (s = doExec()) &lt; <span class="number">0</span> ? s :</span><br><span class="line">            wt.pool.awaitJoin(w, <span class="keyword">this</span>, <span class="number">0L</span>) :</span><br><span class="line">            externalAwaitDone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><code>fork()</code> 做的工作只有一件事，既是把任务推入当前工作线程的工作队列里。</li><li><code>join()</code> 的工作则复杂得多，也是<code>join()</code> 可以使得线程免于被阻塞的原因  <ol><li>检查调用 <code>join()</code> 的线程是否是 <code>ForkJoinThread</code> 线程。如果不是（例如 main 线程），则阻塞当前线程，等待任务完成。如果是，则不阻塞。</li><li>查看任务的完成状态，如果已经完成，直接返回结果。</li><li>如果任务尚未完成，但处于自己的工作队列内，则完成它。</li><li>如果任务已经被其他的工作线程偷走，则窃取这个小偷的工作队列内的任务（以 FIFO 方式），执行，以期帮助它早日完成欲 join 的任务。</li><li>如果偷走任务的小偷也已经把自己的任务全部做完，正在等待需要 join 的任务时，则找到小偷的小偷，帮助它完成它的任务。</li><li>递归地执行第5步。</li></ol></li></ol><p><img src="images/forkjoin-3.png" alt="join()流程图"></p><blockquote><p>以上部分内容引用于<a href="http://blog.dyngr.com/blog/2016/09/15/java-forkjoinpool-internals/" target="_blank" rel="noopener">Java 并发编程笔记：如何使用 ForkJoinPool 以及原理</a></p></blockquote><h4 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h4><blockquote><p>引用一篇相关文章的一段话，初探BlockingQueue：<a href="https://www.cnblogs.com/KingIceMou/p/8075343.html" target="_blank" rel="noopener">BlockingQueue</a><br>&emsp;&emsp;多线程环境中，通过队列可以很容易实现数据共享，比如经典的“生产者”和“消费者”模型中，通过队列可以很便利地实现两者之间的数据共享。假设我们有若干生产者线程，另外又有若干个消费者线程。如果生产者线程需要把准备好的数据共享给消费者线程，利用队列的方式来传递数据，就可以很方便地解决他们之间的数据共享问题。但如果生产者和消费者在某个时间段内，万一发生数据处理速度不匹配的情况呢？理想情况下，如果生产者产出数据的速度大于消费者消费的速度，并且当生产出来的数据累积到一定程度的时候，那么生产者必须暂停等待一下（阻塞生产者线程），以便等待消费者线程把累积的数据处理完毕，反之亦然。然而，在concurrent包发布以前，在多线程环境下，我们每个程序员都必须去自己控制这些细节，尤其还要兼顾效率和线程安全，而这会给我们的程序带来不小的复杂度。好在此时，强大的concurrent包横空出世了，而他也给我们带来了强大的BlockingQueue。（在多线程领域：所谓阻塞，在某些情况下会挂起线程（即阻塞），一旦条件满足，被挂起的线程又会自动被唤醒）</p></blockquote><p><img src="images/blockingqueue-1.png" alt="BlockingQueue示意图"></p><p>&emsp;&emsp;<code>BlockingQueue</code>即为阻塞队列，是一个先进先出的队列，在某些情况下，对阻塞队列的访问可能会造成阻塞，被阻塞的情况主要有两种：</p><ol><li>当队列满时，进行入队列操作。当一个线程试图对一个已经满了的队列进行入队操作时， 他将会阻塞，除非有另一个线程做了出队列的操作。  </li><li>当队列空时，进行出队列操作。当一个线程试图对一个空队列进行出队操作时，他也将会被阻塞，除非有另一个线程做了入队的操作。  </li></ol><p>&emsp;&emsp;阻塞队列是线程安全的，主要用在生产者与消费者的场景。上图就是线程生产和消费的场景，负责生产的线程不断的制造新对象并插入到阻塞队列中，直到达到队列的上限值，从而被阻塞，直到消费线程对队列进行消费。同理，负责消费的线程不断的从队列中消费对象，直到这个队列为空，这时消费线程将会被阻塞，除非队列中有新的队列被生产加入。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;<code>BlockingQueue</code> 是一个接口，继承自 <code>Queue</code>，所以其实现类也可以作为 <code>Queue</code> 的实现来使用，而 <code>Queue</code> 又继承自 <code>Collection</code> 接口。</p><p>&emsp;&emsp;<code>BlockingQueue</code>对插入操作、移除操作、获取元素操作提供了四种不同的方法用于不同的场景中使用。我们使用不同的方法，都会有不同的表现。<code>BlockingQueue</code> 的各个实现都遵循了这些规则：</p><table><thead><tr><th></th><th>Throws Exception</th><th>Special Value</th><th>Blocks</th><th>Times Out</th></tr></thead><tbody><tr><td>insert</td><td>add(o)</td><td>offer(o)</td><td>put(o)</td><td>offer(o,timeout,timeunit)</td></tr><tr><td>remove</td><td>remove(o)</td><td>poll()</td><td>take()</td><td>poll(timeout,timeunit)</td></tr><tr><td>examine</td><td>element()</td><td>peek()</td><td>not applicable</td><td>not applicable</td></tr></tbody></table><ol><li>Throws Exception：抛出异常。如果不能马上进行，则抛出异常。  </li><li>Special Value：如果不能马上进行，则返回特殊值，一般是True或False  </li><li>Blocks：如果不能马上进行，则操作会被阻塞，直到这个操作成功  </li><li>Times Out：如果不能马上进行，操作会被阻塞指定的时间。如果指定时间还未执行，则返回特殊值，一般是True或False。  </li></ol><p>对于<code>BlockingQueue</code>，关注点应该在它的<code>put</code>和<code>take</code>方法上，因为这两个方法是带阻塞的。  </p><p>&emsp;&emsp;<code>BlockingQueue</code> 不接受 <code>null</code> 值的插入，相应的方法在碰到<code>null</code> 的插入时会抛出 <code>NullPointerException</code> 异常。<code>null</code> 值在这里通常用于作为特殊值返回（表格中的第三列），代表 <code>poll</code> 失败。所以，如果允许插入 <code>null</code> 值的话，那获取的时候，就不能很好地用 <code>null</code> 来判断到底是代表失败，还是获取的值就是 <code>null</code> 值。  </p><p>&emsp;&emsp;前面说了，它实现了 <code>java.util.Collection</code> 接口。例如，我们可以用 <code>remove(x)</code> 来删除任意一个元素，但是，这类操作通常并不高效，所以尽量只在少数的场合使用，比如一条消息已经入队，但是需要做取消操作的时候。  </p><p>&emsp;&emsp;<code>BlockingQueue</code> 的实现都是线程安全的，但是批量的集合操作如 <code>addAll</code>, <code>containsAll</code>, <code>retainAll</code> 和 <code>removeAll</code> 不一定是原子操作。如 <code>addAll(c)</code> 有可能在添加了一些元素后中途抛出异常，此时 <code>BlockingQueue</code> 中已经添加了部分元素，这个是允许的，取决于具体的实现。  </p><p>&emsp;&emsp;<code>BlockingQueue</code> 在生产者-消费者的场景中，是支持多消费者和多生产者的，说的其实就是线程安全问题。<code>BlockingQueue</code> 是一个比较简单的线程安全容器。作为<code>BlockingQueue</code>的使用者，我们再也不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，因为这一切<code>BlockingQueue</code>都给你一手包办了。  </p><p>&emsp;&emsp;这里补充一点，一般所说的无界队列，并不是大小不限制的，只是它的大小是<code>Integer.MAX_VALUE</code>，即int类型能够表示的最大值，也可以理解为大小是<strong>(2的31次方)-1</strong></p><p><code>BlockingQueue</code>家庭中实现类主要有以下几个，常用的是<code>ArrayBlockingQueue</code>与<code>LinkedBlockingQueue</code>，下文将会对这两个类作详细介绍。其他成员将简单介绍。</p><ul><li>ArrayBlockingQueue</li><li>LinkedBlockingQueue</li><li>DelayQueue：</li><li>PriorityBlockingQueue</li><li>SynchronousQueue</li></ul><blockquote><p>参考：<a href="http://www.importnew.com/28053.html" target="_blank" rel="noopener">解读 Java 并发队列 BlockingQueue</a></p></blockquote><h5 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h5><h6 id="Introdution"><a href="#Introdution" class="headerlink" title="Introdution"></a>Introdution</h6><p>&emsp;&emsp;有界的阻塞队列，内部实现是一个数组，有边界的意思是：容量是有限的，必须初始化时，指定它的容量大小，以先进先出的方式存储数据，最新插入的对象在尾部，最先移除的对象在头部。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 队列元素 */</span></span><br><span class="line">    <span class="keyword">final</span> Object[] items;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 下一次读取操作的位置, poll, peek or remove */</span></span><br><span class="line">    <span class="keyword">int</span> takeIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 下一次写入操作的位置, offer, or add */</span></span><br><span class="line">    <span class="keyword">int</span> putIndex;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 元素数量 */</span></span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Concurrency control uses the classic two-condition algorithm</span></span><br><span class="line"><span class="comment">     * found in any textbook.</span></span><br><span class="line"><span class="comment">     * 它采用一个 ReentrantLock 和相应的两个 Condition 来实现。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Main lock guarding all access */</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Condition for waiting takes */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Condition for waiting puts */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 指定大小 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(capacity, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 指定容量大小与指定访问策略 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fair 指定独占锁是公平锁还是非公平锁。非公平锁的吞吐量比较高，公平锁可以保证每次都是等待最久的线程获取到锁；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity, <span class="keyword">boolean</span> fair)</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 指定容量大小、指定访问策略与最初包含给定集合中的元素 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c 将此集合中的元素在构造方法期间就先添加到队列中 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity, <span class="keyword">boolean</span> fair,</span></span></span><br><span class="line"><span class="function"><span class="params">                              Collection&lt;? extends E&gt; c)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的类结构，可以知道：</p><ol><li><code>ArrayBlockingQueue</code> 在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行。按照实现原理来分析，<code>ArrayBlockingQueue</code>完全可以采用分离锁，从而实现生产者和消费者操作的完全并行运行。Doug Lea之所以没这样去做，也许是因为<code>ArrayBlockingQueue</code>的数据写入和获取操作已经足够轻巧，以至于引入独立的锁机制，除了给代码带来额外的复杂性外，其在性能上完全占不到任何便宜。   </li><li>通过构造函数得知，参数<code>fair</code>控制对象的内部锁是否采用公平锁，默认采用非公平锁。  </li><li>items、takeIndex、putIndex、count等属性并没有使用volatile修饰，这是因为访问这些变量（通过方法获取）使用都是在锁块内，并不存在可见性问题，如<code>size()</code>  </li><li>另外有个独占锁lock用来对出入队操作加锁，这导致同时只有一个线程可以访问入队出队。  </li></ol><h6 id="Put"><a href="#Put" class="headerlink" title="Put()"></a>Put()</h6><p>&emsp;&emsp;我们通过源码，分析一下<code>Put</code>方法的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 进行入队操作 */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="comment">//e为null，则抛出NullPointerException异常</span></span><br><span class="line">    checkNotNull(e);</span><br><span class="line">    <span class="comment">//获取独占锁</span></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * lockInterruptibly()</span></span><br><span class="line"><span class="comment">     * 获取锁定，除非当前线程为interrupted</span></span><br><span class="line"><span class="comment">     * 如果锁没有被另一个线程占用并且立即返回，则将锁定计数设置为1。</span></span><br><span class="line"><span class="comment">     * 如果当前线程已经保存此锁，则保持计数将递增1，该方法立即返回。</span></span><br><span class="line"><span class="comment">     * 如果锁被另一个线程保持，则当前线程将被禁用以进行线程调度，并且处于休眠状态</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//空队列</span></span><br><span class="line">        <span class="keyword">while</span> (count == items.length)</span><br><span class="line">            <span class="comment">//进行条件等待处理</span></span><br><span class="line">            notFull.await();</span><br><span class="line">        <span class="comment">//入队操作</span></span><br><span class="line">        enqueue(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//释放锁</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 真正的入队 */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(E x)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert lock.getHoldCount() == 1;</span></span><br><span class="line">    <span class="comment">// assert items[putIndex] == null;</span></span><br><span class="line">    <span class="comment">//获取当前元素</span></span><br><span class="line">    <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</span><br><span class="line">    <span class="comment">//按下一个插入索引进行元素添加</span></span><br><span class="line">    items[putIndex] = x;</span><br><span class="line">    <span class="comment">// 计算下一个元素应该存放的下标，可以理解为循环队列</span></span><br><span class="line">    <span class="keyword">if</span> (++putIndex == items.length)</span><br><span class="line">        putIndex = <span class="number">0</span>;</span><br><span class="line">    count++;</span><br><span class="line">    <span class="comment">//唤起消费者</span></span><br><span class="line">    notEmpty.signal();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;这里由于在操作共享变量前加了锁，所以不存在内存不可见问题，加过锁后获取的共享变量都是从主内存获取的，而不是在CPU缓存或者寄存器里面的值，释放锁后修改的共享变量值会刷新会主内存中。  </p><p>&emsp;&emsp;另外这个队列是使用循环数组实现，所以计算下一个元素存放下标时候有些特殊。另外<code>insert</code>后调用 <code>notEmpty.signal();</code>是为了激活调用<code>notEmpty.await();</code>阻塞后放入<code>notEmpty</code>条件队列中的线程。  </p><h6 id="Take"><a href="#Take" class="headerlink" title="Take()"></a>Take()</h6><p>&emsp;&emsp;我们通过源码，分析一下<code>take</code>方法的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">            notEmpty.await();</span><br><span class="line">        <span class="keyword">return</span> dequeue();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert lock.getHoldCount() == 1;</span></span><br><span class="line">    <span class="comment">// assert items[takeIndex] != null;</span></span><br><span class="line">    <span class="keyword">final</span> Object[] items = <span class="keyword">this</span>.items;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    E x = (E) items[takeIndex];</span><br><span class="line">    items[takeIndex] = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (++takeIndex == items.length)</span><br><span class="line">        takeIndex = <span class="number">0</span>;</span><br><span class="line">    count--;</span><br><span class="line">    <span class="comment">//这里有些特殊</span></span><br><span class="line">    <span class="keyword">if</span> (itrs != <span class="keyword">null</span>)</span><br><span class="line">        <span class="comment">//保持队列中的元素和迭代器的元素一致</span></span><br><span class="line">        itrs.elementDequeued();</span><br><span class="line">    notFull.signal();</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>&emsp;&emsp;从上面分析可以知道，其实<code>Put</code>操作与<code>Take</code>操作很相似。但是有一点我在上面代码中标识了，继续深入了解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该类的迭代器，所有的迭代器共享数据，队列改变会影响所有的迭代器</span></span><br><span class="line"><span class="keyword">transient</span> Itrs itrs = <span class="keyword">null</span>; <span class="comment">//其存放了目前所创建的所有迭代器。</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 迭代器和它们的队列之间的共享数据，允许队列元素被删除时更新迭代器的修改。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Itrs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">elementDequeued</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert lock.getHoldCount() == 1;</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//队列中数量为0的时候，队列就是空的，会将所有迭代器进行清理并移除</span></span><br><span class="line">            queueIsEmpty();</span><br><span class="line">        <span class="comment">//takeIndex的下标是0，意味着队列从尾中取完了，又回到头部获取</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (takeIndex == <span class="number">0</span>)</span><br><span class="line">            takeIndexWrapped();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当队列为空的时候做的事情</span></span><br><span class="line"><span class="comment">     * 1. 通知所有迭代器队列已经为空</span></span><br><span class="line"><span class="comment">     * 2. 清空所有的弱引用，并且将迭代器置空</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">queueIsEmpty</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将takeIndex包装成0</span></span><br><span class="line"><span class="comment">     * 并且通知所有的迭代器，并且删除已经过期的任何对象（个人理解是置空对象）</span></span><br><span class="line"><span class="comment">     * 也直接的说就是在Blocking队列进行出队的时候，进行迭代器中的数据同步，保持队列中的元素和迭代器的元素是一致的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">takeIndexWrapped</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>分析到这里，就有个疑问了，这个迭代器到底是什么时候生成的呢？而且他在出队时，是判断了迭代器不为空的时候才进行操作，而肯定会存在一种情况，那就是迭代器是空的，并未创建，则不进行操作。</p><p>通过在源码奔走，我找到了相关内容，如下，还是在我们的<code>ArrayBlockingQueue</code>的源码中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从这里知道，在ArrayBlockingQueue对象中调用此方法，才会生成这个对象</span></span><br><span class="line"><span class="comment">//那么就可以理解为，只要并未调用此方法，则ArrayBlockingQueue对象中的Itrs对象则为空</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    Itr() &#123;</span><br><span class="line">        <span class="comment">//这里就是生产它的地方</span></span><br><span class="line">        <span class="comment">//count等于0的时候，创建的这个迭代器是个无用的迭代器，可以直接移除，进入detach模式。</span></span><br><span class="line">        <span class="comment">//否则就把当前队列的读取位置给迭代器当做下一个元素，cursor存储下个元素的位置。</span></span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// assert itrs == null;</span></span><br><span class="line">            cursor = NONE;</span><br><span class="line">            nextIndex = NONE;</span><br><span class="line">            prevTakeIndex = DETACHED;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> takeIndex = ArrayBlockingQueue.<span class="keyword">this</span>.takeIndex;</span><br><span class="line">            prevTakeIndex = takeIndex;</span><br><span class="line">            nextItem = itemAt(nextIndex = takeIndex);</span><br><span class="line">            cursor = incCursor(takeIndex);</span><br><span class="line">            <span class="keyword">if</span> (itrs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                itrs = <span class="keyword">new</span> Itrs(<span class="keyword">this</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                itrs.register(<span class="keyword">this</span>); <span class="comment">// in this order</span></span><br><span class="line">                itrs.doSomeSweeping(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            prevCycles = itrs.cycles;</span><br><span class="line">            <span class="comment">// assert takeIndex &gt;= 0;</span></span><br><span class="line">            <span class="comment">// assert prevTakeIndex == takeIndex;</span></span><br><span class="line">            <span class="comment">// assert nextIndex &gt;= 0;</span></span><br><span class="line">            <span class="comment">// assert nextItem != null;</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h5><h6 id="Introduction-2"><a href="#Introduction-2" class="headerlink" title="Introduction"></a>Introduction</h6><p>&emsp;&emsp;基于链表的阻塞队列，同<code>ArrayListBlockingQueue</code>类似，其内部也维持着一个数据缓冲队列（该队列由一个链表构成），当生产者往队列中放入一个数据时，队列会从生产者手中获取数据，并缓存在队列内部，而生产者立即返回；只有当队列缓冲区达到最大值缓存容量时（<code>LinkedBlockingQueue</code>可以通过构造函数指定该值），才会阻塞生产者队列，直到消费者从队列中消费掉一份数据，生产者线程会被唤醒，反之对于消费者这端的处理也基于同样的原理。  </p><p>&emsp;&emsp;<code>LinkedBlockingQueue</code>之所以能够高效的处理并发数据，还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。<br>&emsp;&emsp;作为开发者，我们需要注意的是，如果构造一个<code>LinkedBlockingQueue</code>对象，而没有指定其容量大小，<code>LinkedBlockingQueue</code>会默认一个类似无限大小的容量（Integer.MAX_VALUE），这样的话，如果生产者的速度一旦大于消费者的速度，也许还没有等到队列满阻塞产生，系统内存就有可能已被消耗殆尽了。  </p><p>&emsp;&emsp;<code>LinkedBlockingQueue</code>是一个使用链表完成队列操作的阻塞队列。链表是单向链表，而不是双向链表。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//队列的容量，指定大小或为默认值Integer.MAX_VALUE</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> capacity;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//元素的数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//队列头节点，始终满足head.item==null</span></span><br><span class="line">    <span class="keyword">transient</span> Node&lt;E&gt; head;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//队列的尾节点，始终满足last.next==null</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> Node&lt;E&gt; last;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Lock held by take, poll, etc */</span></span><br><span class="line">    <span class="comment">//出队的锁：take, poll, peek 等读操作的方法需要获取到这个锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Wait queue for waiting takes */</span></span><br><span class="line">    <span class="comment">//当队列为空时，保存执行出队的线程：如果读操作的时候队列是空的，那么等待 notEmpty 条件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty = takeLock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Lock held by put, offer, etc */</span></span><br><span class="line">    <span class="comment">//入队的锁：put, offer 等写操作的方法需要获取到这个锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Wait queue for waiting puts */</span></span><br><span class="line">    <span class="comment">//当队列满时，保存执行入队的线程：如果写操作的时候队列是满的，那么等待 notFull 条件</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull = putLock.newCondition();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//传说中的无界队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedBlockingQueue</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">//传说中的有界队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedBlockingQueue</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (capacity &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        last = head = <span class="keyword">new</span> Node&lt;E&gt;(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//传说中的无界队列</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LinkedBlockingQueue</span><span class="params">(Collection&lt;? extends E&gt; c)</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 链表节点类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">        E item;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * One of:</span></span><br><span class="line"><span class="comment">         * - 真正的继任者节点</span></span><br><span class="line"><span class="comment">         * - 这个节点，意味着继任者是head.next</span></span><br><span class="line"><span class="comment">         * - 空，意味着没有后继者（这是最后一个节点）</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node&lt;E&gt; next;</span><br><span class="line"></span><br><span class="line">        Node(E x) &#123; item = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;通过其构造函数，得知其可以当做无界队列也可以当做有界队列来使用。</p><p>这里用了两把锁分别是<code>takeLock</code>与<code>putLock</code>、两个Condition分别是<code>notEmpty</code>与<code>notFull</code>，它们是这样搭配的：</p><ul><li>如果要获取（take）一个元素，需要获取 takeLock 锁，但是获取了锁还不够，如果队列此时为空，还需要队列不为空（notEmpty）这个条件（Condition）。  </li><li>如果要插入（put）一个元素，需要获取 putLock 锁，但是获取了锁还不够，如果队列此时已满，还需要队列不是满的（notFull）这个条件（Condition）。  </li></ul><p><strong>注意：</strong>从上面的构造函数中，这里会初始化一个空的头结点，那么第一个元素入队的时候，队列中就会有两个元素。读取元素时，也总是获取头节点后面的一个节点。count 的计数值不包括这个头节点。</p><h6 id="Put-1"><a href="#Put-1" class="headerlink" title="Put()"></a>Put()</h6><p>通过源码分析，透析<code>put()</code>方法的流程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将指定元素插入到此队列的尾部，如有必要，则等待空间变得可用。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="comment">// 如果你纠结这里为什么是 -1，可以看看 offer 方法。这就是个标识成功、失败的标志而已。</span></span><br><span class="line">        <span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">        <span class="comment">//包装成node节点</span></span><br><span class="line">        Node&lt;E&gt; node = <span class="keyword">new</span> Node&lt;E&gt;(e);</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">this</span>.putLock;</span><br><span class="line">        <span class="keyword">final</span> AtomicInteger count = <span class="keyword">this</span>.count;</span><br><span class="line">        <span class="comment">//获取锁定</span></span><br><span class="line">        putLock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/** 如果队列满，等待 notFull 的条件满足。 */</span></span><br><span class="line">            <span class="keyword">while</span> (count.get() == capacity) &#123;</span><br><span class="line">                notFull.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//入队</span></span><br><span class="line">            enqueue(node);</span><br><span class="line">            <span class="comment">//原子性自增</span></span><br><span class="line">            c = count.getAndIncrement();</span><br><span class="line">            <span class="comment">// 如果这个元素入队后，还有至少一个槽可以使用，调用 notFull.signal() 唤醒等待线程。</span></span><br><span class="line">            <span class="comment">// 哪些线程会等待在 notFull 这个 Condition 上呢？</span></span><br><span class="line">            <span class="keyword">if</span> (c + <span class="number">1</span> &lt; capacity)</span><br><span class="line">                notFull.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//解锁</span></span><br><span class="line">            putLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果 c == 0，那么代表队列在这个元素入队前是空的（不包括head空节点），</span></span><br><span class="line">        <span class="comment">// 那么所有的读线程都在等待 notEmpty 这个条件，等待唤醒，这里做一次唤醒操作</span></span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>)</span><br><span class="line">            signalNotEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 链接节点在队列末尾 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">enqueue</span><span class="params">(Node&lt;E&gt; node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert putLock.isHeldByCurrentThread();</span></span><br><span class="line">        <span class="comment">// assert last.next == null;</span></span><br><span class="line">        <span class="comment">// 入队的代码非常简单，就是将 last 属性指向这个新元素，并且让原队尾的 next 指向这个元素</span></span><br><span class="line">        <span class="comment">//last.next = node;</span></span><br><span class="line">        <span class="comment">//last = node;</span></span><br><span class="line">        <span class="comment">// 这里入队没有并发问题，因为只有获取到 putLock 独占锁以后，才可以进行此操作</span></span><br><span class="line">        last = last.next = node;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待PUT信号</span></span><br><span class="line"><span class="comment">     * 仅在 take/poll 中调用</span></span><br><span class="line"><span class="comment">     * 也就是说：元素入队后，如果需要，则会调用这个方法唤醒读线程来读</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">signalNotFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">this</span>.putLock;</span><br><span class="line">        putLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            notFull.signal();<span class="comment">//唤醒</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            putLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Take-1"><a href="#Take-1" class="headerlink" title="Take"></a>Take</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        E x;</span><br><span class="line">        <span class="keyword">int</span> c = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">final</span> AtomicInteger count = <span class="keyword">this</span>.count;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock takeLock = <span class="keyword">this</span>.takeLock;</span><br><span class="line">        <span class="comment">//首先，需要获取到 takeLock 才能进行出队操作</span></span><br><span class="line">        takeLock.lockInterruptibly();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果队列为空，等待 notEmpty 这个条件满足再继续执行</span></span><br><span class="line">            <span class="keyword">while</span> (count.get() == <span class="number">0</span>) &#123;</span><br><span class="line">                notEmpty.await();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//// 出队</span></span><br><span class="line">            x = dequeue();</span><br><span class="line">            <span class="comment">//count 进行原子减 1</span></span><br><span class="line">            c = count.getAndDecrement();</span><br><span class="line">            <span class="comment">// 如果这次出队后，队列中至少还有一个元素，那么调用 notEmpty.signal() 唤醒其他的读线程</span></span><br><span class="line">            <span class="keyword">if</span> (c &gt; <span class="number">1</span>)</span><br><span class="line">                notEmpty.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            takeLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (c == capacity)</span><br><span class="line">            signalNotFull();</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 出队</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> E <span class="title">dequeue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// assert takeLock.isHeldByCurrentThread();</span></span><br><span class="line">        <span class="comment">// assert head.item == null;</span></span><br><span class="line">        Node&lt;E&gt; h = head;</span><br><span class="line">        Node&lt;E&gt; first = h.next;</span><br><span class="line">        h.next = h; <span class="comment">// help GC</span></span><br><span class="line">        head = first;</span><br><span class="line">        E x = first.item;</span><br><span class="line">        first.item = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Signals a waiting put. Called only from take/poll.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">signalNotFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> ReentrantLock putLock = <span class="keyword">this</span>.putLock;</span><br><span class="line">        putLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            notFull.signal();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            putLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="与-ArrayBlockingQueue-对比"><a href="#与-ArrayBlockingQueue-对比" class="headerlink" title="与 ArrayBlockingQueue 对比"></a>与 ArrayBlockingQueue 对比</h6><ol><li><code>ArrayBlockingQueue</code>是共享锁，粒度大，入队与出队的时候只能有1个被执行，不允许并行执行。<code>LinkedBlockingQueue</code>是独占锁，入队与出队是可以并行进行的。当然这里说的是读和写进行并行，两者的读读与写写是不能并行的。总结就是<code>LinkedBlockingQueue</code>可以并发读写。    </li><li><code>ArrayBlockingQueue</code>和<code>LinkedBlockingQueue</code>间还有一个明显的不同之处在于，前者在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的Node对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于GC的影响还是存在一定的区别。  </li></ol><h5 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h5><p>&emsp;&emsp;<code>DelayQueue</code>是一个无界阻塞队列，只有在延迟期满时才能从中提取元素。该队列的头部是延迟期满后保存时间最长的<code>Delayed</code>元素。<br>&emsp;&emsp;存放到<code>DelayDeque</code>的元素必须继承<code>Delayed</code>接口。<code>Delayed</code>接口使对象成为延迟对象，它使存放在<code>DelayQueue</code>类中的对象具有了激活日期，该接口强制执行下列两个方法：  </p><ol><li>CompareTo(Delayed o)：Delayed接口继承了Comparable接口，因此有了这个方法  </li><li>getDelay(TimeUnit unit):这个方法返回到激活日期的剩余时间，时间单位由单位参数指定  </li></ol><p><strong>使用场景</strong></p><ol><li>关闭空闲连接。服务器中，有很多客户端的连接，空闲一段时间之后需要关闭之。  </li><li>缓存。缓存中的对象，超过了空闲时间，需要从缓存中移出。  </li><li>任务超时处理。在网络协议滑动窗口请求应答式交互时，处理超时未响应的请求。  </li></ol><h5 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h5><h5 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h5><p>&emsp;&emsp;它是一个特殊的队列，它的名字其实就蕴含了它的特征 – - 同步的队列。为什么说是同步的呢？这里说的并不是多线程的并发问题，而是因为当一个线程往队列中写入一个元素时，写入操作不会立即返回，需要等待另一个线程来将这个元素拿走；同理，当一个读线程做读操作的时候，同样需要一个相匹配的写线程的写操作。这里的 Synchronous 指的就是读线程和写线程需要同步，一个读线程匹配一个写线程，同理一个写线程匹配一个读线程。  </p><p>&emsp;&emsp;不像<code>ArrayBlockingQueue</code>、<code>LinkedBlockingDeque</code>之类的阻塞队列依赖AQS实现并发操作，<code>SynchronousQueue</code>直接使用CAS实现线程的安全访问。  </p><p>&emsp;&emsp;较少使用到 <code>SynchronousQueue</code> 这个类，不过它在线程池的实现类 <code>ScheduledThreadPoolExecutor</code> 中得到了应用。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronousQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">//内部栈</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferStack</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Transferer</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br><span class="line">    <span class="comment">//内部队列</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Transferer</span>&lt;<span class="title">E</span>&gt; </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SynchronousQueue</span><span class="params">()</span> </span>&#123;<span class="keyword">this</span>(<span class="keyword">false</span>);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SynchronousQueue</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">        transferer = fair ? </span><br><span class="line">                 <span class="keyword">new</span> TransferQueue&lt;E&gt;() : <span class="keyword">new</span> TransferStack&lt;E&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以参考：<a href="https://blog.csdn.net/yanyan19880509/article/details/52562039" target="_blank" rel="noopener">java并发之SynchronousQueue实现原理</a></p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>JAVA并发编程与高并发解决方案 - 并发编程 一</title>
      <link href="/2018/06/21/concurrency/concurrency-1/"/>
      <url>/2018/06/21/concurrency/concurrency-1/</url>
      <content type="html"><![CDATA[<h1 id="JAVA并发编程与高并发解决方案-并发编程-一"><a href="#JAVA并发编程与高并发解决方案-并发编程-一" class="headerlink" title="JAVA并发编程与高并发解决方案 - 并发编程 一"></a>JAVA并发编程与高并发解决方案 - 并发编程 一</h1><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">作者</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">2018.4.8</td><td style="text-align:center">huangz</td><td style="text-align:center">首次发布</td></tr></tbody></table><h2 id="学习内容简介"><a href="#学习内容简介" class="headerlink" title="学习内容简介"></a>学习内容简介</h2><h3 id="并发编程知识点"><a href="#并发编程知识点" class="headerlink" title="并发编程知识点"></a>并发编程知识点</h3><p>线程安全、线程封闭、线程调度、同步容器、并发容器、AQS、J.U.C etc.</p><h3 id="高并发解决方案知识点"><a href="#高并发解决方案知识点" class="headerlink" title="高并发解决方案知识点"></a>高并发解决方案知识点</h3><p>扩容、缓存、队列、拆分、服务降级与熔断、数据库切库、分库分表 etc.</p><h3 id="面对人群"><a href="#面对人群" class="headerlink" title="面对人群"></a>面对人群</h3><p>从事JAVA开发的程序员</p><ol><li>对并发和高并发不了解的程序员</li><li>对并发和高并发了解的程序员</li><li>已经是编程高手的程序员</li></ol><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>构建完整的并发与高并发知识体系</p><ol><li>系统的学习到并发编程的知识及高并发处理思路</li><li>修正之前在不知不觉中犯过的一些并发方面的问题</li><li>规避以后开发中一些并发方面的问题</li><li>对你的知识进行一次更为全面的梳理，完善知识体系</li><li>学习到大量的实际场景案例分析和代码优化技巧</li><li>让你对并发编程和高并发处理有一个质的提升</li><li>将节省你准备面试的时间，让你的面试更有针对性</li><li>可以借鉴一些之前可能没有想到过的解决问题思路和手段</li></ol><h3 id="课程内容安排"><a href="#课程内容安排" class="headerlink" title="课程内容安排"></a>课程内容安排</h3><h4 id="基础知识讲解与核心知识准备"><a href="#基础知识讲解与核心知识准备" class="headerlink" title="基础知识讲解与核心知识准备"></a>基础知识讲解与核心知识准备</h4><p><img src="images/1.jpg" alt=""></p><h4 id="并发及并发的线程安全处理"><a href="#并发及并发的线程安全处理" class="headerlink" title="并发及并发的线程安全处理"></a>并发及并发的线程安全处理</h4><p><img src="images/2.jpg" alt=""></p><h4 id="高并发处理的思路及手段"><a href="#高并发处理的思路及手段" class="headerlink" title="高并发处理的思路及手段"></a>高并发处理的思路及手段</h4><p><img src="images/3.jpg" alt=""></p><h4 id="涉及知识技能"><a href="#涉及知识技能" class="headerlink" title="涉及知识技能"></a>涉及知识技能</h4><p>总体架构：Spring Boot、Maven、JDK8、MySQL</p><p>基础组件：Mybatis、Guava、Lombok、Redis、Kafka</p><p>高级组件(类)：Joda-Time、Atomic包、J.U.C、AQS、ThreadLocal、RateLimiter、Hystrix、ThreadPool、shardbatis、curator、elastic-job …</p><h3 id="场景举例-实现计数功能"><a href="#场景举例-实现计数功能" class="headerlink" title="场景举例 - 实现计数功能"></a>场景举例 - 实现计数功能</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5000个请求，每次只允许200个请求处理</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//线程池 + 信号量 进行请求的模拟</span></span><br><span class="line">        <span class="comment">//新建线程池</span></span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">//定义信号量(后面会进行讲解)</span></span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    add();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"count:&#123;&#125;"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击运行结果，每一次结果都是不一样的，并且没有达到结果为5000，而是小于5000</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//每次允许threadTotal请求进行处理</span></span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, map.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        map.put(i, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击运行结果，每一次结果都是不一样的，并且Map.size()没有达到结果为5000，而是小于5000</p><p>若上面两个例子中，<code>threadTotal = 1</code> 则会得到我们预期的结果，<code>size() = clientTotal = 5000</code></p><p>总结：当一个线程运行可以得到我们预期的结果，但当多个线程同时进行操作，就会出现并发问题，导致结果异常</p><h3 id="Slf4j"><a href="#Slf4j" class="headerlink" title="@Slf4j"></a>@Slf4j</h3><h4 id="slf4j"><a href="#slf4j" class="headerlink" title="slf4j"></a>slf4j</h4><p>对于一个maven项目。首先要在pom.xml中加入以下依赖项：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>slf4j就是众多接口的集合，它不负责具体的日志实现，只在编译时负责寻找合适的日志系统进行绑定。具体有哪些接口，全部都定义在slf4j-api中。</li><li>slf4j-log4j12是链接slf4j-api和log4j中间的适配器。它实现了slf4j-apiz中StaticLoggerBinder接口，从而使得在编译时绑定的是slf4j-log4j12的getSingleton()方法</li><li>log4j是具体的日志系统。通过slf4j-log4j12初始化Log4j，达到最终日志的输出。</li><li>lombok：一个插件，封装了log的get和set，可以直接使用log来输出日志信息。</li></ol><h4 id="slf4j-1"><a href="#slf4j-1" class="headerlink" title="@slf4j"></a>@slf4j</h4><p>如果不想每次都写<code>private  final Logger logger = LoggerFactory.getLogger(XXX.class);</code> 可以用注解<code>@Slf4j</code></p><p>引入依赖，使用方式如上场景举例中代码示例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="解决IDEA使用-Slf4j注入后找不到变量log"><a href="#解决IDEA使用-Slf4j注入后找不到变量log" class="headerlink" title="解决IDEA使用@Slf4j注入后找不到变量log"></a>解决IDEA使用@Slf4j注入后找不到变量log</h4><p>方式一：</p><p>idea中File –&gt; settings –&gt; Plugins –&gt; 点击”Browse repositories” –&gt; 搜索lombok –&gt; Install Lombok Plugins</p><p>若插件安装失败，则可以进行以下安装方式</p><p>方式二：</p><p>去idea官网下载插件 <a href="http://plugins.jetbrains.com/plugin/6317-lombok-plugin" target="_blank" rel="noopener">Lombok Plugin</a> ，到下载区，选择合适的版本下载，我的idea版本为2017.1.4，因此选择插件的版本号为<code>0.16-2017.1.4</code> 下载到文件为<code>lombok-plugin-0.16.zip</code></p><p>注：idea任何插件的版本都需要跟idea版本对应，否则会提示安装失败(本人踩过的坑)</p><p>安装步骤：解压下载到的zip文件，拷贝解压文件到idea安装目录下的<code>plugins</code>文件下，打开idea中的 plugins &gt; 选择 install plugin from disk &gt; 选择刚刚拷贝进去的文件夹中的jar，即可进行安装，安装完成后需要进行重启。</p><h3 id="Lombox"><a href="#Lombox" class="headerlink" title="Lombox"></a>Lombox</h3><h4 id="简介："><a href="#简介：" class="headerlink" title="简介："></a>简介：</h4><p><a href="https://projectlombok.org/" target="_blank" rel="noopener">Lombok</a>项目是一个java库，可以自动插入到您的编辑器和构建工具中，让您的java变得更加精彩。切勿再次写入另一个getter或equals方法。提前访问未来的Java功能<code>val</code>，等等。</p><p>除了官方介绍中，并不多相关文章，特意挑了<a href="https://blog.csdn.net/l_blackeagle/article/details/62041873" target="_blank" rel="noopener">一篇文章中相关内容</a></p><blockquote><p>lombok 提供了简单的注解的形式来帮助我们简化消除一些必须有但显得很臃肿的 java 代码。特别是相对于 POJO。<br>简单来说，比如我们新建了一个类，然后在其中写了几个字段，然后通常情况下我们需要手动去建立getter和setter方法啊，构造函数啊之类的，lombok的作用就是为了省去我们手动创建这些代码的麻烦，它能够在我们编译源码的时候自动帮我们生成这些方法。</p><p>lombok能够达到的效果就是在源码中不需要写一些通用的方法，但是在编译生成的字节码文件中会帮我们生成这些方法，这就是lombok的神奇作用。</p><p>虽然有人可能会说IDE里面都自带自动生成这些方法的功能，但是使用lombok会使你的代码看起来更加简洁，写起来也更加方便。</p></blockquote><h4 id="常用的注解"><a href="#常用的注解" class="headerlink" title="常用的注解"></a>常用的注解</h4><p>@slf4j、@Setter、@Getter、@NoArgsConstructor(注解在类上：为类提供一个无参的构造方法)、@AllArgsConstructor(注解在类上；为类提供一个全参的构造方法)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//注解在类上：为类提供一个无参的构造方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span><span class="comment">//注解在类上；为类提供一个全参的构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@Getter @Setter 注解在属性上；为属性提供 setting 方法 getting方法</span></span><br><span class="line">    <span class="meta">@Setter</span> <span class="meta">@Getter</span> <span class="keyword">private</span> <span class="keyword">int</span> pid;</span><br><span class="line">    <span class="meta">@Setter</span> <span class="meta">@Getter</span> <span class="keyword">private</span> String pname;</span><br><span class="line">    <span class="meta">@Setter</span> <span class="meta">@Getter</span> <span class="keyword">private</span> <span class="keyword">int</span> sage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基础知识讲解与核心知识准备-1"><a href="#基础知识讲解与核心知识准备-1" class="headerlink" title="基础知识讲解与核心知识准备"></a>基础知识讲解与核心知识准备</h2><h3 id="并发与高并发基本概念"><a href="#并发与高并发基本概念" class="headerlink" title="并发与高并发基本概念"></a>并发与高并发基本概念</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>​    并发：同时拥有两个或者多个线程，如果程序在单核处理器运行，多个线程将交替地换入或者换出内存，这些线程是同时”存在”的，每个线程都处于执行过程中的某个状态，如果运行在多核处理器上，此时，程序中的每个线程都将会分配到一个处理器核上，因此可以同时运行</p><p>​    高并发：高并发（High Concurrency）是互联网分布式系统架构设计中必须考虑的因素之一，它通常指，通过设计保证系统能够同时并行处理很多请求</p><h4 id="对比："><a href="#对比：" class="headerlink" title="对比："></a>对比：</h4><p>​    并发：多个线程操作相同的资源，保证线程安全，合理使用资源</p><p>​    高并发：服务能同时处理很多请求，提高程序性能；如系统集中收到大量的请求（12306的抢票系统），导致系统在某段时间类执行大量的操作，包括对资源的请求、数据库的操作等等，如果高并发处理不好，不仅仅降低用户的体验度，请求时间变长，同时也可能导致系统宕机，甚至导致OOM（Out Of Memory）异常，如果想要系统适应高并发状态，就要有多个方面进行系统优化，包括硬件、网络、系统架构、开发语言的选取、数据结构的应用、算法的优化等等，这个时候谈论的是如何提供现有程序的性能，对高并发场景提供一些解决方案、手段等等</p><h3 id="CPU多级缓存"><a href="#CPU多级缓存" class="headerlink" title="CPU多级缓存"></a>CPU多级缓存</h3><p>​    在多线程并发环境下，如果不采取特殊手段，普通的累加结果很可能是错的。错的原因可能涉及到计算机原理以及JAVA方面的一些知识。</p><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p><img src="images/4.jpg" alt=""></p><p>Main Memory : 主存</p><p>Cache : 高速缓存，数据的读取和存储都经过此告诉缓存</p><p>CPU Core :  CPU核心</p><p>Bus :  系统总线</p><p>​    CUP Core 与 Cache 之间有一条快速通道，Main Memory 与 Cache 关联在 Bus 上，同时 Bus 还用于其他组件    的通信，在Cache出现不久后，系统变得更加复杂，Cache与Main Memory中速度的差异拉大，直到加入另一级的Cache，新加入的Cache 比 一级 Cache 更大，但是更慢，由于从加大一级Cache的做法，从经济上是行不通的，所以有了二级Cache，甚至已经有三级 Cache</p><h4 id="为什么需要CPU-CACHE"><a href="#为什么需要CPU-CACHE" class="headerlink" title="为什么需要CPU CACHE?"></a>为什么需要CPU CACHE?</h4><p>​    CPU的频率太快了，快到主存跟不上，这样在处理器时钟周期内，CPU常常需要等待主存，浪费资源，这样会使CPU花费很长时间等待数据到来或把数据写入内存。<strong>所以Cache的出现，是为了环境CPU和内存之间速度的不匹配问题（结构：CPU - &gt; CACHE - &gt; MEMORY）</strong></p><h4 id="CPU-CACHE-意义"><a href="#CPU-CACHE-意义" class="headerlink" title="CPU CACHE 意义"></a>CPU CACHE 意义</h4><p>​    缓存的容量远远小于主存，因此出现缓存不命中的情况在所难免，既然缓存不能包含CPU所需要的所有数据，那么Cache的存在真的有意义吗?</p><p>CPU缓存存在的意义分两点（局部性原理）：</p><ol><li>时间局部性：如果某个数据被访问，那么在不久的将来它很可能被再次访问</li><li>空间局限性：如果某个数据被访问，那么与它相邻的数据很快也可能被访问</li></ol><p>​       缓存的工作原理是当CPU要读取一个数据时，首先从缓存中查找，如果找到就立即读取并送给CPU处理；如果没有找到，就用相对慢的速度内存中读取并送给CPU处理，同时把这个数据所在的数据块调入缓存中，可以使得以后对整块数据的读取都从缓存中进行，不必再调用内存。</p><pre><code>正是这样的读取机制使CPU读取缓存的命中率非常高（大多数CPU可达90%左右），也就是说CPU下一次要读取的数据90%都在缓存中，大约10%需要从内存读取。</code></pre><h4 id="缓存一致性（MESI）"><a href="#缓存一致性（MESI）" class="headerlink" title="缓存一致性（MESI）"></a>缓存一致性（MESI）</h4><p>​    缓存一致性用于保证多个CPU Cache之间缓存共享数据的一致性，定义了Cache Line四种状态，而CPU对Cache的四种操作，可能会产生不一致的状态，因此缓存控制器监听到本地操作和远程操作的时候 ，需要对Cache Line作出相应的修改，从而保证数据在多个缓存之间的一致性</p><p>​    Cache Line ： 是cache与内存数据交换的最小单位，根据操作系统一般是32byte或64byte。在MESI协议中，状态可以是M、E、S、I，地址则是cache line中映射的内存地址，数据则是从内存中读取的数据。</p><p>​    MESI其实是四种状态的缩写：M（modify）修改、E（exclusive）独占、S（shared）共享、I（invalid）失效。</p><p>​    状态间的相互转换关系：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">M</th><th style="text-align:center">E</th><th style="text-align:center">S</th><th style="text-align:center">I</th></tr></thead><tbody><tr><td style="text-align:center">M</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">E</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">S</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">I</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr></tbody></table><p>​    Cache 操作： MESI协议中，每个cache的控制器不仅知道自己的操作（local read和local write），通过监听也知道其他CPU中cache的操作（remote read和remote write）。对于自己本地缓存有的数据，CPU仅需要发起local操作，否则发起remote操作，从主存中读取数据，cache控制器通过总线监听，仅能够知道其他CPU发起的remote操作，但是如果local操作会导致数据不一致性，cache控制器会通知其他CPU的cache控制器修改状态。</p><blockquote><p>参考文章：<a href="https://blog.csdn.net/reliveit/article/details/50450136" target="_blank" rel="noopener">【并发编程】CPU cache结构和缓存一致性（MESI协议）</a></p></blockquote><h4 id="乱序执行优化"><a href="#乱序执行优化" class="headerlink" title="乱序执行优化"></a>乱序执行优化</h4><p>​    处理器为提高运算速度而做出违背代码原有顺序的优化</p><p>举个例子：</p><ol><li>计算 a <em> b ，a =10 ，b = 200 ，则 result = a </em> b = 2000</li><li>代码编写顺序：a=10 -&gt; b=200 -&gt; result = a * b</li><li><p>CPU乱序执行优化可能会发生执行顺序为：b=200 -&gt; a=10 -&gt; result = a * b</p><pre><code>CPU乱序执行优化不会对结果造成影响，在单核时代，处理器保证做出的优化，不会导致执行的结果远离预期的目标，但是在多核环境下并非如此。首先在多核环境中，同时会有多个核执行指令，每个核的指定都可能会被乱序优化，另外，处理器还引用了L1、L2等缓存机制，没个核都有自己的缓存，这就导致了逻辑次序上后写入内存的数据，未必真的最后写入，最终带来了这样的一个问题：如果我们不做任何防护措施，处理器最终得到的结果和我们逻辑得出的结果大不相同。比如我们在其中的一个核中执行数据写入操作，并在最后写一个标记，用来标记数据已经准备好了，然后从另外一个核上，通过那个标志，来判断数据是否已经就绪，这种做法它就存在一定的风险，标记位先被写入，但数据操作并未完成（可能是计算为完成、也可能是数据没有从缓存刷新到主存当中）， 最终导致另外的核使用了错误的数据。</code></pre></li></ol><h3 id="Java-内存模型（Java-Memory-Model，JMM）"><a href="#Java-内存模型（Java-Memory-Model，JMM）" class="headerlink" title="Java 内存模型（Java Memory Model，JMM）"></a>Java 内存模型（Java Memory Model，JMM）</h3><p>​    CPU缓存一致性和乱序执行优化，在多核多并发下，需要额外做很多的事情，才能保证程序的执行，符合我们的预期。那么JVM（Java Virtual Machine (Java虚拟机)）是如何解决这些问题的?为了屏蔽掉各种硬件和操作系统的内存访问差异，实现让Java程序在各种平台下都能达到一致的并发效果，JMV规范中定义了JMM （Java Memory Model (Java 内存模型)）。 JMM是一种规范，它规范了JVM与计算机内存是如何协同工作的，它规定一个线程如何和何时可以看到其他线程修改过的共享变量的值，以及在必须时如何同步的访问共享变量。</p><h4 id="JVM内存分配概念"><a href="#JVM内存分配概念" class="headerlink" title="JVM内存分配概念"></a>JVM内存分配概念</h4><p><img src="images/5.jpg" alt=""></p><center>图 JVM内存分配概念</center><p>JVM内存分配的两个概念：Stack（栈）和Heap（堆）。</p><p>​    Java中的Heap是运行时数据区，由垃圾回收负责，它的优势是动态的分配内存大小，生存期也不必事先告诉编    译器，在运行时动态分配内存，Java的垃圾收集器，会自动回收不再使用的数据。但是也有缺点，由于是要在运行时动态分配内存，因此存取速度相对较慢。</p><p>​    Java中的Stack优势是存取速度比Heap要快，仅次于计算机中的寄存器，栈中的数据是可以共享的，但是它的缺点是，存在栈中数据的大小和生存期必须是确定的，缺乏灵活性，主要存放一些基本类型的变量。</p><p>​    JMM要求调用栈和本地变量存放在线程栈中，对象存放在堆上。一个本地变量可能指向一个对象的引用，引用这个本地变量是存放在线程栈上，而对象本身是存放在堆上的。一个对象可能包含方法，这些方法可能包含本地变量，这些本地变量还是存放在线程栈中，即使这些方法所属的对象存放在堆上。一个对象的成员变量可能会随着这个对象自身存放在堆上，不管这个成员对象是原始类型还是引用类型，静态成员变量跟随着类的定义一起存放在堆上。存放在堆上的对象，可以被所持有对这个对象引用线程的访问。</p><p>​    当一个线程可以访问一个对象的时候，它也可以访问该对象的成员变量，如果两个线程同时调用同一个对象的同一个方法，将会都访问该对象的成员变量，但是每一个线程都拥有了这个成员变量的私有拷贝。</p><h4 id="计算机内存硬件架构"><a href="#计算机内存硬件架构" class="headerlink" title="计算机内存硬件架构"></a>计算机内存硬件架构</h4><p><img src="images/6.jpg" alt=""></p><center>计算机硬件架构简单图示</center><p>​    CPU，一台现代计算机拥有两个或多个CPU，其中一些CPU还有多核，从这一点可以看出，在一个有两个或多个CPU的现代计算机上，同时运行多个线程是非常有可能的，而且每个CPU在某一个时刻，运行一个线程是肯定没有问题的，这意味着，如果Java程序是多线程的，在Java程序中，每个CPU上一个线程是可能同时并发执行的。</p><p>​    CPU Refisters（寄存器），每个CPU都包含一系列的寄存器，它们是CPU内存的基础，CPU在寄存器中执行操作的速度远大于在主存上执行的速度，这是因为CPU访问寄存器的速度远大于主存。</p><p>​    Cache（高速缓存），由于计算机的存储设备与处理器运算速度之间有着几个数量级的差距，所以现代计算机系统都不得不加入一层读写速度尽可能接近处理器运算速度的高级缓存来作为内存与处理器之间的缓冲，将运算需要使用到的数据复制到缓存中，让运算能快速的进行，当运算结束后，在从缓存同步到内存中。这样处理器就无需等待缓慢的内存读写，CPU访问缓存层的速度快于访问主存的速度，但通常比访问内部寄存器的速度要慢。</p><p>​    Main Memory（主存），随机存取存储器（random access memory，RAM）又称作“随机存储器”，一个计算机包含一个主存，所有的CPU都可以访问主存，主存通常比CPU中的缓存大得多。</p><h4 id="JVM-与-Computer"><a href="#JVM-与-Computer" class="headerlink" title="JVM 与 Computer"></a>JVM 与 Computer</h4><p><img src="images/7.jpg" alt=""></p><p>​    JVM 与 Computer 内存架构存在差异，硬件内存并无区分栈与堆，对于硬件而言，所有的栈和堆都分布在主内存中，可能会出现在高速缓存、寄存器中。     </p><h4 id="内存模型抽象结构"><a href="#内存模型抽象结构" class="headerlink" title="内存模型抽象结构"></a>内存模型抽象结构</h4><p><img src="images/8.jpg" alt=""></p><h4 id="Java内存模型-同步八种操作"><a href="#Java内存模型-同步八种操作" class="headerlink" title="Java内存模型 - 同步八种操作"></a>Java内存模型 - 同步八种操作</h4><ol><li>lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态</li><li>unlock（解锁）：作用于主内存的变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li><li>read（读取）：作用于主内存的变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用</li><li>load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值存放工作内存的变量副本中</li><li>use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎</li><li>assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量</li><li>store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传递到主内存中，以便随后的write的操作</li><li>write（写入）：作用于主内存的变量，它把store操作从工作内存中的一个变量的值传送到主内存的变量中</li></ol><h4 id="Java内存模型-同步规则"><a href="#Java内存模型-同步规则" class="headerlink" title="Java内存模型 - 同步规则"></a>Java内存模型 - 同步规则</h4><ol><li>如果要把一个变量从主内存中复制到工作内存，就需要按顺序地执行read和load操作，如果把变量从工作内存中同步回主内存中，就要按顺序地执行store和write操作，但Java内存模型只要求上述操作必须按顺序执行，而没有保证是连续执行</li><li>不允许read和load、store和write操作之一单独出现</li><li>不允许一个线程丢弃它的最近assign的操作，即变量在工作内存中改变了之后必须同步到主内存中</li><li>不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中</li><li>一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施use和store操作之前，必须先执行过了assign和load操作</li><li>一个变量在同一时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次与执行lock后，只有执行相同次数的unlock，变量才会被解锁。lock和unlock必须成对出现</li><li>如果一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行load或assign操作初始化变量的值</li><li>如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量</li><li>对一个变量执行unlock操作之前，必须先把变量同步到主内存中（执行store和write操作）</li></ol><h4 id="Java-内存模型-同步操作与规则"><a href="#Java-内存模型-同步操作与规则" class="headerlink" title="Java 内存模型 - 同步操作与规则"></a>Java 内存模型 - 同步操作与规则</h4><p><img src="images/9.jpg" alt=""></p><h3 id="并发的优势与风险"><a href="#并发的优势与风险" class="headerlink" title="并发的优势与风险"></a>并发的优势与风险</h3><p><img src="images/10.jpg" alt=""></p><h2 id="并发编程与线程安全"><a href="#并发编程与线程安全" class="headerlink" title="并发编程与线程安全"></a>并发编程与线程安全</h2><p>​    代码所在的进程，有多个线程同时运行，而这些线程可能会同时运行同一段代码，如果每次运行结果和单线程预期结果一致，变量值也和预期一致，则认为这是线程安全的。简单的说，就是并发环境下，得到我们期望正确的结果。对应的一个概念就是线程不安全，就是不提供数据访问保护，有可能出现多个线程，先后更改数据，造成所得到的数据是脏数据，也可能是计算错误。</p><h3 id="环境搭建准备"><a href="#环境搭建准备" class="headerlink" title="环境搭建准备"></a>环境搭建准备</h3><h4 id="项目架构"><a href="#项目架构" class="headerlink" title="项目架构"></a>项目架构</h4><p>Spring Boot 项目，<a href="https://start.spring.io" target="_blank" rel="noopener">https://start.spring.io</a></p><h4 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h4><p>​    为方便理解，自定义一些注解，方便理解。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程里用来标记【线程安全】的类或者写法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE) <span class="comment">//作用域，作用于类上</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE) <span class="comment">//注解存在的范围，编译时忽略</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ThreadSafe &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给默认值，方便扩展</span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程里用来标记【线程不安全】的类或者写法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotThreadSafe &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程里用来标记【推荐】的类或者写法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Recommend &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 课程里用来标记【不推荐】的类或者写法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.SOURCE)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> NotRecommend &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并发模拟"><a href="#并发模拟" class="headerlink" title="并发模拟"></a>并发模拟</h3><h4 id="模拟准备工具介绍"><a href="#模拟准备工具介绍" class="headerlink" title="模拟准备工具介绍"></a>模拟准备工具介绍</h4><ol><li>Postman：Http请求模拟工具</li><li>Apache Bench（AB）：Apache附带的工具，测试网站性能</li><li>JMeter：Apache组织开发的压力测试工具</li><li>代码模拟：Semaphore、CountDownLatch等</li></ol><p>服务准备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Postman"><a href="#Postman" class="headerlink" title="Postman"></a>Postman</h4><p>​    Postman本身是一个Http模拟工具，在并发上并不是专业的</p><p>使用步骤：</p><ol><li>打开Postman访问<code>localhost:8080/test</code>，完成一次服务访问</li><li>找到Collections标签，新建concurrency文件夹，将刚访问的连接Save文件夹中，并点击文件夹进入测试准备</li><li>配置参数，点击Run Concurrency，成功后查看结果</li></ol><p><img src="images/postman-1.png" alt=""></p><p><img src="images/postman-2.png" alt=""></p><p><img src="images/postman-3.png" alt=""></p><h4 id="Apache-Bench-AB"><a href="#Apache-Bench-AB" class="headerlink" title="Apache Bench(AB)"></a>Apache Bench(AB)</h4><p>​    Apache Bench 是 Apache 服务器自带的一个web压力测试工具，简称ab。ab又是一个命令行工具，对发起负载的本机要求很低，根据ab命令可以创建很多的并发访问线程，模拟多个访问者同时对某一URL地址进行访问，因此可以用来测试目标服务器的负载压力。总的来说ab工具小巧简单，上手学习较快，可以提供需要的基本性能指标，但是没有图形化结果，不能监控。</p><h5 id="Windows-7-安装"><a href="#Windows-7-安装" class="headerlink" title="Windows 7 安装"></a>Windows 7 安装</h5><ol><li>首先需要安装Apache服务器，<a href="https://www.apachelounge.com/download/" target="_blank" rel="noopener">点击下载</a></li><li>将下载<code>httpd-2.4.33-win64-VC15.zip</code>解压</li><li>配置环境变量，这里为了方便，我没有配置，直接进入bin目录，运行控制台</li><li>输入ab命名，若出现以下提示则环境准备成功</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">D:\apache\Apache24\bin&gt;ab</span><br><span class="line">ab: wrong number of arguments</span><br><span class="line">Usage: ab [options] [http://]hostname[:port]/path</span><br><span class="line">Options are:</span><br><span class="line">    -n requests     Number of requests to perform</span><br><span class="line">    -c concurrency  Number of multiple requests to make at a time</span><br><span class="line">    -t timelimit    Seconds to max. to spend on benchmarking</span><br><span class="line">                    This implies -n 50000</span><br><span class="line">    -s timeout      Seconds to max. <span class="built_in">wait</span> <span class="keyword">for</span> each response</span><br><span class="line">                    Default is 30 seconds</span><br><span class="line">    -b windowsize   Size of TCP send/receive buffer, <span class="keyword">in</span> bytes</span><br><span class="line">    -B address      Address to <span class="built_in">bind</span> to when making outgoing connections</span><br><span class="line">    -p postfile     File containing data to POST. Remember also to <span class="built_in">set</span> -T</span><br><span class="line">    -u putfile      File containing data to PUT. Remember also to <span class="built_in">set</span> -T</span><br><span class="line">    -T content-type Content-type header to use <span class="keyword">for</span> POST/PUT data, eg.</span><br><span class="line">                    <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">                    Default is <span class="string">'text/plain'</span></span><br><span class="line">    -v verbosity    How much troubleshooting info to <span class="built_in">print</span></span><br><span class="line">    -w              Print out results <span class="keyword">in</span> HTML tables</span><br><span class="line">    -i              Use HEAD instead of GET</span><br><span class="line">    -x attributes   String to insert as table attributes</span><br><span class="line">    -y attributes   String to insert as tr attributes</span><br><span class="line">    -z attributes   String to insert as td or th attributes</span><br><span class="line">    -C attribute    Add cookie, eg. <span class="string">'Apache=1234'</span>. (repeatable)</span><br><span class="line">    -H attribute    Add Arbitrary header line, eg. <span class="string">'Accept-Encoding: gzip'</span></span><br><span class="line">                    Inserted after all normal header lines. (repeatable)</span><br><span class="line">    -A attribute    Add Basic WWW Authentication, the attributes</span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -P attribute    Add Basic Proxy Authentication, the attributes</span><br><span class="line">                    are a colon separated username and password.</span><br><span class="line">    -X proxy:port   Proxyserver and port number to use</span><br><span class="line">    -V              Print version number and <span class="built_in">exit</span></span><br><span class="line">    -k              Use HTTP KeepAlive feature</span><br><span class="line">    -d              Do not show percentiles served table.</span><br><span class="line">    -S              Do not show confidence estimators and warnings.</span><br><span class="line">    -q              Do not show progress when doing more than 150 requests</span><br><span class="line">    -l              Accept variable document length (use this <span class="keyword">for</span> dynamic pages)</span><br><span class="line">    -g filename     Output collected data to gnuplot format file.</span><br><span class="line">    -e filename     Output CSV file with percentages served</span><br><span class="line">    -r              Don<span class="string">'t exit on socket receive errors.</span></span><br><span class="line"><span class="string">    -m method       Method name</span></span><br><span class="line"><span class="string">    -h              Display usage information (this message)</span></span><br></pre></td></tr></table></figure><p>提示：若启动ab.exe时候，提示缺少某种依赖库，则需要安装该依赖库才可进行启动</p><h5 id="运行演示"><a href="#运行演示" class="headerlink" title="运行演示"></a>运行演示</h5><p>运行命令：<code>ab -n 1000 -c 50 http://localhost:8080/test</code></p><p>命令解析：-n 请求总次数 -c 并发数 URL地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">D:\apache\Apache24\bin&gt;ab -n 1000 -c 50 http://localhost:8080/test</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1826891 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking localhost (be patient)</span><br><span class="line">Completed 100 requests</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 300 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 500 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 700 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 900 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Finished 1000 requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:</span><br><span class="line">Server Hostname:        localhost</span><br><span class="line">Server Port:            8080</span><br><span class="line"></span><br><span class="line">Document Path:          /test</span><br><span class="line">Document Length:        4 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      50                 # 并发量</span><br><span class="line">Time taken for tests:   0.834 seconds      # 整个测试使用的时间</span><br><span class="line">Complete requests:      1000               # 完成请求数</span><br><span class="line">Failed requests:        0                  # 失败请求数</span><br><span class="line">Total transferred:      136000 bytes       # 所有请求响应数据的总和（包括Http 头信息和正文数据长度，服务器流向应用层数据总长度）</span><br><span class="line">HTML transferred:       4000 bytes   # 所有响应数据，正文数据总和</span><br><span class="line">Requests per second:    1198.97 [#/sec] (mean) # 吞吐率，与并发数相关</span><br><span class="line">Time per request:       41.702 [ms] (mean) # 用户平均请求等待时间</span><br><span class="line">Time per request:       0.834 [ms] (mean, across all concurrent requests) # 服务器平均请求等待时间</span><br><span class="line">Transfer rate:          159.24 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    0   0.8      0      24</span><br><span class="line">Processing:     1   39  87.7     14     584</span><br><span class="line">Waiting:        0   31  75.8     11     558</span><br><span class="line">Total:          2   39  87.7     14     584</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta">  50%</span><span class="bash">     14</span></span><br><span class="line"><span class="meta">  66%</span><span class="bash">     20</span></span><br><span class="line"><span class="meta">  75%</span><span class="bash">     27</span></span><br><span class="line"><span class="meta">  80%</span><span class="bash">     31</span></span><br><span class="line"><span class="meta">  90%</span><span class="bash">     50</span></span><br><span class="line"><span class="meta">  95%</span><span class="bash">    220</span></span><br><span class="line"><span class="meta">  98%</span><span class="bash">    395</span></span><br><span class="line"><span class="meta">  99%</span><span class="bash">    464</span></span><br><span class="line"><span class="meta"> 100%</span><span class="bash">    584 (longest request)</span></span><br></pre></td></tr></table></figure><h4 id="JMeter"><a href="#JMeter" class="headerlink" title="JMeter"></a>JMeter</h4><p>​    相对于AB来说，JMeter更加强大。Apache JMeter是Apache组织开发的基于Java的压力测试工具。JMeter 可以用于对服务器、网络或对象模拟巨大的负载，来自不同压力类别下测试它们的强度和分析整体性能。</p><blockquote><p>参考文章：<a href="https://www.cnblogs.com/ceshisanren/p/5639895.html" target="_blank" rel="noopener">JMeter使用入门</a></p></blockquote><h5 id="Windows-7-安装-1"><a href="#Windows-7-安装-1" class="headerlink" title="Windows 7 安装"></a>Windows 7 安装</h5><ol><li>进入官网<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">下载</a></li><li>将下载后的<code>apache-jmeter-4.0.zip</code>解压</li><li>进入解压目录中的bin目录，运行<code>jmeter.bat</code></li></ol><h5 id="运行演示-1"><a href="#运行演示-1" class="headerlink" title="运行演示"></a>运行演示</h5><h6 id="创建线程组"><a href="#创建线程组" class="headerlink" title="创建线程组"></a>创建线程组</h6><p><img src="images/jmeter-1.png" alt=""></p><p><img src="images/jmeter-2.png" alt=""></p><p>Number of Threads(users) : 线程数、虚拟用户数</p><p>Ramp-Up Period(in second) : 虚拟用户增长时长。理解：假设现在有一个考勤系统 ，所有的用户都不是同时登陆的，实际使用场景是在某段时间内，用户会陆陆续续的进行考勤，而这个参数大概理解就是这个意思，考勤是从8点40分到9点10分，那么这个参数就是30分钟*60秒，意味着指定用户请求在规定时间内完成请求。</p><p>Loop Count : 循环次数，每个虚拟用户循环的次数，如果勾选Forever则会一直进行下去，默认是1</p><h6 id="添加请求"><a href="#添加请求" class="headerlink" title="添加请求"></a>添加请求</h6><p><img src="images/jmeter-3.png" alt=""></p><p><img src="images/jmeter-4.png" alt=""></p><p>为请求添加结果监听：图形结果（Graph Results）与查看结果树（View Results Tree）</p><p><img src="images/jmeter-5.png" alt=""></p><h6 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h6><p><img src="images/jmeter-6.png" alt=""></p><p><img src="images/jmeter-7.png" alt=""></p><h4 id="代码模拟"><a href="#代码模拟" class="headerlink" title="代码模拟"></a>代码模拟</h4><h5 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h5><p>​    CountDownLatch类位于java.util.concurrent包下，利用它可以实现类似计数器的功能。比如有一个任务A，它要等待其他4个任务执行完毕之后才能执行，此时就可以利用CountDownLatch来实现这种功能了。</p><p><img src="images/countdownlatch-1.png" alt=""></p><p>假设计数器的值为3，线程A调用await()方法之后，当前线程就进入了等待状态， 之后在其他线程中执行countDown()，计数器就会 - 1 ，该操作线程继续执行，当计数器从3变成0之后，线程A继续执行。</p><p>CountDownLatch这个类可以阻塞线程，保证线程在某种特定的条件下，继续执行。</p><h5 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h5><p><img src="images/semaphore-1.png" alt=""></p><p>​    Semaphore翻译成字面意思为 信号量，Semaphore可以阻塞进程并且控制同时访问的线程个数，通过 acquire() 获取一个许可，如果没有就等待，而 release() 释放一个许可。Semaphore其实和锁有点类似，它一般用于控制对某组资源的访问权限。</p><p>​    CountDownLatch与Semaphore在使用时，通常会与线程池配合使用</p><p>​    Semaphore适合控制并发数，CountDownLatch比较适合保证线程执行完后再执行其他处理，因此模拟并发时，使用两者结合起来是最好的。</p><h5 id="并发模拟代码实现"><a href="#并发模拟代码实现" class="headerlink" title="并发模拟代码实现"></a>并发模拟代码实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span> <span class="comment">//线程不安全的</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrencyTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="comment">//定义信号量</span></span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="comment">//定义计数器闭锁</span></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire(); <span class="comment">//获取信号量，否则会阻塞</span></span><br><span class="line">                    add();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown(); <span class="comment">//每执行一次则减1</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown(); <span class="comment">//关闭线程池</span></span><br><span class="line">        log.info(<span class="string">"count:&#123;&#125;"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//线程不安全</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>JAVA并发编程与高并发解决方案 - 并发编程 四</title>
      <link href="/2018/06/21/concurrency/concurrency-4/"/>
      <url>/2018/06/21/concurrency/concurrency-4/</url>
      <content type="html"><![CDATA[<h1 id="JAVA并发编程与高并发解决方案-并发编程-四"><a href="#JAVA并发编程与高并发解决方案-并发编程-四" class="headerlink" title="JAVA并发编程与高并发解决方案 - 并发编程 四"></a>JAVA并发编程与高并发解决方案 - 并发编程 四</h1><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">作者</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">2018.4.8</td><td style="text-align:center">huangz</td><td style="text-align:center">J.U.C之AQS</td></tr></tbody></table><h3 id="J-U-C-之-AQS"><a href="#J-U-C-之-AQS" class="headerlink" title="J.U.C 之 AQS"></a>J.U.C 之 AQS</h3><h4 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h4><p>&emsp;&emsp;AbStractQueuedSynchronizer类，简称AQS，一个用来构建锁和同步器的框架 。从JDK1.5开始，引入了并发包，也就是J.U.C，大大提高了JAVA程序的并发性能，而AQS则是J.U.C的核心，是并发类中核心部分，它提供一个基于FIFO队列，这个队列可以构建锁或其他相关的同步装置的基础框架。  </p><p>&emsp;&emsp;AQS底层数据结构：</p><p><img src="images/aqs-1.png" alt=""></p><p>底层采用双向链表，是队列的一种实现，因此可以当做是一个队列。其中<code>Sync queue</code>即同步队列，它是双向链表，包括<code>hean</code>结点（主要用作后续的调度）与<code>tail</code>结点。<code>Condition queue</code>不是必须的，单向链表，只有在需要使用到<code>condition</code>的时候才会存在这个单向链表，并且可能存在多个<code>Condition queue</code></p><h4 id="Design"><a href="#Design" class="headerlink" title="Design"></a>Design</h4><ul><li>使用Node实现FIFO队列，可以用于构建锁或者其他同步装置的基础框架  </li><li>利用了一个int类型表示状态。在AQS中，存在一个<code>state</code>成员变量，基于AQS有一个同步组件<code>ReentrantLock</code>，在这个组件中，<code>state</code>表示获取锁的线程数，假如<code>state == 0</code>表示无线程获取锁，<code>state == 1</code>表示已有线程获取锁，<code>state &gt; 1</code>表示锁的数量  </li><li>使用方法是继承。AQS的设计是基于模板方法，使用需要继承AQS，并覆写其中的方法。  </li><li>子类通过继承并通过实现它的方法管理其状态{acquire() 和 release()}的方法操纵状态  </li><li>可以同时实现排它锁和共享锁模式（独占、共享）。它的所有子类中，要么实现并使用它的独占功能API，要么实现共享锁的功能，而不会同时使用两套API。即便是它比较有名的子类<code>ReentrantReadWirteLock</code>也是通过两个内部类读锁和写锁分别使用两套API实现的。AQS在功能上，有独占控制和共享控制两种功能。  </li><li>在LOCK包中的相关锁(常用的有ReentrantLock、 ReadWriteLock)都是基于AQS来构建.然而这些锁都没有直接来继承AQS,而是定义了一个Sync类去继承AQS，因为锁面向的是使用用户,而同步器面向的则是线程控制,那么在锁的实现中聚合同步器而不是直接继承AQS就可以很好的隔离二者所关注的事情.  </li></ul><p>基于以上设计，AQS具体实现的大致思路：</p><p>&emsp;&emsp;AQS内部维护了一个CLH队列来管理锁，线程首先会尝试获取锁，如果失败，会将当前线程以及等待状态等信息包装成Node结点加入同步队列（Sync queue）中。接着不断循环尝试获取锁，条件是当前结点为head直接后继才会尝试，如果失败则会阻塞自己，直到自己被唤醒；而当持有锁的线程，释放锁的时候，会唤醒队列中后继线程。基于这些基础的设计和思路，JDK提供了许多基于AQS的子类。  </p><p>独占式锁过程总结：  </p><p>&emsp;&emsp;AQS的模板方法acquire通过调用子类自定义实现的tryAcquire获取同步状态失败后-&gt;将线程构造成Node节点(创建一个独占式节点 )(addWaiter)-&gt;将Node节点添加到同步队列对尾(addWaiter)-&gt;节点以自旋的方法获取同步状态(acquirQueued)。在节点自旋获取同步状态时，只有其前驱节点是头节点的时候才会尝试获取同步状态，如果该节点的前驱不是头节点或者该节点的前驱节点是头节点单获取同步状态失败，则判断当前线程需要阻塞，如果需要阻塞则需要被唤醒过后才返回。在释放同步状态时，同步器调用tryRelease(int arg)方法释放同步状态，然后唤醒头节点的后继节点。   </p><p>共享式锁过程总结：  </p><p>&emsp;&emsp;共享式获取与独占式获取的最主要区别在于同一时刻能否有多个线程同时获取到同步状态。通过调用acquireShared(int arg)方法可以共享式得获取同步状态。   </p><p>&emsp;&emsp;同步器调用<code>tryAcquireShared(int arg)</code>方法尝试获取同步状态，其返回值为int类型，当返回值大于0时，表示能够获取同步状态。因此，在共享式获取的自旋过程中，成功获取同步状态并且退出自旋的条件就是<code>tryAcquireShared(int arg)</code>方法返回值大于等于0。共享式释放同步状态状态是通过调用<code>releaseShared(int arg)</code>方法   </p><p>&emsp;&emsp;<code>CountDownLatch</code>、<code>ReentrantReadWriteLock</code>、<code>Semaphore</code>等都是共享式获取同步状态的。   </p><h4 id="同步队列结构分析"><a href="#同步队列结构分析" class="headerlink" title="同步队列结构分析"></a>同步队列结构分析</h4><p>&emsp;&emsp;本小节内容引用于<a href="https://blog.csdn.net/fjse51/article/details/54694714" target="_blank" rel="noopener">AQS实现分析</a> </p><p><img src="images/syn-queue-1.png" alt=""></p><p>&emsp;&emsp;同步器中包含了两个节点类型的引用，一个指向头节点(head)，一个指向尾节点(tail),没有获取到锁的线程，加入到队列的过程必须保证线程安全，因此同步器提供了一个基于CAS的设置尾节点的方法<code>CompareAndSetTail(Node expect,Node update)</code>,它需要传递当前线程认为的尾节点和当前节点，只有设置成功后，当前节点才能正式与之前的尾节点建立关联。  </p><p>&emsp;&emsp;同步器将结点加入到同步队列的过程：  </p><p><img src="images/syn-queue-2.png" alt=""></p><p>&emsp;&emsp;同步队列遵循FIFO，首节点是获取锁成功的节点，首节点的线程在释放锁时，将会唤醒后继节点，而后继节点将会在获取到锁时，将自己设置位首节点，设置首节点是由成功获取锁的线程来完成的，由于只有一个线程能够成功获取锁，因此设置首节点不需要CAS操作。 过程如下所示：  </p><p><img src="images/syn-queue-3.png" alt=""></p><h4 id="同步组件概览"><a href="#同步组件概览" class="headerlink" title="同步组件概览"></a>同步组件概览</h4><ul><li>CountDownLatch：是闭锁，通过一个计数来保证线程是否需要一直阻塞</li><li>Semaphore：控制同一时间，并发线程的数目</li><li>CyclicBarrier：和<code>CountDwonLatch</code>相似，能阻塞线程</li><li>ReentrantLock</li><li>Condition：使用时需要<code>ReentrantLock</code></li><li>FutureTask</li></ul><h4 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h4><p>&emsp;&emsp;<code>CountDownLatch</code>是一个同步辅助类，已在第一篇文章中提到。内容通过截图显示：  </p><p><img src="images/countdownlatch-2.png" alt=""></p><p>&emsp;&emsp;构造器中的计数值（count）实际上就是闭锁需要等待的线程数量。这个值只能被设置一次，而且<code>CountDownLatch</code>没有提供任何机制去重新设置这个计数值。   </p><p>&emsp;&emsp;典型的应用：并行计算，当某个任务需要处理运算量非常大，可以将该运算任务拆分为多个子任务，等待所有的子任务完成之后，父任务再拿到所有子任务的运算结果进行汇总。利用<code>CountDownLatch</code>可以保证任务都被处理完才去执行最终的结果运算，过程中每一个线程都可以看做是一个子任务。  </p><p>&emsp;&emsp;案例：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> threadCount = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"> <span class="comment">//定义线程池</span></span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line"><span class="comment">//定义闭锁实例</span></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadCount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            <span class="comment">//每次放入一个线程</span></span><br><span class="line">            exec.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    test(threadNum);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">//计算器完成一次</span></span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        <span class="comment">//所有子任务执行完后才会执行</span></span><br><span class="line">        log.info(<span class="string">"finish"</span>);</span><br><span class="line">        <span class="comment">//线程池不再使用需要关闭</span></span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, threadNum);</span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>CountDownLatch</code>还提供在指定时间内完成的条件（超出时间没有完成，完成多少算多少），如果等待时间没有完成，则继续执行。通过<code>countDownLatch.await(int timeout,TimeUnit timeUnit);</code>设置，第一个参数没超时时间，第二个参数为时间单位  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountDownLatchExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> threadCount = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(threadCount);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            exec.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    test(threadNum);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await(<span class="number">10</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="comment">//线程未完成，就可以输出以下信息</span></span><br><span class="line">        log.info(<span class="string">"finish"</span>);</span><br><span class="line">        <span class="comment">//执行关闭线程池，内部先把所有正在工作的线程完成后，再关闭</span></span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//等待时间</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, threadNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><h5 id="INTRODUCTION"><a href="#INTRODUCTION" class="headerlink" title="INTRODUCTION"></a>INTRODUCTION</h5><p>&emsp;&emsp;<code>Semaphore</code>经常用于限制获取某种资源的线程数量，其内部是基于AQS的共享模式，AQS的状态表示许可证的数量，在许可证数量不够时，线程将会被挂起；而一旦有一个线程释放一个资源，那么就有可能重新唤醒等待队列中的线程继续执行。 已在第一篇文章中提到。内容通过截图显示：  </p><p><img src="images/semaphore-2.png" alt=""></p><h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><p>&emsp;&emsp;Semaphore可以用于做流量控制，特别公用资源有限的应用场景，比如数据库连接。假如有一个需求，要读取几万个文件的数据，因为都是IO密集型任务，我们可以启动几十个线程并发的读取，但是如果读到内存后，还需要存储到数据库中，而数据库的连接数只有10个，这时我们必须控制只有十个线程同时获取数据库连接保存数据，否则会报错无法获取数据库连接。这个时候，我们就可以使用Semaphore来做流控   </p><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreExample1</span> </span>&#123;</span><br><span class="line"><span class="comment">//总共有20个线程数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> threadCount = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line"><span class="comment">//定义信号量，并且制定每次可用的许可数量</span></span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            exec.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire(); <span class="comment">// 获取一个许可</span></span><br><span class="line">                    test(threadNum);</span><br><span class="line">                    semaphore.release(); <span class="comment">// 释放一个许可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, threadNum);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;从上面的输出结果，每次输出一组日志，每一组日志有三条记录，直到所有线程执行完毕。使用<code>Semaphore</code>进行并发的控制，使用相当容易，但是效果很明显。同时也支持获取多个许可，以下例子即是一次只允许一个线程执行：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> threadCount = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            exec.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire(<span class="number">3</span>); <span class="comment">// 获取多个许可</span></span><br><span class="line">                    test(threadNum);</span><br><span class="line">                    <span class="comment">//也可以分别释放许可</span></span><br><span class="line">                    semaphore.release(<span class="number">3</span>); <span class="comment">// 释放多个许可</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, threadNum);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="tryAcquire"><a href="#tryAcquire" class="headerlink" title="tryAcquire"></a>tryAcquire</h5><p>&emsp;&emsp;尝试获取许可，如果获取不成功，则放弃操作，<code>tryAcquire</code>方法提供几个重载  </p><ol><li><code>tryAcquire() : boolean</code></li><li><code>tryAcquire(int permits) : boolean</code>  尝试获取指定数量的许可</li><li><code>tryAcquire(int permits,long timeout,TimeUnit timeUnit) : boolean</code></li><li><code>tryAcquire(long timeout,TimeUnit timeUnit) : boolean</code> 尝试获取许可的时候可以等待一段时间，在指定时间内未获取到许可则放弃</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SemaphoreExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> threadCount = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadCount; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            exec.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//如果获取失败，则不进行操作</span></span><br><span class="line">                    <span class="comment">//semaphore.tryAcquire(5000,TimeUnit.MILLISECONDS)</span></span><br><span class="line">                    <span class="keyword">if</span> (semaphore.tryAcquire()) &#123; <span class="comment">// 尝试获取一个许可</span></span><br><span class="line">                        test(threadNum);</span><br><span class="line">                        semaphore.release(); <span class="comment">// 释放一个许可</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        exec.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, threadNum);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h5><p>&emsp;&emsp;<code>Semaphore</code>有两种模式，公平模式和非公平模式。公平模式就是调用<code>acquire</code>的顺序就是获取许可证的顺序，遵循<code>FIFO</code>；而非公平模式是抢占式的，也就是有可能一个新的获取线程恰好在一个许可证释放时得到了这个许可证，而前面还有等待的线程。   </p><p>&emsp;&emsp;<code>Semaphore</code>构造函数  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Semaphore</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 只指定许可量，构造不公平模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits)</span> </span>&#123;</span><br><span class="line">        sync = <span class="keyword">new</span> NonfairSync(permits);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 指定许可量，并指定模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Semaphore</span><span class="params">(<span class="keyword">int</span> permits, <span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">        sync = fair ? <span class="keyword">new</span> FairSync(permits) : <span class="keyword">new</span> NonfairSync(permits);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Semaphore内部基于AQS的共享模式，所以实现都委托给了Sync类。 </span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NonFair version</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2694183684443567898L</span>;</span><br><span class="line"></span><br><span class="line">        NonfairSync(<span class="keyword">int</span> permits) &#123;</span><br><span class="line">            <span class="comment">// 可以看到调用了setState方法，也就是说AQS中的资源就是许可证的数量。</span></span><br><span class="line">            <span class="keyword">super</span>(permits);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> nonfairTryAcquireShared(acquires);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Fair version</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2014338818796000944L</span>;</span><br><span class="line"></span><br><span class="line">        FairSync(<span class="keyword">int</span> permits) &#123;</span><br><span class="line">            <span class="comment">// 可以看到调用了setState方法，也就是说AQS中的资源就是许可证的数量。</span></span><br><span class="line">            <span class="keyword">super</span>(permits);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="keyword">if</span> (hasQueuedPredecessors())</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">int</span> available = getState();</span><br><span class="line">                <span class="keyword">int</span> remaining = available - acquires;</span><br><span class="line">                <span class="keyword">if</span> (remaining &lt; <span class="number">0</span> ||</span><br><span class="line">                    compareAndSetState(available, remaining))</span><br><span class="line">                    <span class="keyword">return</span> remaining;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><h5 id="Introduction-1"><a href="#Introduction-1" class="headerlink" title="Introduction"></a>Introduction</h5><p><img src="images/cyclicbarrier-1.png" alt=""></p><p>&emsp;&emsp;<code>CyclicBarrier</code>也是一个同步辅助类，它允许一组线程相互等待， 直到到达某个公共的屏障点（common barrier point ），也称之为栅栏点。通过它可以完成多个线程之间相互等待，只有当每个线程都准备就绪后，才能各自继续进行后面的操作。它和<code>CountDownLatch</code>有相似的地方，都是通过计数器实现。当某个线程调用<code>await()</code>方法之后，该线程就进入等待状态，而且计数器是执行加一操作，当计数器值达到初始值（设定的值），因为调用<code>await()</code>方法进入等待的线程，会被唤醒，继续执行他们后续的操作。由于<code>CyclicBarrier</code>在等待线程释放之后，可以进行重用，所以称之为循环屏障。它非常适用于一组线程之间必需经常互相等待的情况。   </p><h5 id="与CountDownLatch比较"><a href="#与CountDownLatch比较" class="headerlink" title="与CountDownLatch比较"></a>与CountDownLatch比较</h5><p>&emsp;&emsp;<strong>相同点：</strong></p><ol><li>都是同步辅助类。</li><li>使用计数器实现</li></ol><p>&emsp;&emsp;<strong>不同点：</strong></p><ol><li><code>CountDownLatch</code>允许一个或多个线程，等待其他一组线程完成操作，再继续执行。 </li><li><code>CyclicBarrier</code>允许一组线程相互之间等待，达到一个共同点，再继续执行。 </li><li><code>CountDownLatch</code>不能被复用</li><li><code>CyclicBarrier</code>适用于更复杂的业务场景，如计算发生错误，通过重置计数器，并让线程重新执行</li><li><code>CyclicBarrier</code>还提供其他有用的方法，比如<code>getNumberWaiting</code>方法可以获得<code>CyclicBarrier</code>阻塞的线程数量。<code>isBroken</code>方法用来知道阻塞的线程是否被中断。 </li></ol><p>&emsp;&emsp;<strong>场景比较：</strong></p><ol><li><code>CyclicBarrier</code> : 好比一扇门，默认情况下关闭状态，堵住了线程执行的道路，直到所有线程都就位，门才打开，让所有线程一起通过。  </li><li><code>CyclicBarrier</code>可以用于多线程计算数据，最后合并计算结果的应用场景。比如我们用一个Excel保存了用户所有银行流水，每个Sheet保存一个帐户近一年的每笔银行流水，现在需要统计用户的日均银行流水，先用多线程处理每个sheet里的银行流水，都执行完之后，得到每个sheet的日均银行流水，最后，再用<code>barrierAction</code>用这些线程的计算结果，计算出整个Excel的日均银行流水。  </li><li><code>CountDownLatch</code> : 监考老师发下去试卷，然后坐在讲台旁边玩着手机等待着学生答题，有的学生提前交了试卷，并约起打球了，等到最后一个学生交卷了，老师开始整理试卷，贴封条  </li></ol><h5 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierExample1</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义屏障，指定数量为5个</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line"><span class="comment">//往线程池中放入线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    race(threadNum);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">race</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; is ready"</span>, threadNum);</span><br><span class="line">        <span class="comment">//如果当前线程就绪，则告诉CyclicBarrier 需要等待</span></span><br><span class="line">        barrier.await();</span><br><span class="line">        <span class="comment">// 当达到指定数量时，继续执行下面代码</span></span><br><span class="line">        log.info(<span class="string">"&#123;&#125; continue"</span>, threadNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>await()</code>支持多个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    race(threadNum);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">race</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; is ready"</span>, threadNum);</span><br><span class="line">       <span class="comment">// 需要异常处理，否则不能进行等待后的代码</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//等待时间，继续执行，但需要进行异常的捕获，才能继续执行</span></span><br><span class="line">            barrier.await(<span class="number">2000</span>, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//尽可能捕捉所有的异常类型</span></span><br><span class="line">            log.warn(<span class="string">"BarrierException"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; continue"</span>, threadNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrier</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 除了指定屏障数外，指定一个Runnable任务，</span></span><br><span class="line"><span class="comment">     * 意味着：在线程到达屏障时，优先执行Runnable任务，方便处理更复杂的业务场景</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties, Runnable barrierAction)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (parties &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">this</span>.parties = parties;</span><br><span class="line">        <span class="keyword">this</span>.count = parties;</span><br><span class="line">        <span class="keyword">this</span>.barrierCommand = barrierAction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//常用的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CyclicBarrier</span><span class="params">(<span class="keyword">int</span> parties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(parties, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">mport java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CyclicBarrierExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CyclicBarrier barrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">5</span>, () -&gt; &#123;</span><br><span class="line">        <span class="comment">//当达到线程屏障数5时，执行任务</span></span><br><span class="line">        <span class="comment">//每满足一次屏障数，则执行</span></span><br><span class="line">        log.info(<span class="string">"callback is running"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> threadNum = i;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            executor.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    race(threadNum);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        executor.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">race</span><span class="params">(<span class="keyword">int</span> threadNum)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; is ready"</span>, threadNum);</span><br><span class="line">        barrier.await();</span><br><span class="line">        log.info(<span class="string">"&#123;&#125; continue"</span>, threadNum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ReentrantLock-与-锁"><a href="#ReentrantLock-与-锁" class="headerlink" title="ReentrantLock 与 锁"></a>ReentrantLock 与 锁</h4><p>&emsp;&emsp;JAVA中的锁主要分两类：<code>synchronized</code>关键字 与 J.U.C所提供的锁。J.U.C中核心的锁即是<code>ReentrantLock</code>，本质上都是lock与unlock的操作 。  </p><h5 id="ReentrantLock-可重入锁-和synchronized区别"><a href="#ReentrantLock-可重入锁-和synchronized区别" class="headerlink" title="ReentrantLock(可重入锁)和synchronized区别"></a>ReentrantLock(可重入锁)和synchronized区别</h5><ul><li><p>可重入性：<code>ReentrantLock</code>字面意思即为再进入锁，称为可重入锁，其实<code>synchronize</code>所使用的锁也是可以重入的，两者关于这个区别不打，它们都是同一个线程进入一次，锁的计数器进行自增，要等到锁的计数器下降为零时，才能释放锁  </p></li><li><p>锁的实现：<code>synchronized</code>依赖于JVM实现无法了解底层源码，而<code>ReentrantLock</code>基于JDK实现通过阅读源码了解实现，区别就类似于操作系统控制实现与用户使用代码实现。  </p></li><li><p>性能区别：在<code>synchronized</code>优化以前，性能比<code>ReentrantLock</code>差很多，但自从<code>synchronize</code>引入了偏向锁、轻量级锁（自选锁）后 ，也就是自循锁后，两者性能差不多（JDK1.6以后，为了减少获得锁和释放锁所带来的性能消耗，提高性能，引入了“轻量级锁”和“偏向锁”）。在两种场景下都可以使用，官方更推荐使用<code>synchronized</code>，因为写法更容易。<code>synchronized</code>的优化其实是借鉴了<code>ReentrantLock</code>中的CAS技术，都是试图在用户态就把加锁问题解决，避免进入内核态的线程阻塞。  </p></li><li><p>功能区别：</p><ul><li>便利性：<code>synchronized</code>更便利，它是由编译器保证加锁与释放。<code>ReentrantLock</code>是需要手动声明与释放锁，所以为了避免忘记手工释放锁造成死锁，所以最好在finally中声明释放锁。   </li><li>锁的细粒度和灵活度：<code>ReentrantLock</code>优于<code>synchronized</code>  </li></ul></li><li><p>ReentrantLock独有的功能  </p><ul><li><code>ReentrantLock</code>可以指定是公平锁还是非公平锁，<code>synchronized</code>只能是非公平锁。（所谓公平锁就是先等待的线程先获得锁）  </li><li>提供了一个Condition类，可以分组唤醒需要唤醒的线程。不像是synchronized要么随机唤醒一个线程，要么全部唤醒。  </li><li>提供能够中断等待锁的线程的机制，通过<code>lock.lockInterruptibly()</code>实现，这种机制<code>ReentrantLock</code>是一种自选锁，通过循环调用CAS操作来实现加锁。性能比较好的原因是避免了进入内核态的阻塞状态。想进办法避免线程进入内核阻塞状态， 是我们分析和理解锁设计的关键  </li></ul></li></ul><p>&emsp;&emsp;如果满足<code>ReentrantLock</code>三个独有的功能，那么必须使用<code>ReentrantLock</code>。其他情况下可以根据性能、业务场景等等来选择<code>synchronized</code>还是<code>ReentrantLock</code>  </p><h5 id="是否要放弃synchronized"><a href="#是否要放弃synchronized" class="headerlink" title="是否要放弃synchronized"></a>是否要放弃synchronized</h5><p>&emsp;&emsp;<code>synchronized</code>能做的，<code>ReentrantLock</code>都能做；而<code>ReentrantLock</code>能做的，而<code>synchronized</code>却不一定做得了。性能方面，<code>ReentrantLock</code>不比<code>synchronized</code>差，那么要放弃使用<code>synchronized</code>？  </p><ol><li>J.U.C包中的锁定类是用于高级情况和高级用户的工具，除非说你对Lock的高级特性有特别清楚的了解以及有明确的需要，或这有明确的证据表明同步已经成为可伸缩性的瓶颈的时候，否则我们还是继续使用synchronized   </li><li>相比较这些高级的锁定类，<code>synchronized</code>还是有一些优势的，比如synchronized不可能忘记释放锁。 在退出<code>synchronized</code>块时，JVM会自动释放锁，会很容易忘记要使用<code>finally</code>释放锁，这对程序非常有害。  </li><li>还有当JVM使用<code>synchronized</code>管理锁定请求和释放时，JVM在生成线程转储时能够包括锁定信息，这些信息对调试非常有价值，它们可以标识死锁以及其他异常行为的来源。 而<code>Lock</code>类知识普通的类，JVM不知道哪个线程具有<code>Lock</code>对象，而且几乎每个开发人员都是比较熟悉<code>synchronized</code>  </li></ol><h5 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明锁的实例,调用构造方法，默认生成一个不公平的锁 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    add();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"count:&#123;&#125;"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//上锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//解锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ReentrantLock</code>提供了许多方法：  </p><ul><li><code>tryLock()</code>：仅在调用时锁定未被另一个线程保持的情况下才获取锁定。  </li><li><code>tryLock(long timeout, TimeUnit unit)</code>：如果锁定在给定的时间内没有被另一个线程保持且当前线程没有被中断，则获取这个锁定。  </li><li><code>lockInterruptbily()</code>：如果当前线程没有被中断的话，那么就获取锁定。如果中断了就抛出异常。  </li><li><code>isLocked()</code>：查询此锁定是否由任意线程保持  </li><li><code>isHeldByCurrentThread</code>：查询当前线程是否保持锁定状态。  </li><li><code>isFair</code>：判断是不是公平锁   </li></ul><h5 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantReadWriteLock</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ReadWriteLock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 内部类提供的读锁 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;</span><br><span class="line">    <span class="comment">/** 内部类提供的读锁 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;我们可以看到<code>RenntrantLock</code>提供了<code>ReadLock</code>与<code>WriteLock</code>，在没有任何读写锁时，才可以取得写入锁。如果进行读取时，可能有另一个写入的需求，为了保持同步，读取锁定。  </p><p>&emsp;&emsp;<code>ReentrantReadWriteLock</code>写锁的互斥的，也就是说，读和读是不互斥的，但读和写、写和写是互斥的。  </p><p>&emsp;&emsp;在没有任何读写锁的时候才可以取得写入锁(悲观读取，容易写线程饥饿)，也就是说如果一直存在读操作，那么写锁一直在等待没有读的情况出现，这样我的写锁就永远也获取不到，就会造成等待获取写锁的线程饥饿。所以，此类不能乱用，在使用是一定要掌握其特性与实现方式。  </p><p>&emsp;&emsp;<code>ReentrantReadWriteLock</code>是<code>Lock</code>的另一种实现方式，我们已经知道了<code>ReentrantLock</code>是一个排他锁，同一时间只允许一个线程访问，而<code>ReentrantReadWriteLock</code>允许多个读线程同时访问，但不允许写线程和读线程、写线程和写线程同时访问。相对于排他锁，提高了并发性。在实际应用中，大部分情况下对共享数据（如缓存）的访问都是读操作远多于写操作，这时<code>ReentrantReadWriteLock</code>能够提供比排他锁更好的并发性和吞吐量。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="comment">//使用场景并不多</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义Map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Data&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明读写锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantReadWriteLock lock = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得读写锁中的读锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock readLock = lock.readLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获得读写锁中的写锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Lock writeLock = lock.writeLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Data <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        readLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(key);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getAllKeys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        readLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> map.keySet();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Data <span class="title">put</span><span class="params">(String key, Data value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可能导致线程饥饿，处于一直等待状态</span></span><br><span class="line">        writeLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> map.put(key, value);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            readLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="StampedLock"><a href="#StampedLock" class="headerlink" title="StampedLock"></a>StampedLock</h5><p>&emsp;&emsp;在JDK1.8中，新增 <code>StampedLock</code> ，它是<code>ReentrantReadWriteLock</code>的增强版，是为了解决<code>ReentrantReadWriteLock</code>的一些不足。正因为<code>ReentrantReadWriteLock</code>出现了读和写是互斥的情况，需要优化，因此就出现了<code>StampedLock</code>！  </p><p>&emsp;&emsp;它控制锁有三种模式（写、读、乐观读）。一个<code>StempedLock</code>的状态是由版本和模式两个部分组成。锁获取方法返回一个数字作为票据（stamp），他用相应的锁状态表示并控制相关的访问。数字0表示没有写锁被锁写访问，在读锁上分为悲观锁和乐观锁。  </p><p>&emsp;&emsp;乐观读：  如果读的操作很多写的很少，我们可以乐观的认为读的操作与写的操作同时发生的情况很少，因此不悲观的使用完全的读取锁定。程序可以查看读取资料之后是否遭到写入资料的变更，再采取之后的措施。  </p><p>&emsp;&emsp;它的思想是读写锁中读不仅不阻塞读，同时也不应该阻塞写。 在读的时候如果发生了写，则应当重读而不是在读的时候直接阻塞写。使用<code>StampedLock</code>就可以实现一种无障碍操作，即读写之间不会阻塞对方，但是写和写之间还是阻塞的</p><p><strong>在源码中，提供一个使用<code>StampedLock</code>案例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockExample4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> x, y;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> StampedLock sl = <span class="keyword">new</span> StampedLock();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">double</span> deltaX, <span class="keyword">double</span> deltaY)</span> </span>&#123; <span class="comment">// an exclusively locked method</span></span><br><span class="line">            <span class="keyword">long</span> stamp = sl.writeLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                x += deltaX;</span><br><span class="line">                y += deltaY;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                sl.unlockWrite(stamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面看看乐观读锁案例</span></span><br><span class="line">        <span class="function"><span class="keyword">double</span> <span class="title">distanceFromOrigin</span><span class="params">()</span> </span>&#123; <span class="comment">// A read-only method</span></span><br><span class="line">            <span class="keyword">long</span> stamp = sl.tryOptimisticRead(); <span class="comment">//获得一个乐观读锁</span></span><br><span class="line">            <span class="keyword">double</span> currentX = x, currentY = y;  <span class="comment">//将两个字段读入本地局部变量</span></span><br><span class="line">            <span class="keyword">if</span> (!sl.validate(stamp)) &#123; <span class="comment">//检查发出乐观读锁后同时是否有其他写锁发生？</span></span><br><span class="line">                stamp = sl.readLock();  <span class="comment">//如果没有，我们再次获得一个读悲观锁</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    currentX = x; <span class="comment">// 将两个字段读入本地局部变量</span></span><br><span class="line">                    currentY = y; <span class="comment">// 将两个字段读入本地局部变量</span></span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    sl.unlockRead(stamp);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> Math.sqrt(currentX * currentX + currentY * currentY);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//下面是悲观读锁案例</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">moveIfAtOrigin</span><span class="params">(<span class="keyword">double</span> newX, <span class="keyword">double</span> newY)</span> </span>&#123; <span class="comment">// upgrade</span></span><br><span class="line">            <span class="comment">// Could instead start with optimistic, not read mode</span></span><br><span class="line">            <span class="keyword">long</span> stamp = sl.readLock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (x == <span class="number">0.0</span> &amp;&amp; y == <span class="number">0.0</span>) &#123; <span class="comment">//循环，检查当前状态是否符合</span></span><br><span class="line">                    <span class="keyword">long</span> ws = sl.tryConvertToWriteLock(stamp); <span class="comment">//将读锁转为写锁</span></span><br><span class="line">                    <span class="keyword">if</span> (ws != <span class="number">0L</span>) &#123; <span class="comment">//这是确认转为写锁是否成功</span></span><br><span class="line">                        stamp = ws; <span class="comment">//如果成功 替换票据</span></span><br><span class="line">                        x = newX; <span class="comment">//进行状态改变</span></span><br><span class="line">                        y = newY;  <span class="comment">//进行状态改变</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果不能成功转换为写锁</span></span><br><span class="line">                        sl.unlockRead(stamp);  <span class="comment">//我们显式释放读锁</span></span><br><span class="line">                        stamp = sl.writeLock();  <span class="comment">//显式直接进行写锁 然后再通过循环再试</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                sl.unlock(stamp); <span class="comment">//释放读锁或写锁</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="如何选择锁？"><a href="#如何选择锁？" class="headerlink" title="如何选择锁？"></a>如何选择锁？</h5><p>&emsp;&emsp;<code>synchronized</code>是JVM层面的，通过底层监控工具监控<code>synchronized</code>的锁定，出现异常会自动释放锁，JVM实现自动的加锁与解锁。  </p><p>&emsp;&emsp;<code>Lock</code>是对象级的锁定，要保证锁一定要被释放。<code>StampedLock</code>对吞吐量有巨大的改进，特别是在读线程越来越多的场景下。</p><ul><li>当只有少量竞争者，使用<code>synchronized</code>是很明智的选择</li><li>竞争者不少但是线程增长的趋势是能预估的，使用<code>ReetrantLock</code></li><li>使用锁一定要看是否适应场景，并不是哪个高级用哪个。</li><li><code>synchronized</code>不会引发死锁，如果<code>Lock</code>使用不当可能造成死锁 </li></ul><h5 id="Condition"><a href="#Condition" class="headerlink" title="Condition"></a>Condition</h5><p>&emsp;&emsp;<code>Condition</code>是一个多线程间协调通信的工具类，在前面AQS底层数据结果分析时提到除了AQS自身队列之外，还有可能存在<code>Condition</code>队列（不存在或者存在一个以上，即多个等待队列）。  </p><p>&emsp;&emsp;使得某个，或者某些线程一起等待某个条件（Condition）,只有当该条件具备( signal 或者 signalAll方法被带调用)时 ，这些等待线程才会被唤醒，从而重新争夺锁。  </p><p>&emsp;&emsp;<code>Condition</code>是同步器<code>AbstractQueuedSynchronized</code>的内部类，因为<code>Condition</code>的操作需要获取相关的锁，所以作为同步器的内部类比较合理。每个<code>Condition</code>的关键。  </p><p>&emsp;&emsp;一个 <code>Condition</code> 包含一个等待队列，<code>Condition</code>拥有首节点<code>firstWaiter</code>和尾节点<code>lastWaiter</code>。当前线程调用<code>Condition.await()</code>方法时，将会以当前线程构造节点，并将节点从尾部加入等待队列。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockExample6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">        <span class="comment">//从ReentrantLock中取得Condition对象</span></span><br><span class="line">        <span class="comment">//此时在AQS中生成Condition队列（可以有多个）</span></span><br><span class="line">        Condition condition = reentrantLock.newCondition();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程1</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//加入AQS的等待队列里</span></span><br><span class="line">                reentrantLock.lock();</span><br><span class="line">                <span class="comment">//输出等待信号动作</span></span><br><span class="line">                log.info(<span class="string">"wait signal"</span>); <span class="comment">// 1</span></span><br><span class="line">                <span class="comment">//线程1沉睡，从AQS等待队列中移除，对应的操作即是锁的释放，然后加入Condition队列中</span></span><br><span class="line">                condition.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">"get signal"</span>); <span class="comment">// 4</span></span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程2</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//因为线程1释放锁，这时得到锁</span></span><br><span class="line">            reentrantLock.lock();</span><br><span class="line">            log.info(<span class="string">"get lock"</span>); <span class="comment">// 2</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//发送信号，这时Condition队列中有线程1的结点，被取出加入AQS等待队列（注意，线程1没有被唤醒）</span></span><br><span class="line">            condition.signalAll();</span><br><span class="line">            log.info(<span class="string">"send signal ~ "</span>); <span class="comment">// 3</span></span><br><span class="line">            <span class="comment">//释放锁会唤醒AQS队列</span></span><br><span class="line">            reentrantLock.unlock();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Condition作为一个条件类，很好的维护了一个等待信号的队列，并在适合的时候，将自身队列中的</span></span><br><span class="line"><span class="comment">     * 结点加入到AQS等待队列中，实现唤醒操作。使得某个线程等待某个条件，实际上使用很少</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
    </entry>
    
    <entry>
      <title>JAVA并发编程与高并发解决方案 - 并发编程 三</title>
      <link href="/2018/06/21/concurrency/concurrency-3/"/>
      <url>/2018/06/21/concurrency/concurrency-3/</url>
      <content type="html"><![CDATA[<h1 id="JAVA并发编程与高并发解决方案-并发编程-三"><a href="#JAVA并发编程与高并发解决方案-并发编程-三" class="headerlink" title="JAVA并发编程与高并发解决方案 - 并发编程 三"></a>JAVA并发编程与高并发解决方案 - 并发编程 三</h1><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">作者</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">2018.4.8</td><td style="text-align:center">huangz</td><td style="text-align:center">线程安全策略</td></tr></tbody></table><h3 id="线程安全策略"><a href="#线程安全策略" class="headerlink" title="线程安全策略"></a>线程安全策略</h3><p>​    创建后状态不能被修改的对象叫作不可变对象。不可变对象天生就是线程安全的。它们的常量（变量）是在构造函数中创建的，既然它们的状态无法被修改，那么这些常量永远不会被改变——不可变对象永远是线程安全的。</p><p>不可变对象需要满足的条件</p><ul><li>对象创建以后其状态就不能修改</li><li>对象所有域都是final类型</li><li>对象是正确创建的（在对象创建期间，this引用没有逸出）</li></ul><h4 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h4><h5 id="final"><a href="#final" class="headerlink" title="final"></a>final</h5><p>​    final关键字：类、方法、变量</p><ul><li>修饰类：不能被继承，final类中的成员属性可以根据需要设置为final，但final类中所有的成员方法都被隐式指定为final方法。一般不建议将类设置为final类型。可以参考String类。</li><li>修饰方法：1）锁定方法不被继承类修改；2）效率</li><li>修饰变量：1）基本数据类型变量，初始化后便不能进行修改；2）引用类型变量，初始化之后不能再指向别的引用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Integer a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String b = <span class="string">"2"</span>;</span><br><span class="line">    <span class="comment">//引用类型不允许引用指向改变，但是对象值还是可以进行修改的  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; map = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        a = 2;              //编译时报错</span></span><br><span class="line"><span class="comment">//        b = "3";            //编译时报错</span></span><br><span class="line"><span class="comment">//        map = Maps.newHashMap();   //编译时报错</span></span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">3</span>);       <span class="comment">//容易引发线程安全问题</span></span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, map.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以修饰参数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        a = 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h5><p>​    java提供Collections工具类，在类中提供了多种不允许修改的方法</p><p>​    Collections.unmodifiableXXX：Collection、List、Set、Map…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; map = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">//处理过后的map是不可以再进行修改的</span></span><br><span class="line">        map = Collections.unmodifiableMap(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//允许操作，但是操作会报错，扔出异常</span></span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, map.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Collections</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function">Map&lt;K,V&gt; <span class="title">unmodifiableMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UnmodifiableMap&lt;&gt;(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnmodifiableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">replace</span><span class="params">(K key, V oldValue, V newValue)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Guava"><a href="#Guava" class="headerlink" title="Guava"></a>Guava</h5><p>​    谷歌的Guava提供类似Java中的Collections</p><p>​    ImmutableXXX：Collection、List、Set、Map…</p><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>23.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ImmutableList&lt;Integer&gt; list = ImmutableList.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> List&lt;Integer&gt; lists = ImmutableList.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ImmutableSet set = ImmutableSet.copyOf(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ImmutableMap&lt;Integer, Integer&gt; map = ImmutableMap.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ImmutableMap&lt;Integer, Integer&gt; map2 = ImmutableMap.&lt;Integer, Integer&gt;builder()</span><br><span class="line">            .put(<span class="number">1</span>, <span class="number">2</span>).put(<span class="number">3</span>, <span class="number">4</span>).put(<span class="number">5</span>, <span class="number">6</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(map2.get(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    介绍了不可变对象，通过在某些情况下，将不能被修改的类对象，设置为不可变对象，来让对象在多个线程间是线程安全的。归根到底，其实是躲避开了并发的问题。除了不可变对象，还存在一个方法 就是线程封闭</p><h4 id="线程封闭"><a href="#线程封闭" class="headerlink" title="线程封闭"></a>线程封闭</h4><p>​    把对象封装到一个线程里，只有这一个线程能看到该对象，那么就算这个对象不是线程安全的，也不会出现任何线程安全的问题，因为它只能在一个线程中被访问，如何实现线程封闭：</p><ul><li>Ad-hoc 线程封闭：程序控制实现，非常脆弱、最糟糕，忽略</li><li>堆栈封闭：简单的说就是局部变量，无并发问题。多个线程访问同一个方式的时候，方法中的局部变量都会被拷贝一份到线程栈中，方法的局部变量是不被多个线程共享的，因此不会出现线程安全问题，能用局部变量就不推荐使用全局变量，全局变量容易引起并发问题，注意，全局的变量而不是全局的常量。</li><li>ThreadLocal 线程封闭：特别好的封闭方法</li></ul><h5 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This class provides thread-local variables.  These variables differ from</span></span><br><span class="line"><span class="comment"> * their normal counterparts in that each thread that accesses one (via its</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> get&#125; or &#123;<span class="doctag">@code</span> set&#125; method) has its own, independently initialized</span></span><br><span class="line"><span class="comment"> * copy of the variable.  &#123;<span class="doctag">@code</span> ThreadLocal&#125; instances are typically private</span></span><br><span class="line"><span class="comment"> * static fields in classes that wish to associate state with a thread (e.g.,</span></span><br><span class="line"><span class="comment"> * a user ID or Transaction ID).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>​    从类描述上:ThreadLocal提供线程级别的变量.这些变量不同于它们正常下的变量副本,在每一个线程中都有它自己获取方式(通过它的get和set方法)，不依赖变量副本的初始化。它的实例通常都是私有的静态的，用于关联线程的上下文。</p><p>​    这些变量在多线程环境下访问(通过get或set方法访问)时能保证各个线程里的变量相对独立于其他线程内的变量</p><p>​    <strong>总结：ThreadLocal的作用是提供线程内部的局部变量，这种变量只存在线程的生命周期。</strong></p><p>声明方式：<code>private static ThreadLocal&lt;Object&gt; threadLocal = new ThreadLocal&lt;Object&gt;;</code></p><h6 id="类分析"><a href="#类分析" class="headerlink" title="类分析"></a>类分析</h6><p>​    ThreadLocal涉及到的类结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(C)ThreadLocal</span><br><span class="line">-&gt; (C)ThreadLocalMap</span><br><span class="line">-&gt; (C)Entry</span><br><span class="line">(C)Thread</span><br><span class="line">-&gt; (f)ThreadLocal.ThreadLocalMap</span><br></pre></td></tr></table></figure><p><code>Thread.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">     * ThreadLocal values pertaining to this thread. This map is maintained</span></span><br><span class="line"><span class="comment">     * by the ThreadLocal class. </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    其中<code>ThreadLocalMap</code>类的定义是在<code>ThreadLocal</code>类中，真正的引用却是在<code>Thread</code>类中。同时，<code>ThreadLocalMap</code>中用于存储数据的entry定义：</p><p><code>ThreadLocal.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalMap</span> </span>&#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">            Object value;</span><br><span class="line">   <span class="comment">//key为ThreadLocal对象，value为存储的值</span></span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="keyword">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>ThreadLocalMap的key</code>是<code>ThreadLocal</code>类的实例对象，value为用户的值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">//设置值的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.获取当前线程</span></span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="comment">//2.从线程中获取该线程的成员属性 ThreadLocal.ThreadLocalMap</span></span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="comment">//将值放入Map中</span></span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">//先创建，在设置值</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取值的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                T result = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果没有设置，会调用，设置一个value为null</span></span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h6><p>​    从上面的源码分析，我们可以得出<code>ThreadLocal</code>的工作原理如下</p><ul><li>声明全局的<code>ThreadLocal</code>变量，<code>private static ThreadLocal&lt;Object&gt; threadLocal = new ThreadLocal&lt;Object&gt;;</code></li><li>每个线程中都有属于自己的<code>ThreadLocalMap</code>，互不干扰</li><li>全局只有一个<code>threadLocal</code>，当通过<code>set</code>填充数据时，通过获取当前操作线程的<code>threadLocalMap</code>，将<code>threadLocal</code>作为<code>threadLocalMap</code>中的<code>key</code>，需要填充的值作为<code>value</code></li><li><p>当需要从<code>threadLocal</code>获取值时，通过获取当前操作线程的<code>threadLocalMap</code>，并返回<code>key</code>为<code>threadLocal</code>对象的value</p><pre><code>那么就可以理解为：`ThreadLocal`的活动范围是具体的某一个线程，并且是该线程独有的。它不是用来解决共享变量的多线程安全问题。但是，有一点需要说明的是，如果`ThreadLocal`通过`set`方法放进去的值，这个值是共享对象，那么还是会存在线程安全问题。</code></pre></li></ul><h6 id="多个-ThreadLocal"><a href="#多个-ThreadLocal" class="headerlink" title="多个 ThreadLocal"></a>多个 ThreadLocal</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocal</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用于唯一确认一个ThreadLocal对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> threadLocalHashCode = nextHashCode();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger nextHashCode = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HASH_INCREMENT = <span class="number">0x61c88647</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">nextHashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextHashCode.getAndAdd(HASH_INCREMENT);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>引用于<a href="https://www.cnblogs.com/xzwblog/p/7227509.html" target="_blank" rel="noopener">彻底理解ThreadLocal</a></p><p>如何保证两个同时实例化的<code>ThreadLocal</code>对象有不同的<code>threadLocalHashCode</code>属性：在<code>ThreadLocal</code>类中，还包含了一个static修饰的<code>AtomicInteger</code>（[əˈtɒmɪk]提供原子操作的Integer类）成员变量（即类变量）和一个static final 修饰的常量（作为两个相邻<code>nextHashCode</code>的差值）。由于<code>nextHashCode</code>是类变量，所以每一次调用<code>ThreadLocal</code>类都可以保证<code>nextHashCode</code>被更新到新的值，并且下一次调用<code>ThreadLocal</code>类这个被更新的值仍然可用，同时<code>AtomicInteger</code>保证了<code>nextHashCode</code>自增的原子性。</p></blockquote><p>​    <code>ThreadLocal</code>中的<code>ThreadLocalMap</code>中的<code>key</code>为<code>ThreadLocal</code>对象，由于每个实例化的<code>ThreadLocal</code>对象都是不相同的，所以不会存在<code>key</code>冲突，所以一个线程存在多个<code>ThreadLocal</code>对象作为<code>key</code>是完全没有问题的。也就是说，一个线程中的<code>ThreadLocalMap</code>可以存在多个<code>key</code>。</p><p>​    为什么使用<code>ThreadLocal</code>作为<code>ThreadLocalMap</code>的<code>key</code>? 上面的解析已经很明确了。</p><p>​    试试使用线程<code>id</code>作为<code>ThreadLocalMap</code>的<code>key</code>? 如果使用线程<code>id</code>作为<code>key</code>，如果存在两个<code>ThreadLocal</code>对象，一个存放<code>String</code>类型，另一个存放<code>Integer</code>类型，而在单个线程中只存在一个<code>ThreadLocalMap</code>，当存放数据时，<code>key</code>永远只会有一个（线程id），存入数据的时候先存会被后存覆盖，获取数据时候可能会发生错误。</p><h6 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h6><p>​    ThreadLocal中存放的变量只在线程的生命周期内起作用，应用场景只要有两个方面：</p><ol><li>提供一个线程内公共变量（比如本次请求的用户信息、实体参数），减少同一个线程内多个函数或者组件之间一些公共变量的传递的复杂度</li><li>为线程提供一个私有的变量副本，这样每一个线程都可以随意修改自己的变量副本，而不会对其他线程产生影响。</li></ol><h6 id="关于内存泄露"><a href="#关于内存泄露" class="headerlink" title="关于内存泄露"></a>关于内存泄露</h6><p>​    首先，得分析一下内存泄露是什么东西，Java内存泄露又是怎么定义的？</p><blockquote><p>内存泄漏（Memory Leak）是指程序中己动态分配的堆内存由于某种原因程序未释放或无法释放，<strong>造成系统内存的浪费</strong>，导致程序运行速度减慢甚至系统崩溃等严重后果。</p></blockquote><p>​    在Java程序中，我们通常使用new为对象分配内存，而这些内存空间都在堆（Heap）上。</p><p>​    JAVA内存的分配是由程序完成的，而内存的释放是由GC完成。在JAVA达到内存泄露的存在两个特点，满足以下两个条件，即可认为是JAVA内存泄露，这些对象不被GC管理、回收，占用内存。</p><ol><li>对象是可达的，即对象引用存在</li><li>对象无用的，即对象已经不再使用</li></ol><p>当达到内存泄露时，扔出的异常：<code>java.lang.OutOfMemoryError：Java heap space</code></p><p><strong><code>ThreadLocal</code>对象之间的引用关系图</strong></p><p><img src="images/threadlocal-ref.png" alt=""></p><p>下面引用知乎的一篇文章（<a href="https://www.zhihu.com/question/23089780" target="_blank" rel="noopener">ThreadLocal和synchronized的区别?</a>）进行说明：</p><blockquote><p>ThreadLocalMap使用ThreadLocal的弱引用作为key，如果一个ThreadLocal没有外部强引用引用他，那么系统gc的时候，这个ThreadLocal势必会被回收，这样一来，ThreadLocalMap中就会出现key为null的Entry，就没有办法访问这些key为null的Entry的value，如果当前线程再迟迟不结束的话，这些key为null的Entry的value就会一直存在一条强引用链：ThreadLocal Ref -&gt; Thread -&gt; ThreadLocalMap -&gt; Entry -&gt; value永远无法回收，造成内存泄露。</p></blockquote><p>分析ThreadLocalMap中的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Entry[] table;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据ThreadLocal对象获取Entry</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  key the thread local object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the entry associated with key, or null if no such</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntry</span><span class="params">(ThreadLocal&lt;?&gt; key)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//计算索引位置</span></span><br><span class="line">     <span class="keyword">int</span> i = key.threadLocalHashCode &amp; (table.length - <span class="number">1</span>);</span><br><span class="line">     Entry e = table[i];</span><br><span class="line">     <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.get() == key)</span><br><span class="line">          <span class="keyword">return</span> e;</span><br><span class="line">     <span class="keyword">else</span></span><br><span class="line">         <span class="comment">//没有找到相应的entry</span></span><br><span class="line">          <span class="keyword">return</span> getEntryAfterMiss(key, i, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Version of getEntry method for use when key is not found in</span></span><br><span class="line"><span class="comment"> * its direct hash slot.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  key the thread local object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  i the table index for key's hash code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  e the entry at table[i] 可能为null或者不为null</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the entry associated with key, or null if no such</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Entry <span class="title">getEntryAfterMiss</span><span class="params">(ThreadLocal&lt;?&gt; key, <span class="keyword">int</span> i, Entry e)</span> </span>&#123;</span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//获取ThreadLocal对象</span></span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">        <span class="comment">//如果e为null或者key不一致则向下一个位置查询</span></span><br><span class="line">        <span class="keyword">if</span> (k == key)</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>)</span><br><span class="line">            expungeStaleEntry(i);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            i = nextIndex(i, len);</span><br><span class="line">        e = tab[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Expunge a stale entry by rehashing any possibly colliding entries</span></span><br><span class="line"><span class="comment"> * lying between staleSlot and the next null slot.  This also expunges</span></span><br><span class="line"><span class="comment"> * any other stale entries encountered before the trailing null.  See</span></span><br><span class="line"><span class="comment"> * Knuth, Section 6.4</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> staleSlot index of slot known to have null key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the index of the next null slot after staleSlot</span></span><br><span class="line"><span class="comment"> * (all between staleSlot and this slot will have been checked</span></span><br><span class="line"><span class="comment"> * for expunging).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expungeStaleEntry</span><span class="params">(<span class="keyword">int</span> staleSlot)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果key值为null，则擦除该位置的Entry，否则继续向下一个位置查询</span></span><br><span class="line">    Entry[] tab = table;</span><br><span class="line">    <span class="keyword">int</span> len = tab.length;</span><br><span class="line">    <span class="comment">// expunge entry at staleSlot</span></span><br><span class="line">    tab[staleSlot].value = <span class="keyword">null</span>;</span><br><span class="line">    tab[staleSlot] = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    <span class="comment">// Rehash until we encounter null</span></span><br><span class="line">    Entry e;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = nextIndex(staleSlot, len);</span><br><span class="line">         (e = tab[i]) != <span class="keyword">null</span>;</span><br><span class="line">         i = nextIndex(i, len)) &#123;</span><br><span class="line">        ThreadLocal&lt;?&gt; k = e.get();</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span>) &#123;</span><br><span class="line">            e.value = <span class="keyword">null</span>;</span><br><span class="line">            tab[i] = <span class="keyword">null</span>;</span><br><span class="line">            size--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> h = k.threadLocalHashCode &amp; (len - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (h != i) &#123;</span><br><span class="line">                tab[i] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// Unlike Knuth 6.4 Algorithm R, we must scan until</span></span><br><span class="line">                <span class="comment">// null because multiple entries could have been stale.</span></span><br><span class="line">                <span class="keyword">while</span> (tab[h] != <span class="keyword">null</span>)</span><br><span class="line">                    h = nextIndex(h, len);</span><br><span class="line">                tab[h] = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在这个过程中遇到的key为null的Entry都会被擦除，那么Entry内的value也就没有强引用链，自然会被回收。仔细研究代码可以发现，set操作也有类似的思想，将key为null的这些Entry都删除，防止内存泄露。 但是光这样还是不够的，上面的设计思路依赖一个前提条件：<strong>要调用ThreadLocalMap的genEntry函数或者set</strong>函数。这当然是不可能任何情况都成立的，所以很多情况下需要使用者手动调用ThreadLocal的remove函数，手动删除不再需要的ThreadLocal，防止内存泄露。所以JDK建议将ThreadLocal变量定义成private static的，这样的话ThreadLocal的生命周期就更长，由于一直存在ThreadLocal的强引用，所以ThreadLocal也就不会被回收，也就能保证任何时候都能根据ThreadLocal的弱引用访问到Entry的value值，然后remove它，防止内存泄露。</p></blockquote><h6 id="项目应用"><a href="#项目应用" class="headerlink" title="项目应用"></a>项目应用</h6><p>​    为了避免每个封装后的参数从controller层传递到service层，再从service层传递到dao层，或者从service层传递到其他的工具类当中。我在项目中使用ThreadLocal的思路是这样的：</p><p>​    由于避免参数复杂的传递，在controller中将已经封装好的参数放入ThreadLocal中，在其他层调用时直接通过ThreadLocal对象获取。在方法结束时，定义拦截器（或者Filter）进行ThreadLocal的remove方法。</p><h4 id="常见线程不安全类与写法"><a href="#常见线程不安全类与写法" class="headerlink" title="常见线程不安全类与写法"></a>常见线程不安全类与写法</h4><p>​    什么是线程不安全的类呢？简单的说，如果一个类的对象同时可以被多个线程访问，如果不做特殊的同步或并发处理，那么就很容易表现出线程不安全的现象，比如异常、逻辑处理错误等等，这种类称之为线程不安全的类。</p><h5 id="StringBuilder-与-StringBuffer"><a href="#StringBuilder-与-StringBuffer" class="headerlink" title="StringBuilder 与 StringBuffer"></a>StringBuilder 与 StringBuffer</h5><h6 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, stringBuilder.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringBuilder.append(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    main函数中输出的结果不为预期的5000，并且每次结果可能会不一致，因此<code>StringBuilder</code>是线程不安全类</p><h6 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, stringBuffer.length());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stringBuffer.append(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <code>StringBuffer</code>每次输出的结果与预期结果一致，因此它是线程安全的类</p><h6 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h6><p>​    通过以上两个例子可以知道，<code>StringBuffer</code>为线程安全类，<code>StringBuilder</code>为线程不安全类。</p><p>​    <code>StringBuffer</code>在方法的实现上使用了<code>synchronized</code>关键字对方法进行同步，因此是线程安全的，而<code>StringBuilder</code>则没有进行特殊的同步或并发处理。</p><p>​    <code>StringBuffer</code>使用了同步锁，同一时间只能有一个线程进行访问，因为在系统性能会有损耗，适用于多线程环境下使用。通常情况下，字符串拼接出现在方法内，使用<code>StringBuilder</code>进行字符串的拼接会大大提高性能，属于堆栈封闭，单个线程的操作对象，因此不存在线程不安全问题，优先选择使用<code>StringBuilder</code>。两种字符串拼接类分别适用不同的场景，这就是为什么JAVA同时提供了这两种类。</p><h5 id="SimpleDateFormat-与-JodaTime"><a href="#SimpleDateFormat-与-JodaTime" class="headerlink" title="SimpleDateFormat 与 JodaTime"></a>SimpleDateFormat 与 JodaTime</h5><h6 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h6><p>​    <code>SimpleDateFormat</code>是JAVA提供的一个日期转换类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SimpleDateFormat simpleDateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            simpleDateFormat.parse(<span class="string">"20180208"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"parse exception"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    当方法运行的时候，则会抛出异常，原因是<code>SimpleDateFormat</code>在多线程下共享使用就会出现线程不安全情况。建议将<code>SimpleDateFormat</code>声明为局部变量，这样才会避免线程不安全所带来的异常</p><h6 id="JodaTime"><a href="#JodaTime" class="headerlink" title="JodaTime"></a>JodaTime</h6><p>​    线程安全的日期格式化</p><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.joda.time.DateTime;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.format.DateTimeFormat;</span><br><span class="line"><span class="keyword">import</span> org.joda.time.format.DateTimeFormatter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateFormatExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DateTimeFormatter dateTimeFormatter = DateTimeFormat.forPattern(<span class="string">"yyyyMMdd"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;, &#123;&#125;"</span>, i, DateTime.parse(<span class="string">"20180208"</span>, dateTimeFormatter).toDate());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为线程安全的。</p><h6 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h6><p>​    在使用日期转换的时候，更建议使用JodaTime所提供的日期转换类，不仅是因为它是线程安全的，而且在类实际处理转换中有其他的优势。</p><h5 id="ArrayList、HashSet、HashMap-等-Collections"><a href="#ArrayList、HashSet、HashMap-等-Collections" class="headerlink" title="ArrayList、HashSet、HashMap 等 Collections"></a>ArrayList、HashSet、HashMap 等 Collections</h5><p>​    通常使用以上类，都是声明在方法内，作为局部变量使用，一般很少碰上线程不安全的问题。但如果定义为可以多个线程修改的时候，就会出现线程安全问题。</p><h6 id="List"><a href="#List" class="headerlink" title="List"></a>List</h6><p>多线程访问<code>ArrayList</code>会存在线程安全问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        <span class="comment">// 如果线程安全的话，理论上 list.size == clientTotal</span></span><br><span class="line">        <span class="comment">// 最后输出结果不为总产长度</span></span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        list.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h6><p>多线程操作<code>HashSet</code>也会存在线程安全问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        <span class="comment">// 如果线程安全的话，理论上 set.size == clientTotal</span></span><br><span class="line">        <span class="comment">// 输出的长度不一致</span></span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, set.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//存在线程不安全问题</span></span><br><span class="line">        set.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h6><p>多线程操作<code>HashMap</code>也会存在线程安全问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        <span class="comment">// 如果线程安全的话，理论上 map.size == clientTotal</span></span><br><span class="line">        <span class="comment">// 输出结果不一致，并且少于预期值</span></span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, map.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        map.put(i, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="先检查在执行：if（condition-a-）-handle-a"><a href="#先检查在执行：if（condition-a-）-handle-a" class="headerlink" title="先检查在执行：if（condition(a)）{ handle(a) }"></a>先检查在执行：if（condition(a)）{ handle(a) }</h5><p>​    假设a为线程安全类或属性，如<code>AtomicInteger</code>。当存在两个线程都通过了<code>condition(a)</code>返回<code>true</code>，接下来分别处理a，即会触发线程不安全问题。这里，它的不安全的点在于分成两个操作之后，即使<code>condition(a)</code>，<code>handle(a)</code>两个操作都是线程安全的，但在执行的时候，并不是原子性的，因此则会引发线程不安全问题。</p><p>​    如果在项目中遇到这种处理，a为多线程共享，则需要在上面代码之外进行加锁，或者保证这两个连续的操作时原子性的。</p><h4 id="同步容器"><a href="#同步容器" class="headerlink" title="同步容器"></a>同步容器</h4><p>​    在上面线程不安全类中，提到了<code>ArrayList</code>、<code>HashSet</code>、<code>HashMap</code>非线程安全的容器，如果有多个线程并发的访问，就会出现线程安全问题，因此在编写程序的时候，必须要求开发人员手动的在任何访问这些容器的地方进行同步处理，导致使用这些容器非常不便，因此JAVA中提供同步容器。</p><ul><li>ArrayList -&gt; Vector、Stack</li><li>HashMap -&gt; HashTable(key、value均不能为null)</li><li><p>Collections.synchronizedXXX(List、Set、Map)</p><pre><code>`Vector`实现`List`接口，底层和`ArrayList`类似，但是`Vector`中的方法都是使用`synchronized`修饰，即进行了同步的措施。 但是，`Vector`并不是线程安全的。`Stack`也是一个同步容器，也是使用`synchronized`进行同步，继承与`Vector`，是数据结构中的，先进后出。`HashTable`和`HashMap`很相似，但`HashTable`进行了同步处理。`Collections`工具类提供了大量的方法，比如对集合的排序、查找等常用的操作。同时也通过了相关了方法创建同步容器类</code></pre></li></ul><h5 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//例子的写法是线程安全的</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; list = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这里是线程安全的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        list.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>同步容器不一定是线程安全的。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Vector&lt;Integer&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                vector.add(i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Thread thread1 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">                        vector.remove(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            Thread thread2 = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">                        vector.get(i);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            thread1.start();</span><br><span class="line">            thread2.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <code>VectorExample2</code>程序的运行，在<code>get()</code>中会不断的抛出<code>ArrayIndexOutOfBoundsException</code>。<code>Vector</code>是线程同步容器，<code>size()</code>、<code>get()</code>与<code>remove()</code>都是被<code>synchronized</code>修饰的，但是为什么还是会存在线程安全问题呢？</p><p>​    首先，<code>get()</code>抛出的异常肯定是<code>remove()</code>引起的，<code>Vector</code>虽然能保证同一时刻，只能有一个线程进入访问。但是不排除有以下可能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 线程1和线程2都执行完vector.size()，获得的size大小相同，并且当两个线程都是i = 9</span></span><br><span class="line"><span class="comment">//2. 线程1执行remove操作，删除索引为9的数据</span></span><br><span class="line"><span class="comment">//3. 线程2执行get操作，获取索引为9的数据，那么就会抛出数组越界异常，</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">    <span class="comment">//线程1</span></span><br><span class="line">      vector.remove(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; vector.size(); i++) &#123;</span><br><span class="line">    <span class="comment">//线程2</span></span><br><span class="line">       vector.get(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在使用同步容器的时候，并不是所有的场合下都能够做到线程安全。</p><h5 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashTableExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        <span class="comment">//输出结果与预期一致</span></span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, map.size());</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//此写法是线程安全的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        map.put(i, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Collections-1"><a href="#Collections-1" class="headerlink" title="Collections"></a>Collections</h5><h6 id="List-1"><a href="#List-1" class="headerlink" title="List"></a>List</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// List同步容器构造</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; list = Collections.synchronizedList(Lists.newArrayList());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        list.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Set-1"><a href="#Set-1" class="headerlink" title="Set"></a>Set</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造同步HashSet</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Integer&gt; set = Collections.synchronizedSet(Sets.newHashSet());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, set.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        set.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Map-1"><a href="#Map-1" class="headerlink" title="Map"></a>Map</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造同步HashMap</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; map = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;&gt;());</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, map.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        map.put(i, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="集合的删除"><a href="#集合的删除" class="headerlink" title="集合的删除"></a>集合的删除</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VectorExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// java.util.ConcurrentModificationException</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(Vector&lt;Integer&gt; v1)</span> </span>&#123; <span class="comment">// foreach</span></span><br><span class="line">        <span class="keyword">for</span>(Integer i : v1) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i.equals(<span class="number">3</span>)) &#123;</span><br><span class="line">                v1.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// java.util.ConcurrentModificationException</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(Vector&lt;Integer&gt; v1)</span> </span>&#123; <span class="comment">// iterator</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = v1.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Integer i = iterator.next();</span><br><span class="line">            <span class="keyword">if</span> (i.equals(<span class="number">3</span>)) &#123;</span><br><span class="line">                v1.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果在使用foreach或iterator进集合的遍历，</span></span><br><span class="line"><span class="comment">     * 尽量不要在操作的过程中进行remove等相关的更新操作。</span></span><br><span class="line"><span class="comment">     * 如果非要进行操作，则可以在遍历的过程中记录需要操作元素的序号，</span></span><br><span class="line"><span class="comment">     * 待遍历结束后方可进行操作，让这两个动作分开进行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">(Vector&lt;Integer&gt; v1)</span> </span>&#123; <span class="comment">// for</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; v1.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (v1.get(i).equals(<span class="number">3</span>)) &#123;</span><br><span class="line">                v1.remove(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Vector&lt;Integer&gt; vector = <span class="keyword">new</span> Vector&lt;&gt;();</span><br><span class="line">        vector.add(<span class="number">1</span>);</span><br><span class="line">        vector.add(<span class="number">2</span>);</span><br><span class="line">        vector.add(<span class="number">3</span>);</span><br><span class="line">        test1(vector);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在单线程会出现以上错误，在多线程情况下，并且集合时共享的，出现异常的概率会更大，需要特别的注意。解决方案是希望在foreach或iterator时，对要操作的元素进行标记，待循环结束之后，在执行相关操作。</p><p>​    以上例子中，for循环是能正确的进行，因此推荐使用for循环做来做包含更新操作的便利</p><h5 id="同步容器总结"><a href="#同步容器总结" class="headerlink" title="同步容器总结"></a>同步容器总结</h5><p>​    同步容器中的方法主要采取<code>synchronized</code>进行同步，因此执行的性能会收到受到影响，并且同步容器并不一定能做到真正的线程安全。</p><h4 id="并发容器-J-U-C"><a href="#并发容器-J-U-C" class="headerlink" title="并发容器 J.U.C"></a>并发容器 J.U.C</h4><p>​    所谓的J.U.C其实是JDK所提供的一个包名，全程为<code>java.util.concurrent</code>,里面提供了许多线程安全的集合。</p><h5 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h5><h6 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h6><p>​    ArrayList -&gt; CopyOnWriteArrayList  ， ，<code>CopyOnWriteArrayList</code>相比于<code>ArrayList</code>是线程安全的，从字面意思理解，即为写操作时复制。<code>CopyOnWriteArrayList</code>使用了一种叫写时复制的方法，当有新元素添加到<code>CopyOnWriteArrayList</code>时，先从原有的数组中拷贝一份出来，然后在新的数组做写操作，写完之后，再将原来的数组引用指向到新数组。</p><p>​    <code>CopyOnWriteArrayList</code>的整个add操作都是在锁的保护下进行的。 这样做是为了避免在多线程并发add的时候，复制出多个副本出来,把数据搞乱了，导致最终的数组数据不是我们期望的。</p><p>​    本节介绍的内容，大部分参考来源于<a href="https://blog.csdn.net/linsongbin1/article/details/54581787" target="_blank" rel="noopener">线程安全的CopyOnWriteArrayList介绍</a></p><h6 id="Shortcoming"><a href="#Shortcoming" class="headerlink" title="Shortcoming"></a>Shortcoming</h6><ol><li><p>由于写操作的时候，需要拷贝数组，会消耗内存，如果原数组的内容比较多的情况下，可能导致<code>young gc</code>或者<code>full gc</code></p></li><li><p>不能用于实时读的场景，像拷贝数组、新增元素都需要时间，所以调用一个set操作后，读取到数据可能还是旧的,虽然<code>CopyOnWriteArrayList</code>能做到最终一致性,但是还是没法满足实时性要求；</p><p>​    <code>CopyOnWriteArrayList</code> 合适<strong>读多写少</strong>的场景，不过这类慎用  因为谁也没法保证<code>CopyOnWriteArrayList</code> 到底要放置多少数据，万一数据稍微有点多，每次add/set都要重新复制数组，这个代价实在太高昂了。在高性能的互联网应用中，这种操作分分钟引起故障。 </p></li></ol><h6 id="Design-Thinking"><a href="#Design-Thinking" class="headerlink" title="Design Thinking"></a>Design Thinking</h6><ol><li>读写分离，读和写分开 </li><li>最终一致性。最终保证<code>List</code>的结果是对的</li><li>使用另外开辟空间的思路，来解决并发冲突</li></ol><h6 id="Read-Operation"><a href="#Read-Operation" class="headerlink" title="Read Operation"></a>Read Operation</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArrayList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line"><span class="comment">// 添加元素的操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获得锁</span></span><br><span class="line">        <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">        <span class="comment">//上锁</span></span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Object[] elements = getArray();<span class="comment">//获得当前的数组</span></span><br><span class="line">            <span class="keyword">int</span> len = elements.length;<span class="comment">//获取数组长度</span></span><br><span class="line">            <span class="comment">//进行数组的复制</span></span><br><span class="line">            Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">            <span class="comment">//添加新元素</span></span><br><span class="line">            newElements[len] = e;</span><br><span class="line">            <span class="comment">//引用指向更改</span></span><br><span class="line">            setArray(newElements);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//解锁</span></span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    由于所有的写操作都是在新数组进行的，这个时候如果有线程并发的写，则通过锁来控制，如果有线程并发的读，则分几种情况： </p><ol><li>如果写操作未完成，那么直接读取原数组的数据； </li><li>如果写操作完成，但是引用还未指向新数组，那么也是读取原数组数据； </li><li>如果写操作完成，并且引用已经指向了新的数组，那么直接从新数组中读取数据。</li></ol><p>注意：<code>CopyOnWriteArrayList</code>的读操作是可以不用加锁的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get(getArray(), index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Using"><a href="#Using" class="headerlink" title="Using"></a>Using</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArrayListExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;Integer&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        list.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h5><p>​    HashSet -&gt; CopyOnWriteArraySet </p><p><code>CopyOnWriteArraySet</code>底层实现是采用<code>CopyOnWriteArrayList</code>，合适比较小的集合，其中所有可变操作（add、set、remove等等）都是通过对底层数组进行一次新的复制来实现的,一般需要很大的开销。迭代器支持hasNext(), next()等不可变操作，不支持可变的<code>remove</code>操作；使用迭代器进行遍历的速度很快，并且不会与其他线程发生冲突。在构造迭代器时，迭代器依赖于不变的数组快照。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArraySetExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Integer&gt; set = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, set.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        set.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ConcurrentSkipListSet"><a href="#ConcurrentSkipListSet" class="headerlink" title="ConcurrentSkipListSet"></a>ConcurrentSkipListSet</h5><p>​    TreeSet -&gt; ConcurrentSkipListSet</p><ul><li><code>ConcurrentSkipListSet&lt;E&gt;</code>是jdk6新增的类，位于java.util.concurrent并发库下 </li><li><code>ConcurrentSkipListSet&lt;E&gt;</code>和<code>TreeSet</code>一样，都是支持自然排序，并且可以在构造的时候定义<code>Comparator&lt;E&gt;</code>的比较器，该类的方法基本和<code>TreeSet</code>中方法一样（方法签名一样）</li><li>和其他的Set集合一样，<code>ConcurrentSkipListSet&lt;E&gt;</code>都是基于<code>Map</code>集合的，<code>ConcurrentSkipListMap</code>便是它的底层实现</li><li>在多线程的环境下，<code>ConcurrentSkipListSet&lt;E&gt;</code>中的<code>contains</code>、<code>add</code>、<code>remove</code>操作是安全的，多个线程可以安全地并发执行插入、移除和访问操作。但是对于批量操作<code>addAll</code>、<code>removeAll</code>、<code>retainAll</code> 和 <code>containsAll</code>并不能保证以原子方式执行。理由很简单，因为<code>addAll</code>、<code>removeAll</code>、<code>retainAll</code>底层调用的还是<code>contains</code>、<code>add</code>、<code>remove</code>的方法，在批量操作时，只能保证每一次的<code>contains</code>、<code>add</code>、<code>remove</code>的操作是原子性的（即在进行<code>contains</code>、<code>add</code>、<code>remove</code>三个操作时，不会被其他线程打断），而不能保证每一次批量的操作都不会被其他线程打断。因此，在<code>addAll</code>、<code>removeAll</code>、<code>retainAll</code> 和 <code>containsAll</code>操作时，需要添加额外的同步操作。</li><li>此类不允许使用 null 元素，因为无法可靠地将 null 参数及返回值与不存在的元素区分开来</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentSkipListSetExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Set&lt;Integer&gt; set = <span class="keyword">new</span> ConcurrentSkipListSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, set.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        set.add(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h5><p>​    HashMap -&gt; ConcurrentHashMap ，不允许<code>null</code>值，绝大部分使用<code>Map</code>都是读取操作，而且读操作大多数都是成功的，因此，<code>ConcurrentHashMap</code>针对读操作进行了大量的优化。在高并发的场景下，有很大的优势。</p><p>​    内容参考<a href="http://www.importnew.com/26049.html" target="_blank" rel="noopener">深入并发包 ConcurrentHashMap</a></p><p>​    因为多线程环境下，使用<code>Hashmap</code>进行put操作会引起死循环，导致CPU利用率接近100%，所以在并发情况下不能使用<code>HashMap</code>。 <code>HashMap</code>在put的时候，插入的元素超过了容量（由负载因子决定）的范围就会触发扩容操作，就是<code>rehash</code>，这个会重新将原数组的内容重新<code>hash</code>到新的扩容数组中，在多线程的环境下，存在同时其他的元素也在进行<code>put</code>操作，如果<code>hash</code>值相同，可能出现同时在同一数组下用链表表示，造成闭环，导致在<code>get</code>时会出现死循环，所以<code>HashMap</code>是线程不安全的。 </p><p>​    <code>HashTable</code>，它是线程安全的，它在所有涉及到多线程操作的都加上了<code>synchronized</code>关键字来锁住整个<code>table</code>，这就意味着所有的线程都在竞争一把锁，在多线程的环境下，它是安全的，但是无疑是效率低下的。 </p><p>​    其实<code>HashTable</code>有很多的优化空间，锁住整个<code>table</code>这么粗暴的方法可以变相的柔和点，比如在多线程的环境下，对不同的数据集进行操作时其实根本就不需要去竞争一个锁，因为他们不同<code>hash</code>值，不会因为<code>rehash</code>造成线程不安全，所以互不影响，这就是锁分离技术，将锁的粒度降低，利用多个锁来控制多个小的<code>table</code>，多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是<code>ConcurrentHashMap</code>JDK1.7版本的核心思想。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMapExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        <span class="comment">// 线程安全，输出结果准确并一致</span></span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, map.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        map.put(i, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ConcurrentSkipListMap"><a href="#ConcurrentSkipListMap" class="headerlink" title="ConcurrentSkipListMap"></a>ConcurrentSkipListMap</h5><p>​    TreeMap -&gt; ConcurrentSkipListMap，内部使用<code></code>SkipList`结构实现的。跳表是一个链表，但是通过使用“跳跃式”查找的方式使得插入、读取数据时复杂度变成了O（log n）。</p><p>​    跳表（SkipList）：使用“空间换时间”的算法，令链表的每个结点不仅记录next结点位置，还可以按照level层级分别记录后继第level个结点。 </p><blockquote><p>参考文章：<a href="http://www.cnblogs.com/ygj0930/p/6543901.html" target="_blank" rel="noopener">Java并发容器——ConcurrentSkipListMap和ConcurrentHashMap</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentSkipListMapExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> ConcurrentSkipListMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> count = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    update(count);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"size:&#123;&#125;"</span>, map.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        map.put(i, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="concurrentHashMap与ConcurrentSkipListMap性能测试"><a href="#concurrentHashMap与ConcurrentSkipListMap性能测试" class="headerlink" title="concurrentHashMap与ConcurrentSkipListMap性能测试"></a>concurrentHashMap与ConcurrentSkipListMap性能测试</h5><p>​    内容引用于<a href="https://blog.csdn.net/vernonzheng/article/details/8244984" target="_blank" rel="noopener">Java多线程（四）之ConcurrentSkipListMap深入分析 </a></p><p>​    在4线程1.6万数据的条件下，<code>ConcurrentHashMap</code> 存取速度是<code>ConcurrentSkipListMap</code> 的4倍左右。 </p><p>​    但<code>ConcurrentSkipListMap</code>有几个<code>ConcurrentHashMap</code>不能比拟的<strong>优点</strong>：</p><ol><li><code>ConcurrentSkipListMap</code> 的key是有序的，而<code>ConcurrentHashMap</code>是做不到的</li><li><p><code>ConcurrentSkipListMap</code> 支持更高的并发。<code>ConcurrentSkipListMap</code>的存取时间是<code>log（N）</code>，和线程数几乎无关。也就是说在数据量一定的情况下，并发的线程越多，<code>ConcurrentSkipListMap</code>越能体现出他的优势。 </p><pre><code>在非多线程情况下，尽量使用`TreeMap`，此外，对于并发性较低的程序，可以使用`Collections`工具所提供的方法`synchronizedSortMap`，它是将`TreeMap`进行包装。对于高并发场景下，应使用`ConcurrentSkipListMap`提供更高的并发度。并且，如果在多线程环境下，需要对`Map`的键值进行排序时，也要尽量使用`ConcurrentSkipListMap`</code></pre></li></ol><h5 id="J-U-C-内容概览"><a href="#J-U-C-内容概览" class="headerlink" title="J.U.C 内容概览"></a>J.U.C 内容概览</h5><p><img src="images/j.u.c.jpg" alt=""></p><h4 id="安全共享策略总结"><a href="#安全共享策略总结" class="headerlink" title="安全共享策略总结"></a>安全共享策略总结</h4><p>​    以下策略是通过线程安全策略中的不可变对象、线程封闭、同步容器以及并发容器相关知识总结而得：</p><ol><li>线程限制：一个被线程限制的对象，由线程独占，并且只能被占有它的线程修改</li><li>共享只读：一个共享只读的对象，在没有额外同步的情况下，可以被多个线程并发访问，但是任何线程都不能修改它</li><li>线程安全对象：一个线程安全的对象或容器，在内部通过同步机制来保证线程安全，所以其他线程无需额外的同步就可以通过公共接口随意访问它</li><li>被守护对象：被守护对象只能通过获取特定的锁来访问</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>JAVA并发编程与高并发解决方案 - 并发编程 二</title>
      <link href="/2018/06/21/concurrency/concurrency-2/"/>
      <url>/2018/06/21/concurrency/concurrency-2/</url>
      <content type="html"><![CDATA[<h1 id="JAVA并发编程与高并发解决方案-并发编程-二"><a href="#JAVA并发编程与高并发解决方案-并发编程-二" class="headerlink" title="JAVA并发编程与高并发解决方案 - 并发编程 二"></a>JAVA并发编程与高并发解决方案 - 并发编程 二</h1><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">作者</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">2018.4.8</td><td style="text-align:center">huangz</td><td style="text-align:center">线程安全性、安全发布对象</td></tr></tbody></table><h3 id="线程安全性"><a href="#线程安全性" class="headerlink" title="线程安全性"></a>线程安全性</h3><p>​    当多个线程访问某个类时，不管运行时环境采用<strong>何种调度方式</strong>或者这些进程将如何交替执行，并且在主调代码中<strong>不需要任何额外的同步或协调</strong>，这个类都能表现出<strong>正确的行为</strong>，那么就称这个类是线程安全的。</p><p>线程安全性主要体现：</p><ol><li>原子性：提供了互斥访问，同一时刻只能有一个线程来对它进行操作</li><li>可见性：一个线程对主内存的修改可以及时的被其他线程观察到</li><li>有序性：一个线程观察其他线程中的指令执行顺序，由于指令重排序的存在，该观察结果一般是杂乱无序</li></ol><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h4><h5 id="Atomic包"><a href="#Atomic包" class="headerlink" title="Atomic包"></a>Atomic包</h5><p>位于java.util.concurrent.atomic</p><p>AtomicXXX : CAS、Unsafe.compareAndSwapXXX</p><p>​    CAS（Compare and swap）比较和替换是设计并发算法时用到的一种技术。简单来说，比较和替换是使用一个期望值和一个变量的当前值进行比较，如果当前变量的值与我们期望的值相等，就使用一个新值替换当前变量的值。</p><h6 id="AtomicInteger"><a href="#AtomicInteger" class="headerlink" title="AtomicInteger"></a>AtomicInteger</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"><span class="comment">//从int类型换成了AtomicInteger</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    add();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"count:&#123;&#125;"</span>, count.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用了AtomicInteger方法</span></span><br><span class="line">        count.incrementAndGet();</span><br><span class="line">        <span class="comment">// count.getAndIncrement();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程安全？源码分析</p><p><code>AtomicInteger.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6214790243416807050L</span>;</span><br><span class="line"><span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe(); <span class="comment">//通过反射获得</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">       valueOffset = unsafe.objectFieldOffset</span><br><span class="line">       (AtomicInteger.class.getDeclaredField(<span class="string">"value"</span>));</span><br><span class="line">   &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//this 代表当前AtomicInteger对象</span></span><br><span class="line">        <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Unsafe.java</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本地方法，java底层方法</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> var1 对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> var2 偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> var3 期望值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> var5 修改值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">compareAndSwapInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4, <span class="keyword">int</span> var5)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> var1 当前对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> var2 当前值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> var3 增量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> var5; <span class="comment">//底层值</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">        &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">    <span class="comment">// CAS核心</span></span><br><span class="line"><span class="comment">//当前值与底层值相同，则更新成var5 + var4</span></span><br><span class="line">    <span class="comment">//不一样则不停的循环，直到值相同</span></span><br><span class="line">        <span class="keyword">return</span> var5;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="AtomicInLong-与-LongAdder"><a href="#AtomicInLong-与-LongAdder" class="headerlink" title="AtomicInLong 与 LongAdder"></a>AtomicInLong 与 LongAdder</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AtomicLong count = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    add();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"count:&#123;&#125;"</span>, count.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count.incrementAndGet();</span><br><span class="line">        <span class="comment">// count.getAndIncrement();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> LongAdder count = <span class="keyword">new</span> LongAdder();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    add();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"count:&#123;&#125;"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count.increment();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AtomicInLong 与 LongAdder 比较</p><p>​    就像我们所知道的那样,AtomicLong的原理是依靠底层的cas来保障原子性的更新数据，在要添加或者减少的时候，会使用死循环不断地cas到特定的值，从而达到更新数据的目的。如果竞争不激烈，修改成功几率很高，否则失败概率很高，在失败几率很高的情况下，这些原子操作就会进行多次的循环操作尝试，因此性能会受到影响。</p><p>​    对于普通类型的Long和Doubble变量，JVM允许将64位的读操作或写操作拆成两个三十二位的操作。</p><p>​    LongAdder的核心是将热点数据分离，比如说它可以将AtomicLong内部核心数据value分离成一个数组，每个线程访问时，通过hash等算法，映射到其中一个数字进行计数，最终的计数结果则会这个数据的求和累加，其中热点数据value会被分离成多个cell，每个cell独自维护内部的值，当前对象实际值为所有cell累计合成，这样的话，热点就进行了有效的分离，并提高了并行度。</p><p>​    LongAdder在AtomicLong的基础上将单点的更新压力分散到各个节点，在低并发的时候通过对base的直接更新可以很好的保障和AtomicLong的性能基本保持一致，而在高并发的时候通过分散提高了性能。 </p><p>​    缺点是LongAdder在统计的时候如果有并发更新，可能导致统计的数据有误差。</p><p>​    实际使用中，在处理高并发时，可以优先使用LongAdder，而不是继续使用AtomicLong，当然，在线程竞争很低的情况下，使用AtomicLong更简单更实际一些，并且效率会高些。其他情况下，比如序列号生成，这种情况下需要准确的数值，全局唯一的AtomicLong才是正确的选择，而不是LongAdder</p><pre><code>&gt; 参考文章 [AtomicLong和LongAdder的区别](https://blog.csdn.net/yao123long/article/details/63683991)</code></pre><h6 id="AtomicReference"><a href="#AtomicReference" class="headerlink" title="AtomicReference"></a>AtomicReference</h6><blockquote><p>The <code>AtomicReference</code> class provides reference objects that may be read and written atomically, so when multiple threads try to reach them at the same time, only one will be able to do so</p></blockquote><p>原子性引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicExample4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicReference&lt;Integer&gt; count = <span class="keyword">new</span> AtomicReference&lt;&gt;(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        count.compareAndSet(<span class="number">0</span>, <span class="number">2</span>); <span class="comment">// 2</span></span><br><span class="line">        count.compareAndSet(<span class="number">0</span>, <span class="number">1</span>); <span class="comment">// no</span></span><br><span class="line">        count.compareAndSet(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">// no</span></span><br><span class="line">        count.compareAndSet(<span class="number">2</span>, <span class="number">4</span>); <span class="comment">// 4</span></span><br><span class="line">        count.compareAndSet(<span class="number">3</span>, <span class="number">5</span>); <span class="comment">// no</span></span><br><span class="line">        log.info(<span class="string">"count:&#123;&#125;"</span>, count.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上实例比较简单，我有个疑问？假如我们引用的是一个自定义的对象，并且对象里面有属性值，然后，修改对象中的属性值也是原子性的吗？还是只是对对象的引用是原子性操作。</p><p><strong>带着上面的疑问，进行源码分析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicReference</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">1848883965231344442L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicReference.class.getDeclaredField(<span class="string">"value"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> V value;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new AtomicReference with the given initial value.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> initialValue the initial value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AtomicReference</span><span class="params">(V initialValue)</span> </span>&#123;</span><br><span class="line">        value = initialValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new AtomicReference with null initial value.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AtomicReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不需要安全防护</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设值值不需要进行对象安全防护</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 很明显调用的是csa操作</span></span><br><span class="line"><span class="comment">     * 比较对象是否相同，进行设值</span></span><br><span class="line"><span class="comment">     * 设值成功返回true，否则返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V expect, V update)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapObject(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置新的值并且返回旧的值</span></span><br><span class="line"><span class="comment">     * 原子操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getAndSet</span><span class="params">(V newValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (V)unsafe.getAndSetObject(<span class="keyword">this</span>, valueOffset, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过源码分析，可以得出</p><ul><li>AtomicReference 所提供的某些方法可以进行原子性操作，如compareAndSet、getAndSet，这仅仅是对引用进行原子性操作</li><li>AtomicReference  不能保证对象中若存在属性值修改是线程安全的，如假设引用对象是person，修改person中name和age，多个线程同时从引用中获得对象，并进行修改，会出现线程不安全情况。下面我们通过代码来验证一下这条结论。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicReferenceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Person person = <span class="keyword">new</span> Person(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AtomicReference&lt;Person&gt; personAtomicReference = <span class="keyword">new</span> AtomicReference(person);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> result = i;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    modify(result);</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"name:&#123;&#125;,age:&#123;&#125;"</span>,personAtomicReference.get().getName(), personAtomicReference.get().getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果线程安全的话，age的值和name的值是一致的</span></span><br><span class="line">    <span class="comment">//如果线程不安全的话，age的值和name是不一样的。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        personAtomicReference.get().setAge(personAtomicReference.get().getAge() + i);</span><br><span class="line">        personAtomicReference.get().setName(personAtomicReference.get().getName() + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在低并发的情况下，输出的结果是正确的，但是在高并发的情况下结果差距就很大了</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">18:09:52.473 [main] INFO com.mmall.concurrency.example.atomic.AtomicReferenceTest - name:496592,age:496922</span><br></pre></td></tr></table></figure><h6 id="AtomicReferenceFieldUpdater"><a href="#AtomicReferenceFieldUpdater" class="headerlink" title="AtomicReferenceFieldUpdater"></a>AtomicReferenceFieldUpdater</h6><p>​    atomic包中提供AtomicReferenceFieldUpdater、AtomicIntegerFieldUpdater、AtomicLongFieldUpdater，原子性的更新某一个类实例的指定的某一个字段</p><ul><li>AtomicIntegerFieldUpdater</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicExample5</span> </span>&#123;</span><br><span class="line"><span class="comment">//AtomicIntegerFieldUpdater 原子性的更新某一个类的实例的指定的某一个字段</span></span><br><span class="line">    <span class="comment">//并且该字段由volatile进行修饰同时不能被static修饰</span></span><br><span class="line">    <span class="comment">//有些网上说而且不能被private修饰？下文将进行验证</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicIntegerFieldUpdater&lt;AtomicExample5&gt; updater =</span><br><span class="line">            AtomicIntegerFieldUpdater.newUpdater(AtomicExample5.class, <span class="string">"count"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        AtomicExample5 example5 = <span class="keyword">new</span> AtomicExample5();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (updater.compareAndSet(example5, <span class="number">100</span>, <span class="number">120</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">"update success 1, &#123;&#125;"</span>, example5.getCount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (updater.compareAndSet(example5, <span class="number">100</span>, <span class="number">120</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">"update success 2, &#123;&#125;"</span>, example5.getCount());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">"update failed, &#123;&#125;"</span>, example5.getCount());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果输出</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">18:48:27.815 [main] INFO com.mmall.concurrency.example.atomic.AtomicExample5 - update success 1, 120</span><br><span class="line">18:48:27.825 [main] INFO com.mmall.concurrency.example.atomic.AtomicExample5 - update failed, 120</span><br></pre></td></tr></table></figure><p><strong>源码分析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerFieldUpdater</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tclass 持有某字段的类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fieldName 字段名字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; <span class="function">AtomicIntegerFieldUpdater&lt;U&gt; <span class="title">newUpdater</span><span class="params">(Class&lt;U&gt; tclass,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                              String fieldName)</span>     </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AtomicIntegerFieldUpdaterImpl&lt;U&gt;</span><br><span class="line">            (tclass, fieldName, Reflection.getCallerClass());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 原子性设置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAndSet</span><span class="params">(T obj, <span class="keyword">int</span> newValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> prev;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            prev = get(obj);</span><br><span class="line">        &#125; <span class="keyword">while</span> (!compareAndSet(obj, prev, newValue));</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicIntegerFieldUpdaterImpl</span>&lt;<span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">            <span class="keyword">extends</span> <span class="title">AtomicIntegerFieldUpdater</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> offset;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; tclass;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;?&gt; cclass;</span><br><span class="line"></span><br><span class="line">        AtomicIntegerFieldUpdaterImpl(<span class="keyword">final</span> Class&lt;T&gt; tclass,</span><br><span class="line">                                      <span class="keyword">final</span> String fieldName,</span><br><span class="line">                                      <span class="keyword">final</span> Class&lt;?&gt; caller) &#123;</span><br><span class="line">            <span class="keyword">final</span> Field field;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> modifiers;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                field = AccessController.doPrivileged(</span><br><span class="line">                    <span class="keyword">new</span> PrivilegedExceptionAction&lt;Field&gt;() &#123;</span><br><span class="line">                        <span class="function"><span class="keyword">public</span> Field <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchFieldException </span>&#123;</span><br><span class="line">                            <span class="comment">//字段不存在会抛异常</span></span><br><span class="line">                            <span class="keyword">return</span> tclass.getDeclaredField(fieldName);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                 <span class="comment">//检查访问级别</span></span><br><span class="line">                modifiers = field.getModifiers();</span><br><span class="line">                sun.reflect.misc.ReflectUtil.ensureMemberAccess(</span><br><span class="line">                    caller, tclass, <span class="keyword">null</span>, modifiers);</span><br><span class="line">                ClassLoader cl = tclass.getClassLoader();</span><br><span class="line">                ClassLoader ccl = caller.getClassLoader();</span><br><span class="line">                <span class="keyword">if</span> ((ccl != <span class="keyword">null</span>) &amp;&amp; (ccl != cl) &amp;&amp;</span><br><span class="line">                    ((cl == <span class="keyword">null</span>) || !isAncestor(cl, ccl))) &#123;</span><br><span class="line">                  sun.reflect.misc.ReflectUtil.checkPackageAccess(tclass);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(pae.getException());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(ex);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Class&lt;?&gt; fieldt = field.getType();</span><br><span class="line"><span class="comment">//必须是int</span></span><br><span class="line">            <span class="keyword">if</span> (fieldt != <span class="keyword">int</span>.class)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Must be integer type"</span>);</span><br><span class="line"><span class="comment">//必须用volatile修饰</span></span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isVolatile(modifiers))</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Must be volatile type"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.cclass = (Modifier.isProtected(modifiers) &amp;&amp;</span><br><span class="line">                           caller != tclass) ? caller : <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">this</span>.tclass = tclass;</span><br><span class="line"><span class="comment">//用Unsafe里的那一坨方法去原子更新</span></span><br><span class="line">            offset = unsafe.objectFieldOffset(field);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    从源码分析中，可以看出没有要求不能被private修饰</p><h6 id="AtomicStampReference"><a href="#AtomicStampReference" class="headerlink" title="AtomicStampReference"></a>AtomicStampReference</h6><p>​    此类是要核心解决CAS的ABA问题</p><p>​    ABA问题：指CAS操作的时候，线程将某个变量值由A修改为B，但是又改回了A，其他线程发现A并未改变，于是CAS将进行值交换操作，实际上该值已经被改变过，这与CAS的核心思想是不符合的</p><p>​    解决思路：每次变量更新的时候，把变量的版本号进行更新，如果某变量被某个线程修改过，那么版本号一定会递增更新，从而解决ABA问题</p><p>​    J.U.C 提供了两个类解决ABA问题，一个是<code>AtomicStampReference</code> ，另一个是 <code>AtomicMarkableReference</code></p><h6 id="AtomicLongArray"><a href="#AtomicLongArray" class="headerlink" title="AtomicLongArray"></a>AtomicLongArray</h6><p>​    AtomicLong是作用是对长整形进行原子操作。而AtomicLongArray的作用则是对”长整形数组”进行原子操作,根据索引，对数据中的指定位置的数据进行院子性的更新</p><h6 id="AtomicBoolean"><a href="#AtomicBoolean" class="headerlink" title="AtomicBoolean"></a>AtomicBoolean</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicExample6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicBoolean isHappened = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    test();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"isHappened:&#123;&#125;"</span>, isHappened.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 演示如何让一段代码中的某个逻辑在高并发场景下只执行一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//原子性操作，保证从false 到 true 只会执行一次</span></span><br><span class="line">        <span class="keyword">if</span> (isHappened.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">"execute"</span>); <span class="comment">//只会执行一次</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h5><p>​    JAVA中能保证同一时刻，只有一个线程来进行对其进行操作的，除了atomic包中所提供的类之外，还有jdk提供的锁，JAVA主要提供以下锁：</p><ol><li>synchronized : 关键字，并且依赖与JVM，<strong>作用对象的作用范围内</strong>都是同一时刻只能有一个线程对其操作的</li><li>Lock : 接口类，依赖特殊的CPU指定，使用代码实现，常用子类ReentrantLock</li></ol><h6 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h6><ul><li>修饰代码块：大括号括起来的代码，也称同步代码块，作用与<strong>调用的对象</strong></li><li>修饰方法：整个方法，也称同步方法，作用与<strong>调用的对象</strong></li><li>修饰静态方法：整个静态方法，作用于<strong>类的所有对象</strong></li><li>修饰类：括号括起来的部分，作用与<strong>类的所有对象</strong></li></ul><p><strong>同步代码块与同步方法演示与解析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修饰一个代码块</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//同步代码块 作用于调用的对象</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                log.info(<span class="string">"test1 &#123;&#125; - &#123;&#125;"</span>, j, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修饰一个方法 同步方法 作用于调用的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            log.info(<span class="string">"test2 &#123;&#125; - &#123;&#125;"</span>, j, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedExample1 example1 = <span class="keyword">new</span> SynchronizedExample1();</span><br><span class="line">        SynchronizedExample1 example2 = <span class="keyword">new</span> SynchronizedExample1();</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            example1.test2(<span class="number">1</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//example1.test2(1)</span></span><br><span class="line">            example2.test2(<span class="number">2</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若线程池中开启两个线程：</p><p>​    使用同步方法进行验证：</p><p>​    若两个线程中都使用同一个对象进行操作，那么他们是同步的,输出的结果都是先执行test2-1 0-9的输出后执行test2-2 0-9的输出或先执行test2-2 0-9的输出后执行test2-1 0-9的输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">executorService.execute(() -&gt; &#123;</span><br><span class="line">    example1.test2(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line">executorService.execute(() -&gt; &#123;</span><br><span class="line">    example1.test2(<span class="number">2</span>)</span><br><span class="line">    <span class="comment">//example2.test2(2);</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>​    若两个线程中不使用同一个对象进行操作，那么他们输出即为交叉执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">executorService.execute(() -&gt; &#123;</span><br><span class="line">    example1.test2(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br><span class="line">executorService.execute(() -&gt; &#123;</span><br><span class="line">    <span class="comment">//example1.test2(2)</span></span><br><span class="line">    example2.test2(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>​    注意：如果某个类为父类，并且存在同步方法，子类在继承这个类后，如果子类调用该父类的同步方法后，该方法是没有synchronized关键字的，原因是synchronized不属于方法声明的一部分</p><p><strong>修饰静态方法与修饰类演示与解析</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="comment">//作用于类的所有对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修饰一个类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">(<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (SynchronizedExample2.class) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                log.info(<span class="string">"test1 &#123;&#125; - &#123;&#125;"</span>, j, i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 修饰一个静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">(<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            log.info(<span class="string">"test2 &#123;&#125; - &#123;&#125;"</span>, j, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SynchronizedExample2 example1 = <span class="keyword">new</span> SynchronizedExample2();</span><br><span class="line">        SynchronizedExample2 example2 = <span class="keyword">new</span> SynchronizedExample2();</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            example1.test1(<span class="number">1</span>);</span><br><span class="line">            <span class="comment">//example1.test2(1);</span></span><br><span class="line">        &#125;);</span><br><span class="line">        executorService.execute(() -&gt; &#123;</span><br><span class="line">            example2.test1(<span class="number">2</span>);</span><br><span class="line">            <span class="comment">//example2.test2(2);</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面类的执行结果，同一个类的不同对象执行同步修饰的方法，执行的顺序是同步的</p><h5 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h5><ol><li>synchronized ：不可中断锁，适合竞争不激烈，可读性较好</li><li>Lock：可中断锁，多样化同步，竞争激烈时能维持常态</li><li>Atomic：竞争激烈时能维持常态，比Lock性能好；只能同步一个值</li></ol><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a>可见性</h4><p>​    一个线程对主内存的修改可以及时的被其他线程观察到。</p><p>​    导致共享变量在线程间不可见的原因：</p><ol><li>线程交叉执行</li><li>重排序结合线程交叉执行</li><li>共享变量更新后的值没有在工作内存与主存间及时更新</li></ol><p>对于可见性，JVM提供了 <code>synchronized</code> 和 <code>volatile</code></p><h5 id="synchronized-1"><a href="#synchronized-1" class="headerlink" title="synchronized"></a>synchronized</h5><p>​    JMM关于synchronized的两条规定：</p><ul><li>线程解锁前，必须把共享变量的最新值刷新到主内存</li><li>线程加锁时，将清空工作内存中共享变量的值，从而使用共享变量时需要从主内存中重新读取最新的值（注意：加锁与解锁是同一把锁）</li></ul><h5 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h5><h6 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h6><p>​    通过加入<strong>内存屏障</strong>和<strong>禁止重排序</strong>优化来实现</p><ul><li><p>对volatile变量<strong>写操作</strong>时，会在写操作<strong>后</strong>加入一条<strong>store屏障</strong>指令，将本地内存中的共享变量值刷新到主内存中<img src="images/volatile-1.png" alt=""></p></li><li><p>对volatile变量<strong>读操作</strong>是，会在读操作<strong>前</strong>加入一条<strong>load屏障</strong>指令，从主内存中读取共享变量<img src="images/volatile-2.png" alt=""></p><p>​</p><p>通过上面两点，任何时候，不同的线程总能看到该变量的最新值。所有的指令操作都是CPU级别的</p></li></ul><h6 id="Verification"><a href="#Verification" class="headerlink" title="Verification"></a>Verification</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountExample4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请求总数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> clientTotal = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时并发执行的线程数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> threadTotal = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">final</span> Semaphore semaphore = <span class="keyword">new</span> Semaphore(threadTotal);</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(clientTotal);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clientTotal ; i++) &#123;</span><br><span class="line">            executorService.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();</span><br><span class="line">                    add();</span><br><span class="line">                    semaphore.release();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    log.error(<span class="string">"exception"</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">                countDownLatch.countDown();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        executorService.shutdown();</span><br><span class="line">        log.info(<span class="string">"count:&#123;&#125;"</span>, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出结果是线程不安全的。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过例子可以得知，即使通过volatile修饰变量，但依然无法保证线程安全</p><p>原因分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    count++; <span class="comment">//分3步</span></span><br><span class="line">    <span class="comment">//1.取出当前count值</span></span><br><span class="line">    <span class="comment">//2.count + 1</span></span><br><span class="line">    <span class="comment">//3.count 重新写回主存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>假设同时有两个线程进行操作，两个线程同时执行到第一步（从内存中读取最新值）得到一样的最新的结果，然后进入第二步（+1操作）并进行第三步（从新写回主存）。尽管第一步获取的值是一样的，但是同时将+1后的操作写回主存，这样就会丢掉某个+1的操作，这样就会出现线程不安全问题</p><p>结论：</p><ul><li>volatile进行加操作线程不安全的，不适合计数场景</li><li>volatile关键字不具有原子性</li></ul><h6 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h6><p>​    使用volatile必须具备两个条件</p><ul><li>对变量的写操作，不依赖于当前值</li><li>该变量没有包含在具有其他变量的不变式子中</li></ul><p>因此volatile适合作为状态的标记量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">boolean</span> inited = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程1</span></span><br><span class="line">context = loadContext();</span><br><span class="line">inited = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//线程2</span></span><br><span class="line"><span class="keyword">while</span>(!inited)&#123;</span><br><span class="line">    sleep();</span><br><span class="line">&#125;</span><br><span class="line">doSomethingWithConfig(context);</span><br></pre></td></tr></table></figure><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a>有序性</h4><p>​    JAVA内存模型中，允许编译器和处理器对指令进行重排序，但是重排序过程不会影响到单线程程序的执行，却会影响到多线程并发执行的正确性</p><p>​    volatile、synchronized、Lock：通过volatile、synchronized、Lock保证一定的有序性。显然，synchronized、Lock保证每一个时刻只有一个线程可以执行被同步的代码，相当于让线程顺序执行同步代码，从而保证有序性。另外，JMM具备一些先天的有序性，即不需要额外的手段，就能保证有序性，即Happens-before原则，<strong>如果两个操作的执行次序，没有办法通过Happens-before原则推到出来，虚拟机进行随意的重排序，那么就不能保证有序行</strong>。</p><h6 id="happens-before"><a href="#happens-before" class="headerlink" title="happens-before"></a>happens-before</h6><ul><li><strong>程序次序规则</strong>：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作</li></ul><p>(个人理解：一段程序代码的执行，在单个线程中看起来是有序的，程序看起来的执行是按照代码的顺序执行的，因为虚拟机可能会对指令进行重排序，虽然进行了重排序，但是最终结果是与程序顺序执行的结果是一致的，只会对不存在数据依赖的指令进行重排序，因此在单个线程中是有序执行的。这条规则是保证程序在单线程中执行结果的正确性，但无法保证多线程执行结果的正确性)</p><ul><li><strong>锁定规则</strong>：一个unLock操作先行发生于后面对同一个锁额lock操作；</li><li><strong>volatile变量规则</strong>：对一个变量的写操作先行发生于后面对这个变量的读操作；</li><li><strong>传递规则</strong>：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C；</li><li><strong>线程启动规则</strong>：Thread对象的start()方法先行发生于此线程的每个一个动作；</li><li><strong>线程中断规则</strong>：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生；</li><li><strong>线程终结规则</strong>：线程中所有的操作都先行发生于线程的终止检测，我们可以通过Thread.join()方法结束、Thread.isAlive()的返回值手段检测到线程已经终止执行；</li><li><strong>对象终结规则</strong>：一个对象的初始化完成先行发生于他的finalize()方法的开始；</li></ul><h3 id="安全发布对象"><a href="#安全发布对象" class="headerlink" title="安全发布对象"></a>安全发布对象</h3><p>​    多线程并发环境下，线程安全极为重要。往往一些问题的发生都是由于不正确的发布了对象造成了对象逸出而引起的，因此如果系统开发中需要发布一些对象，必须要做到安全发布，以免造成安全隐患。</p><ul><li><strong>发布对象</strong>：使一个对象能够被当前范围之外的代码所使用</li><li><p><strong>对象逸出</strong>：一种错误的发布情况，当一个对象还没有构造完成时，就使它被其他线程所见</p><pre><code>在我们的日常开发中，经常要发布一些对象，比如通过类的非私有方法返回对象的引用，或者通过公有静态变量发布对象。</code></pre></li></ul><h4 id="发布与逸出"><a href="#发布与逸出" class="headerlink" title="发布与逸出"></a>发布与逸出</h4><h5 id="发布对象"><a href="#发布对象" class="headerlink" title="发布对象"></a>发布对象</h5><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafePublish</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] states = &#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getStates() &#123;</span><br><span class="line">        <span class="keyword">return</span> states;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        UnsafePublish unsafePublish = <span class="keyword">new</span> UnsafePublish();</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, Arrays.toString(unsafePublish.getStates()));</span><br><span class="line"></span><br><span class="line">        unsafePublish.getStates()[<span class="number">0</span>] = <span class="string">"d"</span>;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, Arrays.toString(unsafePublish.getStates()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[a,b,c]</span><br><span class="line">[d,b,c]</span><br></pre></td></tr></table></figure><p>结果分析：</p><p>​    以上代码通过public访问级别发布了类的域，在类的外部任何线程都可以访问这些域，这样发布对象是不安全的，因为我们无法假设，其他线程不会修改这些域，从而造成类状态的错误。</p><h5 id="对象逸出"><a href="#对象逸出" class="headerlink" title="对象逸出"></a>对象逸出</h5><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="meta">@NotRecommend</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Escape</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> thisCanBeEscape = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Escape</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> InnerClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">InnerClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="comment">//这里可以在Escape对象完成构造前提前引用到Escape的private变量</span></span><br><span class="line">            log.info(<span class="string">"&#123;&#125;"</span>, Escape.<span class="keyword">this</span>.thisCanBeEscape);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Escape();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类分析：</p><p>​    在构造对象时发生，它会使类的this引用发生逸出，从而使线程看到一个构造不完整的对象。</p><p>​    上面的内部类的实例包含了对封装实例隐含的引用，这样在对象没有被正确构造之前，就会被发布，有可能会有不安全因素。 </p><p>​    一个导致this引用在构造期间逸出的错误，是在构造函数中启动一个线程，无论是隐式启动线程，还是显式启动线程，都会造成this引用逸出，新线程总会在所属对象构造完毕前看到它。所以如果要在构造函数中创建线程，那么不要启动它，而应该采用一个专有的start或initialize方法来统一启动线程。我们可以采用工厂方法和私有构造函数来完成对象创建和监听器的注册，这样就可以避免不正确的创建。记住，我们的目的是，在对象未完成构造之前，不可以将其发布。 </p><h4 id="安全发布对象-1"><a href="#安全发布对象-1" class="headerlink" title="安全发布对象"></a>安全发布对象</h4><p>​    安全发布对象的四种方法：</p><ol><li>在静态初始化函数中初始化一个对象引用</li><li>将对象的引用保存到volatile类型域或者AtomicReference对象中</li><li>将对象的引用保存到某个正确构造对象的final类型域中</li><li>将对象的引用保存到一个由锁保护的域中</li></ol><h5 id="案例分析"><a href="#案例分析" class="headerlink" title="案例分析"></a>案例分析</h5><p>​    Spring 框架中，Spring管理的类都是单例模式。如何保证一个实例只被初始化一次，且线程安全？通过不同单例的写法，具体描述安全发布对象的四种方法：</p><h6 id="普通单例模式"><a href="#普通单例模式" class="headerlink" title="普通单例模式"></a>普通单例模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式</span></span><br><span class="line"><span class="comment"> * 单例实例在第一次使用时进行创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//可能这里会存在很多的操作</span></span><br><span class="line">        <span class="comment">//如资源加载、运算等</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample1 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="comment">// 单线毫无问题</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//多线程环境下存在线程安全问题</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonExample1();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式</span></span><br><span class="line"><span class="comment"> * 单例实例在类装载时进行创建</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 缺点：1.若构造方法中存在过多的处理、会导加载缓慢，从而引起性能问题</span></span><br><span class="line"><span class="comment"> *       2.只进行加载，并无实际调用，导致资源浪费</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample2 instance = <span class="keyword">new</span> SingletonExample2();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式</span></span><br><span class="line"><span class="comment"> * 单例实例在第一次使用时进行创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="meta">@NotRecommend</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample3 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="comment">//通过添加synchronized关键字，保证线程安全，但是带来了性能的开销（不希望出现的）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonExample3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> SingletonExample3();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="双重检测机制"><a href="#双重检测机制" class="headerlink" title="双重检测机制"></a>双重检测机制</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式 -》 双重同步锁单例模式</span></span><br><span class="line"><span class="comment"> * 单例实例在第一次使用时进行创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample4 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123; <span class="comment">// 双重检测机制        // B</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonExample4.class) &#123; <span class="comment">// 同步锁</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonExample4(); <span class="comment">// A - 3</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//这样的双重检测机制是线程不安全的</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1、memory = allocate() 分配对象的内存空间</span></span><br><span class="line">    <span class="comment">// 2、ctorInstance() 初始化对象</span></span><br><span class="line">    <span class="comment">// 3、instance = memory 设置instance指向刚分配的内存</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//多线程环境下</span></span><br><span class="line">    <span class="comment">// JVM和cpu优化，发生了指令重排</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、memory = allocate() 分配对象的内存空间</span></span><br><span class="line">    <span class="comment">// 3、instance = memory 设置instance指向刚分配的内存</span></span><br><span class="line">    <span class="comment">// 2、ctorInstance() 初始化对象</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//假设存在线程A、B同时进入双重检测机制</span></span><br><span class="line">    <span class="comment">//当线程A执行到 instance = new SingletonExample4(); // A - 执行到指令的第三步进行内存分配，但是未初始化对象</span></span><br><span class="line">    <span class="comment">//B执行到 if (instance == null) &#123; // 双重检测机制     //b发现instance不为空，直接返回对象，实上对象初始化并未开始</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉模式 -》 双重同步锁单例模式</span></span><br><span class="line"><span class="comment"> * 单例实例在第一次使用时进行创建</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample5</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、memory = allocate() 分配对象的内存空间</span></span><br><span class="line">    <span class="comment">// 2、ctorInstance() 初始化对象</span></span><br><span class="line">    <span class="comment">// 3、instance = memory 设置instance指向刚分配的内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单例对象 volatile + 双重检测机制 -&gt; 禁止指令重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> SingletonExample5 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample5 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123; <span class="comment">// 双重检测机制        // B</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingletonExample5.class) &#123; <span class="comment">// 同步锁</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> SingletonExample5(); <span class="comment">// A - 3</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="静态域初始化"><a href="#静态域初始化" class="headerlink" title="静态域初始化"></a>静态域初始化</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉模式</span></span><br><span class="line"><span class="comment"> * 单例实例在类装载时进行创建</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 静态域与静态代码块是顺序执行的，若将1 2 处位置进行交换则会出现空指针异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample6</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.</span></span><br><span class="line">    <span class="comment">// 单例对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingletonExample6 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> SingletonExample6();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态的工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample6 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(getInstance().hashCode());</span><br><span class="line">        System.out.println(getInstance().hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="最安全的枚举模式"><a href="#最安全的枚举模式" class="headerlink" title="最安全的枚举模式"></a>最安全的枚举模式</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举模式：最安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="meta">@Recommend</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonExample7</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 私有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingletonExample7</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingletonExample7 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> SingletonExample7 singleton;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// JVM保证这个方法绝对只调用一次</span></span><br><span class="line">        Singleton() &#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> SingletonExample7();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> SingletonExample7 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> singleton;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程安全策略"><a href="#线程安全策略" class="headerlink" title="线程安全策略"></a>线程安全策略</h3><p>​    创建后状态不能被修改的对象叫作不可变对象。不可变对象天生就是线程安全的。它们的常量（变量）是在构造函数中创建的，既然它们的状态无法被修改，那么这些常量永远不会被改变——不可变对象永远是线程安全的。</p><p>不可变对象需要满足的条件</p><ul><li>对象创建以后其状态就不能修改</li><li>对象所有域都是final类型</li><li>对象是正确创建的（在对象创建期间，this引用没有逸出）</li></ul><h4 id="final"><a href="#final" class="headerlink" title="final"></a>final</h4><p>​    final关键字：类、方法、变量</p><ul><li>修饰类：不能被继承，final类中的成员属性可以根据需要设置为final，但final类中所有的成员方法都被隐式指定为final方法。一般不建议将类设置为final类型。可以参考String类。</li><li>修饰方法：1）锁定方法不被继承类修改；2）效率</li><li>修饰变量：1）基本数据类型变量，初始化后便不能进行修改；2）引用类型变量，初始化之后不能再指向别的引用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@NotThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableExample1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Integer a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String b = <span class="string">"2"</span>;</span><br><span class="line">    <span class="comment">//引用类型不允许引用指向改变，但是对象值还是可以进行修改的  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; map = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        a = 2;              //编译时报错</span></span><br><span class="line"><span class="comment">//        b = "3";            //编译时报错</span></span><br><span class="line"><span class="comment">//        map = Maps.newHashMap();   //编译时报错</span></span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">3</span>);       <span class="comment">//容易引发线程安全问题</span></span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, map.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以修饰参数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        a = 1;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h4><p>​    java提供Collections工具类，在类中提供了多种不允许修改的方法</p><p>​    Collections.unmodifiableXXX：Collection、List、Set、Map…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableExample2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; map = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        map.put(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">        <span class="comment">//处理过后的map是不可以再进行修改的</span></span><br><span class="line">        map = Collections.unmodifiableMap(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//允许操作，但是操作会报错，扔出异常</span></span><br><span class="line">        map.put(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;"</span>, map.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Collections</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K,V&gt; <span class="function">Map&lt;K,V&gt; <span class="title">unmodifiableMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UnmodifiableMap&lt;&gt;(m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnmodifiableMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object key, Object value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">replace</span><span class="params">(K key, V oldValue, V newValue)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Guava"><a href="#Guava" class="headerlink" title="Guava"></a>Guava</h4><p>​    谷歌的Guava提供类似Java中的Collections</p><p>​    ImmutableXXX：Collection、List、Set、Map…</p><p><code>pom.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>23.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ThreadSafe</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImmutableExample3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ImmutableList&lt;Integer&gt; list = ImmutableList.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> List&lt;Integer&gt; lists = ImmutableList.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ImmutableSet set = ImmutableSet.copyOf(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ImmutableMap&lt;Integer, Integer&gt; map = ImmutableMap.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> ImmutableMap&lt;Integer, Integer&gt; map2 = ImmutableMap.&lt;Integer, Integer&gt;builder()</span><br><span class="line">            .put(<span class="number">1</span>, <span class="number">2</span>).put(<span class="number">3</span>, <span class="number">4</span>).put(<span class="number">5</span>, <span class="number">6</span>).build();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(map2.get(<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程封闭</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>JAVA并发编程与高并发解决方案 - 并发编程 七</title>
      <link href="/2018/06/21/concurrency/concurrency-7/"/>
      <url>/2018/06/21/concurrency/concurrency-7/</url>
      <content type="html"><![CDATA[<h1 id="JAVA并发编程与高并发解决方案-并发编程-七"><a href="#JAVA并发编程与高并发解决方案-并发编程-七" class="headerlink" title="JAVA并发编程与高并发解决方案 - 并发编程 七"></a>JAVA并发编程与高并发解决方案 - 并发编程 七</h1><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">作者</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">2018.5.8</td><td style="text-align:center">huangz</td><td style="text-align:center">多线程并发拓展</td></tr></tbody></table><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3>]]></content>
      
      
    </entry>
    
    <entry>
      <title>新建社区版gitlab</title>
      <link href="/2018/06/13/new-gitlab/"/>
      <url>/2018/06/13/new-gitlab/</url>
      <content type="html"><![CDATA[<p>搭建社区版gitlab </p><p>gitlab 安装下载地址:<a href="https://hub.docker.com/r/gitlab/gitlab-ce/" target="_blank" rel="noopener">https://hub.docker.com/r/gitlab/gitlab-ce/</a></p><h1 id="前提：安装docker，"><a href="#前提：安装docker，" class="headerlink" title="前提：安装docker，"></a>前提：安装docker，</h1><p>参考  <a href="https://blog.csdn.net/chengyuqiang/article/details/78886986" target="_blank" rel="noopener">https://blog.csdn.net/chengyuqiang/article/details/78886986</a></p><h2 id="修改yum镜像源"><a href="#修改yum镜像源" class="headerlink" title="修改yum镜像源"></a>修改yum镜像源</h2><p>下载安装速度可能会慢:修改CentOS默认yum源为国内yum镜像源 参考 <a href="https://blog.csdn.net/inslow/article/details/54177191" target="_blank" rel="noopener">https://blog.csdn.net/inslow/article/details/54177191</a></p><p>修改CentOS默认yum源为mirrors.aliyun.com</p><p>1、首先备份系统自带yum源配置文件/etc/yum.repos.d/CentOS-Base.repo<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span></span><br></pre></td></tr></table></figure></p><p>2、进入yum源配置文件所在的文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># cd /etc/yum.repos.d/</span></span><br></pre></td></tr></table></figure></p><p>3、下载ailiyun的yum源配置文件到/etc/yum.repos.d/<br>CentOS7<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span></span><br></pre></td></tr></table></figure></p><p>4、新增docker镜像源<br>在/etc/yum.repos.d/CentOS-Base.repo 文件新增下面命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[dockerrepo]  </span><br><span class="line">name=Docker Repository  </span><br><span class="line">baseurl=https://yum.dockerproject.org/repo/main/centos/<span class="variable">$releasever</span>/  </span><br><span class="line">enabled=1  </span><br><span class="line">gpgcheck=1  </span><br><span class="line">gpgkey=https://yum.dockerproject.org/gpg</span><br></pre></td></tr></table></figure><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p>1、搜索docker<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum search docker</span><br></pre></td></tr></table></figure></p><p>2、安装docker<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y docker</span><br></pre></td></tr></table></figure></p><p>3、启动Docker<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></p><p>4、查看状态<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure></p><h1 id="安装gitlab"><a href="#安装gitlab" class="headerlink" title="安装gitlab"></a>安装gitlab</h1><p>访问地址:<a href="https://hub.docker.com/r/gitlab/gitlab-ce/" target="_blank" rel="noopener">https://hub.docker.com/r/gitlab/gitlab-ce/</a></p><p><img src="img/new-gitlab/gitlab_adr.jpg" alt="Alt text"></p><blockquote><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull gitlab/gitlab-ce</span><br></pre></td></tr></table></figure></blockquote><blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2></blockquote><p>   点击<a href="https://docs.gitlab.com/omnibus/docker/" target="_blank" rel="noopener">Using GitLab Docker images</a> 跳转到 安装页面,执行下面命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">    --hostname gitlab.example.com \</span><br><span class="line">    --publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    --volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">    --volume /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">    --volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></p><p>   注意:hostname ,可修改为本地ip地址，端口号也可以修改，比如下</p>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">    --hostname 192.168.157.130 \</span><br><span class="line">    --publish 8929:80 --publish 2289:22 \</span><br><span class="line">    --name gitlab \</span><br><span class="line">    --restart always \</span><br><span class="line">    --volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">    --volume /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">    --volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">    gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure><blockquote><h2 id="基本命令操作"><a href="#基本命令操作" class="headerlink" title="基本命令操作"></a>基本命令操作</h2></blockquote><blockquote><h3 id="停止gitlab"><a href="#停止gitlab" class="headerlink" title="停止gitlab"></a>停止gitlab</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stop gitlab</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="删除gitlab"><a href="#删除gitlab" class="headerlink" title="删除gitlab"></a>删除gitlab</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker rm gitlab</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="更新最新的gitlab"><a href="#更新最新的gitlab" class="headerlink" title="更新最新的gitlab"></a>更新最新的gitlab</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker pull gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></blockquote><blockquote><h3 id="创建gitlab"><a href="#创建gitlab" class="headerlink" title="创建gitlab"></a>创建gitlab</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --detach \</span><br><span class="line">--hostname gitlab.example.com \</span><br><span class="line">--publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">--volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">--volume /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">--volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure></blockquote><blockquote><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://192.168.157.130/" target="_blank" rel="noopener">http://192.168.157.130/</a></p></blockquote>]]></content>
      
      
    </entry>
    
    <entry>
      <title>myHexo</title>
      <link href="/2018/06/11/myHexo/"/>
      <url>/2018/06/11/myHexo/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>在widow上搭建hexo,并部署到Github</title>
      <link href="/2018/06/11/hexo-deploy/"/>
      <url>/2018/06/11/hexo-deploy/</url>
      <content type="html"><![CDATA[<p>在widow上搭建hexo,并部署到Github</p><blockquote><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo官网</a>可参考官网中文网站文档和api</p></blockquote><blockquote><p>相关参考博客:<a href="https://www.cnblogs.com/cherishzy/p/5694658.html" target="_blank" rel="noopener">cherishzy</a></p></blockquote><h1 id="widow上搭建hexo"><a href="#widow上搭建hexo" class="headerlink" title="widow上搭建hexo"></a>widow上搭建hexo</h1><h2 id="前提："><a href="#前提：" class="headerlink" title="前提："></a>前提：</h2><h3 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h3><p> 前往Git官网下载Windows版本压缩包，下载完成后解压安装。</p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p> 前往Node.js官方下载网站，下载Node.js官方安装包，下载完成后同样解压安装。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>到目前为止，安装Hexo所需要的环境已将安装完成，下一步只需要安装Hexo便可以了。<br>点击鼠标右键，看是否有Git bash Here选项。如果没有可以前往Git安装根目录，启动git-base.exe也可以。</p><p>在命令行中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>Hexo 便安装完成了</p><h3 id="创建Hexo文件夹"><a href="#创建Hexo文件夹" class="headerlink" title="创建Hexo文件夹"></a>创建Hexo文件夹</h3><p> 找到想要放置博客的文件夹，比如（F:\Hexo），在该目录下鼠标右击打开Gitbash工具，（右键菜单中没有该选项的可以用cmd命令cd等进入该文件夹）。执行下面的语句，会在F:\Hexo文件夹下创建node_modules文件夹：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p><p>这里init后面可以跟文件目录，比如我想在F:\Hexo下创建博客文件夹，那么可以用下面的命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init F:\Hexo</span><br></pre></td></tr></table></figure></p><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>在Hexo目录下，执行以下命令，你会发现F:\Hexo\node_modules目录下多了好多文件夹<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><p>目前为止，已经搭建好自己的Hexo博客了，但是只能在本机上查看。执行以下两个命令（在F:\Hexo目录下），然后在浏览器中输入 localhost:4000 就可以看到自己的博客了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate    //打包加载生成html页面</span><br><span class="line"></span><br><span class="line">$ hexo server      //启动服务器</span><br></pre></td></tr></table></figure><h3 id="Hexo目录结构"><a href="#Hexo目录结构" class="headerlink" title="Hexo目录结构"></a>Hexo目录结构</h3><p><img src="img/hexo-deploy/mulu.jpg" alt="Alt text"></p><h4 id="注意-想访问到图片，需要根据路径把图片放在public目录下面"><a href="#注意-想访问到图片，需要根据路径把图片放在public目录下面" class="headerlink" title="注意:想访问到图片，需要根据路径把图片放在public目录下面"></a>注意:想访问到图片，需要根据路径把图片放在public目录下面</h4><h3 id="博客实例"><a href="#博客实例" class="headerlink" title="博客实例"></a>博客实例</h3><p><img src="img/hexo-deploy/blog.jpg" alt="Alt text"></p><h3 id="新增加文章"><a href="#新增加文章" class="headerlink" title="新增加文章"></a>新增加文章</h3><p>  如果想增加新文章怎么做的？有俩种方法</p><blockquote><p> 命令<br>  你可以执行下列命令来创建一篇新文章。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure></p></blockquote><p>您可以在命令中指定文章的布局（layout），默认为 post，可以通过修改 _config.yml 中的 default_layout 参数来指定默认布局。<br><img src="img/hexo-deploy/newatick.jpg" alt="Alt text"></p><blockquote><p>直接在Hexo\source复制一份md文件</p></blockquote><h3 id="主题装换"><a href="#主题装换" class="headerlink" title="主题装换"></a>主题装换</h3><p> 博客的风格和布局可以随意变动,<br> 访问hexo官网<a href="https://hexo.io/themes/" target="_blank" rel="noopener">themes</a>可看到不同的主题，可随意选择自己喜欢的主题作为自己博客的主题,点击themes图片跳转到使用该主题的例子页面，点击图片下面的标题文字，跳转到github上，不同的themes安装方法不一样，一定要根据README.md文件，下载、安装主题，</p><p> 例子:</p><h4 id="安装ARIA主题"><a href="#安装ARIA主题" class="headerlink" title="安装ARIA主题"></a>安装ARIA主题</h4><p>   首先在themes页面找到ARIA主，点击图片下面ARIA文字，跳转到github页面，阅读README.md文件，根据Usage部分执行命令</p><p>   打开widow下git cmd ，cd 进入E:\Hexo</p><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-renderer-njucks hexo-renderer-stylus hexo-generator-search hexo-generator-feed</span><br></pre></td></tr></table></figure><h5 id="克隆ARIA-themes到themes-aria目录"><a href="#克隆ARIA-themes到themes-aria目录" class="headerlink" title="克隆ARIA themes到themes/aria目录"></a>克隆ARIA themes到themes/aria目录</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/AlynxZhou/hexo-theme-aria themes/aria</span><br></pre></td></tr></table></figure><p>可以查看到Hexo/themes多了aria 文件夹<br><img src="img/hexo-deploy/drict.jpg" alt="Alt text"></p><h5 id="修改Hexo文件夹下-config-yml"><a href="#修改Hexo文件夹下-config-yml" class="headerlink" title="修改Hexo文件夹下_config.yml"></a>修改Hexo文件夹下_config.yml</h5><p>修改theme: aria，并增加需要的配置<br>     <img src="img/hexo-deploy/aria-themes.jpg" alt="Alt text"></p><h5 id="Hexo-themes-aria文件夹下复制-config-yml-example-为-config-yml"><a href="#Hexo-themes-aria文件夹下复制-config-yml-example-为-config-yml" class="headerlink" title="Hexo/themes/aria文件夹下复制_config.yml.example 为_config.yml"></a>Hexo/themes/aria文件夹下复制_config.yml.example 为_config.yml</h5><h5 id="重新启动"><a href="#重新启动" class="headerlink" title="重新启动"></a>重新启动</h5><p>  重新加载生成页面并启动hexo，然后在浏览器中输入 localhost:4000 就可以看aria主题博客</p><pre><code class="bash">$ hexo generate $ hexo server</code></pre><p> <img src="img/hexo-deploy/githexo.jpg" alt="Alt text"></p><h1 id="部署到Github-上"><a href="#部署到Github-上" class="headerlink" title="部署到Github 上"></a>部署到Github 上</h1><h2 id="注册Github账户"><a href="#注册Github账户" class="headerlink" title="注册Github账户"></a>注册Github账户</h2><p>前往Github网站，注册一个新用户。用邮箱注册的一定前往邮箱去验证邮件。要不然之后可能会有小问题。</p><h2 id="创建一个新的repository"><a href="#创建一个新的repository" class="headerlink" title="创建一个新的repository"></a>创建一个新的repository</h2><p>在自己的Github主页右下角,创建一个新的repository。比如我的Github用户名为Gitzhaoyang，那么我创建的repository的名字应该是 gitzhaoyang.github.io 。</p><h2 id="添加reponsitories"><a href="#添加reponsitories" class="headerlink" title="添加reponsitories"></a>添加reponsitories</h2><p>这里严重注意:</p><p>一定要以你的Github用户名.github.io创建。假如我没有用lmhzuo.github.io而是用了tuy.github.io，那么当我浏览器访问博客的时候会出现404错误。这里并不是没有部署成功，而是把它部署在了这里:<a href="http://tuy.github.io/tuy.github.io。所以，如果想直接lmhzuo.github.io访问，那么就需要和用户名保持一致" target="_blank" rel="noopener">http://tuy.github.io/tuy.github.io。所以，如果想直接lmhzuo.github.io访问，那么就需要和用户名保持一致</a></p><h2 id="将本地的文件部署（上传）到Github账户中"><a href="#将本地的文件部署（上传）到Github账户中" class="headerlink" title="将本地的文件部署（上传）到Github账户中"></a>将本地的文件部署（上传）到Github账户中</h2><p>编辑本地Hexo目录下文件_comfig.yml，在最后添加如下代码(我使用第二种)</p><ol><li>后续需要输入账号密码<pre><code class="bash">deploy: <span class="built_in">type</span>: git repository: http://github.com/LmHZuo/lmhzuo.github.io.git branch: master</code></pre></li><li><p>直接输入账号密码</p><pre><code class="bash">deploy: <span class="built_in">type</span>: git repository:  https://github账户名:密码@github.com/LmHZuo/lmhzuo.github.io.git branch: master</code></pre></li></ol><p>.yml文件对格式规范要求很严格，type: repository: branch: 前面有两个空格，冒号后面都有一个空格。</p><p>执行以下指令即可完成部署（如果提示错误，可以看下面注意）：</p><pre><code class="bash">$ hexo generate$ hexo deploy  //上传代码到github</code></pre><h2 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><em>注意：</em></h2><ul><li><p>有些用户没有设置Github的SSH，会导致上面两句失败。SSH的介绍和设置方法可以查看官方教程,配置起来很简单。如果英文看不明白或者过程中出现小问题，可以查看我写的SSH设置教程，是对官方教程的解释和扩展，针对配置过程中的小问题都有解决办法。</p></li><li><p>每次修改本地文件，都需要命令$ hexo generate才能保存。而且每次使用命令都必须在Hexo根目录下使用。</p></li><li><p>如果你在执行$ hexo deloy,如果提示 ERROR Deployer not found: git，那说明你没有安装hexo-deployer-git依赖包，进入F:\Hexo\node_modules发现真的没有hexo-deployer-git，不用担心，只需要输入下面命令创建hexo-deployer-git依赖包，然后再执行hexo deploy就能上传成功了</p><pre><code class="bash">$ npm install hexo-deployer-git --save</code></pre></li><li>如果你是windows用户，那么当你执行$ hexo deploy命令的时候，可能会先后出现提示框让你输入你的Github用户名和Github密码，只要输入正确，上传就没有问题。</li></ul><p>好了，现在我们的博客已经在Github上面部署成功了，可以在浏览器访问lmhzuo.github.io试试了。</p><p>提示：</p><p>现在Hexo支持更加简单的命令格式了，比如：</p><pre><code class="bash">hexo s == hexo serverhexo g == hexo generatehexo d == hexo deployhexo n == hexo new</code></pre>]]></content>
      
      
    </entry>
    
    <entry>
      <title>JVM、nginx、tomcat调试</title>
      <link href="/2017/07/07/Nexus%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2017/07/07/Nexus%E6%90%AD%E5%BB%BAMaven%E7%A7%81%E6%9C%8D%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="Nexus-3-x搭建Maven私服及使用教程"><a href="#Nexus-3-x搭建Maven私服及使用教程" class="headerlink" title="Nexus 3.x搭建Maven私服及使用教程"></a>Nexus 3.x搭建Maven私服及使用教程</h1><table><thead><tr><th style="text-align:center">版本</th><th style="text-align:center">备注</th><th style="text-align:center">编制人</th><th style="text-align:center">日期</th></tr></thead><tbody><tr><td style="text-align:center">V1.0</td><td style="text-align:center">Nexus 3.x搭建Maven私服及使用</td><td style="text-align:center">huangz</td><td style="text-align:center">2017-07-07</td></tr></tbody></table><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>一般maven项目开发，我们所需的所有构件都需要通过maven的中央仓库和第三方的Maven仓库下载到本地。而一个团队中的所有人都重复地从maven仓库下载构件无疑加大了仓库的负载和浪费了外网带宽，如果网速慢的话，还会影响项目的进程。很多情况下，项目的开发都是在内网进行的，连接不到maven仓库怎么办呢？开发的公共构件怎么让其它项目使用？这个时候我们都会选择为自己的团队搭建属于自己的maven私服，这样既节省了网络带宽也会加速项目搭建的进程，当然前提条件就是你的私服中拥有项目所需的所有构件。</p><p>这里的私服是指私有服务器，是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构件。有了私服之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载（见下图）。</p><p>搭建Maven私服，我们选择的是Nexus Repository OSS。它是一个强大的Maven仓库管理器，它极大地简化了本地内部仓库的维护和外部仓库的访问，最重要的是，它是免费开源的！</p><p><img src="img/私服示例图.png" alt="" title="私服示例图"></p><blockquote><p>注：</p></blockquote><blockquote><p>图中的远程仓库处于外网，而私服和本地仓库处于内网</p></blockquote><h2 id="搭建Maven私服前的说明或准备"><a href="#搭建Maven私服前的说明或准备" class="headerlink" title="搭建Maven私服前的说明或准备"></a>搭建Maven私服前的说明或准备</h2><ul><li><p>搭建操作系统为Ubuntu 16.04，Windows也有安装包，但没有尝试过</p></li><li><p>Apache Maven版本为3.3.9，需要提前安装好，安装过程这里不做讲解，有需要自行谷歌或百度</p></li><li><p>Intellij IDEA版本为2017.1.3，用于项目发布构建到私服上的测试</p></li></ul><h2 id="搭建Maven私服步骤"><a href="#搭建Maven私服步骤" class="headerlink" title="搭建Maven私服步骤"></a>搭建Maven私服步骤</h2><h3 id="1、到官网下载Nexus安装包"><a href="#1、到官网下载Nexus安装包" class="headerlink" title="1、到官网下载Nexus安装包"></a>1、到官网下载Nexus安装包</h3><ul><li><p>Nexus Repository OSS是免费开源的，我们这里下载与操作系统相对应的最新版<code>Nexus Repository Manager OSS 3.x - Unix</code></p></li><li><p>其下载链接为：<a href="https://www.sonatype.com/download-oss-sonatype" target="_blank" rel="noopener">https://www.sonatype.com/download-oss-sonatype</a> ，该链接可能需要翻墙，打开得比较慢</p></li></ul><h3 id="2、解压安装Nexus"><a href="#2、解压安装Nexus" class="headerlink" title="2、解压安装Nexus"></a>2、解压安装Nexus</h3><ul><li><p>将下载好的安装包拷贝到要解压的目录下</p></li><li><p>然后在终端进入安装包所在的目录，使用命令<code>tar -zxvf ./nexus-3.3.2-02-unix.tar.gz</code>进行解压</p></li><li><p>解压完后，通过<code>cd nexus</code>命令进入目录，执行<code>ls</code>命令可看到如下图的文件：</p></li></ul><p><img src="img/解压文件.png" alt="无效" title="解压文件"></p><blockquote><p>注：</p></blockquote><blockquote><p>其中，nexus-3.3.2-02目录中存放启动和关闭文件，以及配置文件，而sonatype-work一般存放数据文件，比如构件的数据</p></blockquote><h3 id="3、启动Nexus"><a href="#3、启动Nexus" class="headerlink" title="3、启动Nexus"></a>3、启动Nexus</h3><ul><li><p>在上一步的终端，通过<code>cd nexus-3.3.2-02/bin</code>进入启动文件目录</p></li><li><p>然后，通过命令<code>./nexus start</code>或<code>./nexus run</code>启动Nexus，其中<code>start</code>是后台启动，而<code>run</code>不是，会在终端控制台打印出启动信息</p></li><li><p>启动完成后，打开浏览器，访问<a href="http://localhost:8081/" target="_blank" rel="noopener">http://localhost:8081/</a> 即可看到运行的Nexus，如下图：</p></li></ul><p><img src="img/运行成功.png" alt="无效" title="运行成功"></p><h2 id="Nexus使用"><a href="#Nexus使用" class="headerlink" title="Nexus使用"></a>Nexus使用</h2><h3 id="1、说明"><a href="#1、说明" class="headerlink" title="1、说明"></a>1、说明</h3><ul><li><p>仓库类型说明</p><ul><li><p>group(仓库组类型)：又叫组仓库，用于方便开发人员自己设定仓库</p></li><li><p>hosted(宿主类型)：内部项目的发布仓库（内部开发人员，发布上去存放的仓库），包括为<code>release(发行版)</code>仓库和<code>snapshot(调试版)</code>仓库，创建时最好选择允许重新部署</p></li><li><p>proxy(代理类型)：从远程中央仓库中寻找数据的仓库</p></li><li><p>virtual(虚拟类型)：虚拟仓库（这个基本用不到，重点关注上面三个仓库的使用）</p></li></ul></li><li><p>自带仓库(组)说明</p><ul><li><p>maven-central：proxy类型仓库，是Maven中央库，默认从<a href="https://repo1.maven.org/maven2/" target="_blank" rel="noopener">https://repo1.maven.org/maven2/</a> 拉取jar 包</p></li><li><p>maven-releases：hosted类型仓库，存放私库发行版jar 包</p></li><li><p>maven-snapshots：hosted类型仓库，存放私库快照（调试版本）jar 包</p></li><li><p>maven-public：仓库组类型，把上面三个仓库组合在一起对外提供服务，默认包括<code>maven-central</code>、<code>maven-releases</code>和<code>maven-snapshots</code>三个仓库</p></li></ul></li><li><p>理解图示：</p></li></ul><p><img src="img/理解图示.png" alt="无效" title="理解图示"></p><h3 id="2、登录"><a href="#2、登录" class="headerlink" title="2、登录"></a>2、登录</h3><ul><li>点击右上交的<code>Sign in</code>，输入账号密码（初始化账号为<code>admin</code>，密码为<code>admin123</code>）进行登录，如下图所示：</li></ul><p><img src="img/登录.png" alt="无效" title="登录"></p><blockquote><p>注：</p></blockquote><blockquote><p>登录后建议立即修改密码，点击右上角的<code>admin</code>即可进行修改，这里不做详述</p></blockquote><h3 id="3、添加用户账号"><a href="#3、添加用户账号" class="headerlink" title="3、添加用户账号"></a>3、添加用户账号</h3><ul><li>Nexus允许添加用户账号，然后，对不同的用户进行不同权限的授权，如下图所示：</li></ul><p><img src="img/添加用户.png" alt="无效" title="添加用户"></p><blockquote><p>注：</p></blockquote><blockquote><p>所有字段都是必填的，ID将作为用户名</p></blockquote><blockquote><p>Granted为新建账号进行权限授权，<code>nx-admin</code>为管理员角色，里面配置了最大的权限，不可修改，而<code>nx-anonymous</code>为匿名用户角色，不需要登录，只能查看和下载构件，权限可由管理员进行修改</p></blockquote><blockquote><p>关于权限和角色配置模块，这里就不作介绍了，有兴趣可以查看页面左边的<code>Privileges</code>和<code>Roles</code>菜单</p></blockquote><h3 id="4、将Maven项目CommonUtils发布到Maven私服"><a href="#4、将Maven项目CommonUtils发布到Maven私服" class="headerlink" title="4、将Maven项目CommonUtils发布到Maven私服"></a>4、将Maven项目CommonUtils发布到Maven私服</h3><ul><li>在Maven的配置文件setting.xml的<code>&lt;servers&gt;&lt;/servers&gt;</code>标签中间添加以下配置：</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>******<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p></blockquote><blockquote><p>其中的id可以任意取，password为Nexus的<code>admin</code>用户的密码，默认为admin123</p></blockquote><ul><li>用Intellij IDEA打开CommonUtils项目，并在pom.xml文件中添加下面配置:</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">distributionManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Release<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.20:8081/repository/maven-releases/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus Snapshot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.20:8081/repository/maven-snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshotRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">distributionManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p></blockquote><blockquote><p><code>&lt;repository&gt;&lt;/repository&gt;</code>中配置release仓库，<code>&lt;snapshotRepository&gt;&lt;/snapshotRepository&gt;</code>中配置snapshot仓库</p></blockquote><blockquote><p>其中的id就是Maven的setting.xml文件的server的id，用于发布构件到Maven私服时的认证</p></blockquote><blockquote><p>name可以任意取，url则分别对应release仓库和snapshot仓库的地址，url中的IP就是Maven私服的IP地址</p></blockquote><blockquote><p>发布构件到Maven私服时，会根据pom.xml中的<code>&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</code>是否有<code>SNAPSHOT</code>选择发布到哪个仓库中，有则发布到snapshot仓库，否则发布到release仓库</p></blockquote><ul><li>打开Intellij IDEA的Maven Projects，双击<code>deploy</code>进行发布构件到Maven私服，如下图所示:</li></ul><p><img src="img/发布构件.png" alt="无效" title="发布构件"></p><blockquote><p>注：</p></blockquote><blockquote><p>发布时，如果pom.xml中的<code>&lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;</code>有<code>SNAPSHOT</code>则发布到snapshot仓库，否则发布到release仓库</p></blockquote><h3 id="5、发布第三方jar包-以发布支付宝依赖为例子"><a href="#5、发布第三方jar包-以发布支付宝依赖为例子" class="headerlink" title="5、发布第三方jar包(以发布支付宝依赖为例子)"></a>5、发布第三方jar包(以发布支付宝依赖为例子)</h3><ul><li>调出终端，执行下面命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mvn deploy:deploy-file </span><br><span class="line">  -DgroupId=com.alipay</span><br><span class="line">  -DartifactId=api</span><br><span class="line">  -Dversion=1.0</span><br><span class="line">  -Dpackaging=jar </span><br><span class="line">  -Dfile=/home/quandong/alipay.jar</span><br><span class="line">  -Durl=http://localhost:8081/repository/maven-releases/</span><br><span class="line">  -DrepositoryId=nexus</span><br></pre></td></tr></table></figure><blockquote><p>注:</p></blockquote><blockquote><p>执行命令前确定安装了Maven</p></blockquote><blockquote><p><code>DgroupId</code>构件的组名</p></blockquote><blockquote><p><code>DartifactId</code>构件名称</p></blockquote><blockquote><p><code>Dversion</code>构件版本号</p></blockquote><blockquote><p><code>Dpackaging</code>构件类型，一般为jar</p></blockquote><blockquote><p><code>Dfile</code>构件所在本地路径</p></blockquote><blockquote><p><code>Durl</code>存放构件的仓库url</p></blockquote><blockquote><p><code>DrepositoryId</code>发布构件时的认证身份，之前在Maven的setting.xml文件中配置的server的id</p></blockquote><h3 id="6、发布结果"><a href="#6、发布结果" class="headerlink" title="6、发布结果"></a>6、发布结果</h3><ul><li>到Maven私服查看发布的构件，如下图所示:</li></ul><p><img src="img/发布结果.png" alt="无效" title="发布结果"></p><h3 id="7、其他项目引用发布的CommonUtils构件-引用api构件也一样"><a href="#7、其他项目引用发布的CommonUtils构件-引用api构件也一样" class="headerlink" title="7、其他项目引用发布的CommonUtils构件(引用api构件也一样)"></a>7、其他项目引用发布的CommonUtils构件(引用api构件也一样)</h3><ul><li>在其他项目的pom.xml文件中引入下面的配置，使得项目可以从Maven私服中下载CommonUtils构件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>maven-public<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.20:8081/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.turingdi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commonutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注：</p></blockquote><blockquote><p>其中的url是仓库组的url，仓库组中包括了代理仓库、宿主发行版仓库和宿主调试版仓库</p></blockquote><blockquote><p>保存后，项目会自动从Maven私服中下载CommonUtils构件</p></blockquote><blockquote><p><code>dependency</code>的<code>groupId</code>、<code>artifactId</code>和<code>version</code>要和CommonUtils项目的pom.xml文件配置一样，忘记了可以在Nexus上面的对应构件中查看</p></blockquote><p><strong>至此，Nexus搭建Maven私服就完成了</strong></p><p><strong>欢迎阅读，并希望能指出其中的失误之处，感谢!</strong></p>]]></content>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>hello_pro</title>
      <link href="/hello-pro/index.html"/>
      <url>/hello-pro/index.html</url>
      <content type="html"><![CDATA[<p>你好</p>]]></content>
    </entry>
    
  
</search>
